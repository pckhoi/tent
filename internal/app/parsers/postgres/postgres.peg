{
    // Package postgres parses SQL dump files produced pgdump command
    package postgres

    func toIfaceSlice(v interface{}) []interface{} {
        if v == nil {
            return nil
        }
        return v.([]interface{})
    }

    func toByteSlice(v interface{}) []byte {
        valsSl := toIfaceSlice(v)
        var result []byte
        for _, val := range valsSl {
            result = append(result, val.([]byte)[0])
        }
        return result
    }
}

SQL <- stmts:Stmt+ {
    return stmts, nil
}

Stmt <- Comment* _ stmt:SetStmt {
    return stmt, nil
}

SetStmt <- "SET"i _ key:Key _ ( `=` / "TO"i ) _ values:CommaSeparatedValues _ `;` EOL {
    updateSettings(key.(string), toIfaceSlice(values))
    return nil, nil
}

Key <- [a-z_]i+ {
    return string(c.text), nil
}

CommaSeparatedValues <- vals:( Value ( _ ',' _ Value )* ) {
    res := []interface{}{}
    valsSlice := toIfaceSlice(vals)
    res = append(res, valsSlice[0])
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        res = append(res, vSlice[3])
    }
    return res, nil
}

Value <- ( Number / Boolean / StringConst / Ident )

StringConst <- `'` value:[^'\n]* `'` {
    return String(toByteSlice(value)), nil
}

Ident <- [a-z_]+ {
    return Identifier(c.text), nil
}

Number <- ( `0` / [1-9][0-9]* ) {
    number, _ := strconv.ParseInt(string(c.text), 10, 64)
    return number, nil
}

Boolean <- value:( BooleanTrue / BooleanFalse ) {
    return value, nil
}

BooleanTrue <- ( "TRUE" / "'" BooleanTrueString "'" / BooleanTrueString ) {
    return true, nil
}

BooleanTrueString <- ( "true" / "yes" / "on" / "t" / "y" )

BooleanFalse <- ( "FALSE" / "'" BooleanFalseString "'" / BooleanFalseString ) {
    return false, nil
}

BooleanFalseString <- ( "false" / "no" / "off" / "f" / "n" )

Comment <- ( SingleLineComment / MultilineComment ) {
    return nil, nil
}

MultilineComment <- "/*" ( .* MultilineComment? .* )* "*/" EOL

SingleLineComment <- "--" [^\r\n]* EOL

EOL <-  [ \t]* ("\r\n" / "\n\r" / "\r" / "\n" / EOF)

_ "whitespace" <- [ \t\r\n]*

EOF <- !.