{
    // Package postgres parses SQL dump files produced pgdump command
    package postgres
}

SQL <- stmts:Stmt+ {
    return stmts, nil
}

Stmt <- Comment* _ stmt:( SetStmt / CreateTableStmt / CreateExtensionStmt / CreateTypeStmt / CommentExtensionStmt ) {
    return stmt, nil
}


/*
 ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗    ████████╗ █████╗ ██████╗ ██╗     ███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝██╔══██╗██╔══██╗██║     ██╔════╝
██║     ██████╔╝█████╗  ███████║   ██║   █████╗         ██║   ███████║██████╔╝██║     █████╗  
██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝         ██║   ██╔══██║██╔══██╗██║     ██╔══╝  
╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗       ██║   ██║  ██║██████╔╝███████╗███████╗
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝
*/                                                                                            

CreateTableStmt <- "CREATE"i _1 "TABLE"i _1 tablename:Ident _ "(" _ fields:( FieldDef ( _ "," _ FieldDef )* ) _ ")" _ ";" EOL {
    fieldsSlice := []map[string]string{}
    valsSlice := toIfaceSlice(fields)
    if valsSlice[0] == nil {
        fieldsSlice = append(fieldsSlice, nil)
    } else {
        fieldsSlice = append(fieldsSlice, valsSlice[0].(map[string]string))
    }
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        if vSlice[3] == nil {
            fieldsSlice = append(fieldsSlice, nil)
        } else {
            fieldsSlice = append(fieldsSlice, vSlice[3].(map[string]string))
        }
    }
    return parseCreateTableStmt(tablename, fieldsSlice)
}

FieldDef <- name:Ident _1 dataType:DataType notnull:( _1 "NOT"i _1 "NULL"i )? {
    if dataType == nil {
        return nil, nil
    }
    result := dataType.(map[string]string)
    result["name"] = interfaceToString(name)
    if notnull != nil {
        result["not_null"] = "true"
    }
    return result, nil
}

DataType <- t:( TimestampT / TimeT / VarcharT / CharT / BitVarT / BitT / IntT / PgOidT / OtherT / CustomT ) {
    return t, nil
}

TimestampT <- "TIMESTAMP"i prec:SecPrecision withTimeZone:( WithTZ / WithoutTZ )? {
    var result = make(map[string]string)
    if withTimeZone.(bool) {
        result["type"] = "datetimetz"
    } else {
        result["type"] = "datetime"
    }
    if prec != nil {
        result["sec_precision"] = prec.(string)
    }
    return result, nil
}

TimeT <- "TIME"i prec:SecPrecision withTimeZone:( WithTZ / WithoutTZ )? {
    var result = make(map[string]string)
    if withTimeZone.(bool) {
        result["type"] = "timetz"
    } else {
        result["type"] = "time"
    }
    if prec != nil {
        result["sec_precision"] = prec.(string)
    }
    return result, nil
}

SecPrecision <- ( _1 [0-6])? {
    if len(c.text) > 0 {
        return strings.TrimLeft(string(c.text), " \r\t\n"), nil
    }
    return nil, nil
}

WithTZ <- _1 "WITH"i _1 "TIME"i _1 "ZONE"i {
    return true, nil
}

WithoutTZ <- ( _1 "WITHOUT"i _1 "TIME"i _1 "ZONE"i )? {
    return false, nil
}

CharT <- ( "CHARACTER"i / "CHAR"i ) length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "char",
        "length": "1",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

VarcharT <- ( ( "CHARACTER"i _1 "VARYING"i ) / "VARCHAR"i ) length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "varchar",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

BitT <- "BIT"i length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "bit",
        "length": "1",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

BitVarT <- "BIT"i _1 "VARYING"i length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "bitvar",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

IntT <- ( "INTEGER"i / "INT"i ) {
    return map[string]string{
        "type": "integer",
    }, nil
}

PgOidT <- ( "OID"i / "REGPROCEDURE"i / "REGPROC"i / "REGOPERATOR"i / "REGOPER"i / "REGCLASS"i / "REGTYPE"i / "REGROLE"i / "REGNAMESPACE"i / "REGCONFIG"i / "REGDICTIONARY"i ) {
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}

OtherT <- ( "DATE"i / "SMALLINT"i / "BIGINT"i / "DECIMAL"i / "NUMERIC"i / "REAL"i / "SMALLSERIAL"i / "SERIAL"i / "BIGSERIAL"i / "BOOLEAN"i / "TEXT"i / "MONEY"i / "BYTEA"i / "POINT"i / "LINE"i / "LSEG"i / "BOX"i / "PATH"i / "POLYGON"i / "CIRCLE"i / "CIDR"i / "INET"i / "MACADDR"i / "UUID"i / "XML"i / "JSONB"i / "JSON"i ) {
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}

CustomT <-  Ident {
    typeName := strings.ToLower(string(c.text))
    err := typeExists(typeName)
    if err != nil{
        return nil, err
    }
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}


/*
 ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗    ████████╗██╗   ██╗██████╗ ███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝
██║     ██████╔╝█████╗  ███████║   ██║   █████╗         ██║    ╚████╔╝ ██████╔╝█████╗  
██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝         ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  
╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗       ██║      ██║   ██║     ███████╗
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝      ╚═╝   ╚═╝     ╚══════╝
 */

 CreateTypeStmt <- "CREATE"i _1 "TYPE"i _1 typename:Ident _1 "AS"i _1 typedef:EnumDef _ `;` EOL {
    enum := typedef.(Enum)
    enum.Name = typename.(Identifier)
    return parseCreateTypeEnumStmt(enum)
 }

 EnumDef <- "ENUM" _ "(" _ vals:( StringConst ( _ ',' _ StringConst )*  ) _ ")" {
    labels := []String{}
    valsSlice := toIfaceSlice(vals)
    labels = append(labels, valsSlice[0].(String))
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        labels = append(labels, vSlice[3].(String))
    }
    return Enum{
        Name:   "",
        Labels: labels,
    }, nil
 }


/*
 ██████╗ ████████╗██╗  ██╗███████╗██████╗     ███████╗████████╗███╗   ███╗████████╗
██╔═══██╗╚══██╔══╝██║  ██║██╔════╝██╔══██╗    ██╔════╝╚══██╔══╝████╗ ████║╚══██╔══╝
██║   ██║   ██║   ███████║█████╗  ██████╔╝    ███████╗   ██║   ██╔████╔██║   ██║   
██║   ██║   ██║   ██╔══██║██╔══╝  ██╔══██╗    ╚════██║   ██║   ██║╚██╔╝██║   ██║   
╚██████╔╝   ██║   ██║  ██║███████╗██║  ██║    ███████║   ██║   ██║ ╚═╝ ██║   ██║   
 ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚══════╝   ╚═╝   ╚═╝     ╚═╝   ╚═╝   
*/

CommentExtensionStmt <- "COMMENT"i _1 "ON"i _1 "EXTENSION"i _ extension:Ident _ "IS"i _ comment:StringConst _ `;` EOL {
    return parseCommentExtensionStmt(extension.(Identifier), comment.(String))
}

CreateExtensionStmt <- "CREATE"i _1 "EXTENSION"i _1 ( "IF"i _1 "NOT"i _1 "EXISTS"i _1 )? extension:Ident _1 "WITH"i _1 "SCHEMA"i _1 schema:Ident _ `;` EOL {
    return parseCreateExtensionStmt(extension.(Identifier), schema.(Identifier))
}

SetStmt <- "SET"i _ key:Key _ ( `=` / "TO"i ) _ values:CommaSeparatedValues _ `;` EOL {
    setSettings(key.(string), toIfaceSlice(values))
    return nil, nil
}

Key <- [a-z_]i+ {
    return string(c.text), nil
}


/*
██╗   ██╗ █████╗ ██╗     ██╗   ██╗███████╗███████╗
██║   ██║██╔══██╗██║     ██║   ██║██╔════╝██╔════╝
██║   ██║███████║██║     ██║   ██║█████╗  ███████╗
╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══╝  ╚════██║
 ╚████╔╝ ██║  ██║███████╗╚██████╔╝███████╗███████║
  ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝╚══════╝
*/


CommaSeparatedValues <- vals:( Value ( _ ',' _ Value )* ) {
    res := []interface{}{}
    valsSlice := toIfaceSlice(vals)
    res = append(res, valsSlice[0])
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        res = append(res, vSlice[3])
    }
    return res, nil
}

Value <- ( Number / Boolean / StringConst / Ident )

StringConst <- `'` value:([^'\n] / "''")* `'` {
    return String(toByteSlice(value)), nil
}

Ident <- [a-z_]i [a-z_0-9$]i* {
    return Identifier(c.text), nil
}

Number <- ( `0` / [1-9][0-9]* ) {
    number, _ := strconv.ParseInt(string(c.text), 10, 64)
    return number, nil
}

NonZNumber <- [1-9][0-9]* {
    number, _ := strconv.ParseInt(string(c.text), 10, 64)
    return number, nil
}

Boolean <- value:( BooleanTrue / BooleanFalse ) {
    return value, nil
}

BooleanTrue <- ( "TRUE" / "'" BooleanTrueString "'" / BooleanTrueString ) {
    return true, nil
}

BooleanTrueString <- ( "true" / "yes" / "on" / "t" / "y" )

BooleanFalse <- ( "FALSE" / "'" BooleanFalseString "'" / BooleanFalseString ) {
    return false, nil
}

BooleanFalseString <- ( "false" / "no" / "off" / "f" / "n" )


/*
███╗   ███╗██╗███████╗ ██████╗
████╗ ████║██║██╔════╝██╔════╝
██╔████╔██║██║███████╗██║     
██║╚██╔╝██║██║╚════██║██║     
██║ ╚═╝ ██║██║███████║╚██████╗
╚═╝     ╚═╝╚═╝╚══════╝ ╚═════╝
*/

Comment <- ( SingleLineComment / MultilineComment ) {
    return nil, nil
}

MultilineComment <- "/*" ( .* MultilineComment? .* )* "*/" EOL

SingleLineComment <- "--" [^\r\n]* EOL

EOL <-  [ \t]* ("\r\n" / "\n\r" / "\r" / "\n" / EOF)

_ "whitespace" <- [ \t\r\n]*

_1 "at least 1 whitespace" <- [ \t\r\n]+

EOF <- !.