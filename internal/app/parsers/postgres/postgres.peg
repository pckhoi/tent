{
    // Package postgres parses SQL dump files produced pgdump command
    package postgres

    import (
        "github.com/imdario/mergo"
        "strconv"
    )
}

SQL <- stmts:Stmt+ {
    return stmts, nil
}

Stmt <- Comment* _ stmt:( SetStmt / CreateTableStmt / CreateSeqStmt / CreateExtensionStmt / CreateTypeStmt / AlterTableStmt / AlterSeqStmt / CommentExtensionStmt ) {
    return stmt, nil
}


/*
 ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗    ████████╗ █████╗ ██████╗ ██╗     ███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝██╔══██╗██╔══██╗██║     ██╔════╝
██║     ██████╔╝█████╗  ███████║   ██║   █████╗         ██║   ███████║██████╔╝██║     █████╗  
██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝         ██║   ██╔══██║██╔══██╗██║     ██╔══╝  
╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗       ██║   ██║  ██║██████╔╝███████╗███████╗
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝
*/                                                                                            

CreateTableStmt <- "CREATE"i _1 "TABLE"i _1 tablename:Ident _ "(" _ defs:( TableDef ( _ "," _ TableDef )* ) _ ")" _ ";" EOL* {
    defsSlice := []map[string]string{}
    valsSlice := toIfaceSlice(defs)
    if valsSlice[0] == nil {
        defsSlice = append(defsSlice, nil)
    } else {
        defsSlice = append(defsSlice, valsSlice[0].(map[string]string))
    }
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        if vSlice[3] == nil {
            defsSlice = append(defsSlice, nil)
        } else {
            defsSlice = append(defsSlice, vSlice[3].(map[string]string))
        }
    }
    return parseCreateTableStmt(tablename, defsSlice)
}

TableDef <- TableConstr / ColumnDef

ColumnDef <- name:(DblQuotedString / StringConst / Ident) _1 dataType:DataType constraint:ColumnConstraint? {
    if dataType == nil {
        return nil, nil
    }
    result := make(map[string]string)
    if err := mergo.Merge(&result, dataType.(map[string]string), mergo.WithOverride); err != nil {
        return nil, err
    }
    if constraint != nil {
        if err := mergo.Merge(&result, constraint.(map[string]string), mergo.WithOverride); err != nil {
            return nil, err
        }
    }
    result["name"] = interfaceToString(name)
    return result, nil
}

ColumnConstraint <- nameOpt:( _1 "CONSTRAINT"i _1 (StringConst / Ident) )? _ constraint:( NotNullCls / NullCls / CheckCls ) {
    properties := make(map[string]string)

    if err := mergo.Merge(&properties, constraint.(map[string]string), mergo.WithOverride); err != nil {
        return nil, err
    }

    nameSlice := toIfaceSlice(nameOpt)
    if nameSlice != nil {
        properties["constraint_name"] = interfaceToString(nameSlice[3])
    }

    return properties, nil
}

TableConstr <- nameOpt:( "CONSTRAINT"i _1 (StringConst / Ident) )? _ constraint:CheckCls {
    properties := map[string]string{
        "table_constraint": "true",
    }

    if err := mergo.Merge(&properties, constraint.(map[string]string), mergo.WithOverride); err != nil {
        return nil, err
    }

    nameSlice := toIfaceSlice(nameOpt)
    if nameSlice != nil {
        properties["constraint_name"] = interfaceToString(nameSlice[2])
    }

    return properties, nil
}

NotNullCls <- "NOT"i _1 "NULL"i {
    return map[string]string{
        "not_null": "true",
    }, nil
}

NullCls <- "NULL"i {
    return map[string]string{
        "not_null": "false",
    }, nil
}

CheckCls <- "CHECK"i _1 expr:WrappedExpr noInherit:( _1 "NO"i _1 "INHERIT"i )? {
    result := map[string]string{
        "check_def": expr.(string),
    }
    if noInherit != nil {
        result["check_no_inherit"] = "true"
    }
    return result, nil
}

WrappedExpr <- `(` Expr+ `)` {
    return string(c.text), nil
}

Expr <- WrappedExpr / [^()]+




/*
██████╗  █████╗ ████████╗ █████╗ ████████╗██╗   ██╗██████╗ ███████╗
██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝
██║  ██║███████║   ██║   ███████║   ██║    ╚████╔╝ ██████╔╝█████╗  
██║  ██║██╔══██║   ██║   ██╔══██║   ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  
██████╔╝██║  ██║   ██║   ██║  ██║   ██║      ██║   ██║     ███████╗
╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝     ╚══════╝
*/

DataType <- t:( TimestampT / TimeT / VarcharT / CharT / BitVarT / BitT / IntT / PgOidT / GeographyT / OtherT / CustomT ) brackets:( "[]" )* {
    bracketsSlice := toIfaceSlice(brackets)
    var result map[string]string
    if t != nil {
        result = t.(map[string]string)
        if l := len(bracketsSlice); l > 0 {
            result["array_dimensions"] = strconv.Itoa(l)
        }
        return result, nil
    }
    return nil, nil
}

TimestampT <- "TIMESTAMP"i prec:SecPrecision withTimeZone:( WithTZ / WithoutTZ )? {
    var result = make(map[string]string)
    if withTimeZone.(bool) {
        result["type"] = "datetimetz"
    } else {
        result["type"] = "datetime"
    }
    if prec != nil {
        result["sec_precision"] = prec.(string)
    }
    return result, nil
}

TimeT <- "TIME"i prec:SecPrecision withTimeZone:( WithTZ / WithoutTZ )? {
    var result = make(map[string]string)
    if withTimeZone.(bool) {
        result["type"] = "timetz"
    } else {
        result["type"] = "time"
    }
    if prec != nil {
        result["sec_precision"] = prec.(string)
    }
    return result, nil
}

SecPrecision <- ( _1 [0-6])? {
    if len(c.text) > 0 {
        return strings.TrimLeft(string(c.text), " \r\t\n"), nil
    }
    return nil, nil
}

WithTZ <- _1 "WITH"i _1 "TIME"i _1 "ZONE"i {
    return true, nil
}

WithoutTZ <- ( _1 "WITHOUT"i _1 "TIME"i _1 "ZONE"i )? {
    return false, nil
}

CharT <- ( "CHARACTER"i / "CHAR"i ) length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "char",
        "length": "1",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

VarcharT <- ( ( "CHARACTER"i _1 "VARYING"i ) / "VARCHAR"i ) length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "varchar",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

BitT <- "BIT"i length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "bit",
        "length": "1",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

BitVarT <- "BIT"i _1 "VARYING"i length:( "(" NonZNumber ")" )? {
    result := map[string]string{
        "type": "bitvar",
    }
    if length != nil {
        slice := toIfaceSlice(length)
        result["length"] = strconv.FormatInt(slice[1].(int64), 10)
    }
    return result, nil
}

IntT <- ( "INTEGER"i / "INT"i ) {
    return map[string]string{
        "type": "integer",
    }, nil
}

GeographyT <- "GEOGRAPHY"i `(` subtype:( "POINT"i / "LINESTRING"i / "POLYGON"i / "MULTIPOINT"i / "MULTILINESTRING"i / "MULTIPOLYGON"i / "GEOMETRYCOLLECTION"i ) srid:(`,` NonZNumber)? `)` {
    result := map[string]string{
        "type": "geography",
    }
    subtypeString := string(subtype.([]byte))
    result["geography_type"] = strings.ToLower(subtypeString)
    if srid != nil {
        sridSlice := toIfaceSlice(srid)
        result["srid"] = strconv.FormatInt(sridSlice[1].(int64), 10)
    }
    return result, nil
}

PgOidT <- ( "OID"i / "REGPROCEDURE"i / "REGPROC"i / "REGOPERATOR"i / "REGOPER"i / "REGCLASS"i / "REGTYPE"i / "REGROLE"i / "REGNAMESPACE"i / "REGCONFIG"i / "REGDICTIONARY"i ) {
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}

OtherT <- ( "DATE"i / "SMALLINT"i / "BIGINT"i / "DECIMAL"i / "NUMERIC"i / "REAL"i / "SMALLSERIAL"i / "SERIAL"i / "BIGSERIAL"i / "BOOLEAN"i / "TEXT"i / "MONEY"i / "BYTEA"i / "POINT"i / "LINE"i / "LSEG"i / "BOX"i / "PATH"i / "POLYGON"i / "CIRCLE"i / "CIDR"i / "INET"i / "MACADDR"i / "UUID"i / "XML"i / "JSONB"i / "JSON"i ) {
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}

CustomT <-  Ident {
    typeName := strings.ToLower(string(c.text))
    err := typeExists(typeName)
    if err != nil{
        return nil, err
    }
    return map[string]string{
        "type": strings.ToLower(string(c.text)),
    }, nil
}


/*
 ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗    ███████╗███████╗ ██████╗ 
██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ██╔════╝██╔════╝██╔═══██╗
██║     ██████╔╝█████╗  ███████║   ██║   █████╗      ███████╗█████╗  ██║   ██║
██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝      ╚════██║██╔══╝  ██║▄▄ ██║
╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗    ███████║███████╗╚██████╔╝
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚══════╝╚══════╝ ╚══▀▀═╝
*/

CreateSeqStmt <- "CREATE"i _1 "SEQUENCE"i _1 name:Ident verses:CreateSeqVerse* _ `;` EOL* {
    versesSlice := toIfaceSlice(verses)
    properties := make(map[string]string)
    for _, verse := range versesSlice {
        if verse == nil {
            continue
        }
        if err := mergo.Merge(&properties, verse.(map[string]string), mergo.WithOverride); err != nil {
            return nil, err
        }
    }
    return parseCreateSeq(name.(Identifier), properties)
}

CreateSeqVerse <- verse:( IncrementBy / MinValue / NoMinValue / MaxValue / NoMaxValue / Start / Cache / Cycle / OwnedBy ) {
    return verse, nil
}

IncrementBy <- _1 "INCREMENT"i (_1 "BY"i)? _1 num:NonZNumber {
    return map[string]string{
        "increment": strconv.FormatInt(num.(int64), 10),
    }, nil
}

MinValue <- _1 "MINVALUE"i _1 val:NonZNumber {
    return map[string]string{
        "minvalue": strconv.FormatInt(val.(int64), 10),
    }, nil
}

NoMinValue <- _1 "NO"i _1 "MINVALUE"i {
    return nil, nil
}

MaxValue <- _1 "MAXVALUE"i _1 val:NonZNumber {
    return map[string]string{
        "maxvalue": strconv.FormatInt(val.(int64), 10),
    }, nil
}

NoMaxValue <- _1 "NO"i _1 "MAXVALUE"i {
    return nil, nil
}

Start <- _1 "START"i (_1 "WITH"i)? _1 start:NonZNumber {
    return map[string]string{
        "start": strconv.FormatInt(start.(int64), 10),
    }, nil
}

Cache <- _1 "CACHE"i _1 cache:NonZNumber {
    return map[string]string{
        "cache": strconv.FormatInt(cache.(int64), 10),
    }, nil
}

Cycle <- no:(_1 "NO"i)? _1 "CYCLE"i {
    if no != nil {
        return map[string]string{
            "cycle": "false",
        }, nil
    }
    return map[string]string{
        "cycle": "true",
    }, nil
}

OwnedBy <- _1 "OWNED"i _1 "BY"i _1 name:( "NONE"i / TableDotCol ) {
    if _, ok := name.([]byte); ok {
        return nil, nil
    }
    return map[string]string{
        "owned_by": name.(string),
    }, nil
}

/*
 ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗    ████████╗██╗   ██╗██████╗ ███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝
██║     ██████╔╝█████╗  ███████║   ██║   █████╗         ██║    ╚████╔╝ ██████╔╝█████╗  
██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝         ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  
╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗       ██║      ██║   ██║     ███████╗
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝      ╚═╝   ╚═╝     ╚══════╝
 */

CreateTypeStmt <- "CREATE"i _1 "TYPE"i _1 typename:Ident _1 "AS"i _1 typedef:EnumDef _ `;` EOL* {
    enum := typedef.(Enum)
    enum.Name = typename.(Identifier)
    return parseCreateTypeEnumStmt(enum)
}

EnumDef <- "ENUM" _ "(" _ vals:( StringConst ( _ ',' _ StringConst )*  ) _ ")" {
    labels := []String{}
    valsSlice := toIfaceSlice(vals)
    labels = append(labels, valsSlice[0].(String))
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        labels = append(labels, vSlice[3].(String))
    }
    return Enum{
        Name:   "",
        Labels: labels,
    }, nil
}


 /*
 █████╗ ██╗  ████████╗███████╗██████╗     ████████╗ █████╗ ██████╗ ██╗     ███████╗
██╔══██╗██║  ╚══██╔══╝██╔════╝██╔══██╗    ╚══██╔══╝██╔══██╗██╔══██╗██║     ██╔════╝
███████║██║     ██║   █████╗  ██████╔╝       ██║   ███████║██████╔╝██║     █████╗  
██╔══██║██║     ██║   ██╔══╝  ██╔══██╗       ██║   ██╔══██║██╔══██╗██║     ██╔══╝  
██║  ██║███████╗██║   ███████╗██║  ██║       ██║   ██║  ██║██████╔╝███████╗███████╗
╚═╝  ╚═╝╚══════╝╚═╝   ╚══════╝╚═╝  ╚═╝       ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝
*/

AlterTableStmt <- "ALTER"i _1 "TABLE"i _1 name:Ident _1 "OWNER"i _1 "TO"i _1 owner:Ident _ ";" EOL* {
    return parseAlterTableStmt(name.(Identifier), owner.(Identifier))
}


/*
 █████╗ ██╗  ████████╗███████╗██████╗     ███████╗███████╗ ██████╗ 
██╔══██╗██║  ╚══██╔══╝██╔════╝██╔══██╗    ██╔════╝██╔════╝██╔═══██╗
███████║██║     ██║   █████╗  ██████╔╝    ███████╗█████╗  ██║   ██║
██╔══██║██║     ██║   ██╔══╝  ██╔══██╗    ╚════██║██╔══╝  ██║▄▄ ██║
██║  ██║███████╗██║   ███████╗██║  ██║    ███████║███████╗╚██████╔╝
╚═╝  ╚═╝╚══════╝╚═╝   ╚══════╝╚═╝  ╚═╝    ╚══════╝╚══════╝ ╚══▀▀═╝ 
*/

AlterSeqStmt <- "ALTER"i _1 "SEQUENCE"i _1 name:Ident _1 "OWNED"i _1 "BY"i _1 owner:TableDotCol _ ";" EOL* {
    return parseAlterSequenceStmt(name.(Identifier), owner.(string))
}

TableDotCol <- table:Ident "." column:Ident {
    return parseTableDotColumn(table.(Identifier), column.(Identifier)), nil
}


/*
 ██████╗ ████████╗██╗  ██╗███████╗██████╗     ███████╗████████╗███╗   ███╗████████╗
██╔═══██╗╚══██╔══╝██║  ██║██╔════╝██╔══██╗    ██╔════╝╚══██╔══╝████╗ ████║╚══██╔══╝
██║   ██║   ██║   ███████║█████╗  ██████╔╝    ███████╗   ██║   ██╔████╔██║   ██║   
██║   ██║   ██║   ██╔══██║██╔══╝  ██╔══██╗    ╚════██║   ██║   ██║╚██╔╝██║   ██║   
╚██████╔╝   ██║   ██║  ██║███████╗██║  ██║    ███████║   ██║   ██║ ╚═╝ ██║   ██║   
 ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚══════╝   ╚═╝   ╚═╝     ╚═╝   ╚═╝   
*/

CommentExtensionStmt <- "COMMENT"i _1 "ON"i _1 "EXTENSION"i _ extension:Ident _ "IS"i _ comment:StringConst _ `;` EOL* {
    return parseCommentExtensionStmt(extension.(Identifier), comment.(String))
}

CreateExtensionStmt <- "CREATE"i _1 "EXTENSION"i _1 ( "IF"i _1 "NOT"i _1 "EXISTS"i _1 )? extension:Ident _1 "WITH"i _1 "SCHEMA"i _1 schema:Ident _ `;` EOL* {
    return parseCreateExtensionStmt(extension.(Identifier), schema.(Identifier))
}

SetStmt <- "SET"i _ key:Key _ ( `=` / "TO"i ) _ values:CommaSeparatedValues _ `;` EOL* {
    setSettings(key.(string), toIfaceSlice(values))
    return nil, nil
}

Key <- [a-z_]i+ {
    return string(c.text), nil
}


/*
██╗   ██╗ █████╗ ██╗     ██╗   ██╗███████╗███████╗
██║   ██║██╔══██╗██║     ██║   ██║██╔════╝██╔════╝
██║   ██║███████║██║     ██║   ██║█████╗  ███████╗
╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══╝  ╚════██║
 ╚████╔╝ ██║  ██║███████╗╚██████╔╝███████╗███████║
  ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝╚══════╝
*/


CommaSeparatedValues <- vals:( Value ( _ ',' _ Value )* ) {
    res := []interface{}{}
    valsSlice := toIfaceSlice(vals)
    res = append(res, valsSlice[0])
    restSlice := toIfaceSlice(valsSlice[1])
    for _, v := range restSlice {
        vSlice := toIfaceSlice(v)
        res = append(res, vSlice[3])
    }
    return res, nil
}

Value <- ( Number / Boolean / StringConst / Ident )

StringConst <- `'` value:([^'\n] / "''")* `'` {
    return String(toByteSlice(value)), nil
}

DblQuotedString <- `"` value:([^"\n] / "\"\"")* `"` {
    return DoubleQuotedString(toByteSlice(value)), nil
}

Ident <- [a-z_]i [a-z_0-9$]i* {
    return Identifier(c.text), nil
}

Number <- ( `0` / [1-9][0-9]* ) {
    number, _ := strconv.ParseInt(string(c.text), 10, 64)
    return number, nil
}

NonZNumber <- [1-9][0-9]* {
    number, _ := strconv.ParseInt(string(c.text), 10, 64)
    return number, nil
}

Boolean <- value:( BooleanTrue / BooleanFalse ) {
    return value, nil
}

BooleanTrue <- ( "TRUE" / "'" BooleanTrueString "'" / BooleanTrueString ) {
    return true, nil
}

BooleanTrueString <- ( "true" / "yes" / "on" / "t" / "y" )

BooleanFalse <- ( "FALSE" / "'" BooleanFalseString "'" / BooleanFalseString ) {
    return false, nil
}

BooleanFalseString <- ( "false" / "no" / "off" / "f" / "n" )


/*
███╗   ███╗██╗███████╗ ██████╗
████╗ ████║██║██╔════╝██╔════╝
██╔████╔██║██║███████╗██║     
██║╚██╔╝██║██║╚════██║██║     
██║ ╚═╝ ██║██║███████║╚██████╗
╚═╝     ╚═╝╚═╝╚══════╝ ╚═════╝
*/

Comment <- ( SingleLineComment / MultilineComment ) {
    return nil, nil
}

MultilineComment <- "/*" .* "*/" EOL

SingleLineComment <- "--" [^\r\n]* EOL

EOL <-  [ \t]* ("\r\n" / "\n\r" / "\r" / "\n")

_ "whitespace" <- [ \t\r\n]*

_1 "at least 1 whitespace" <- [ \t\r\n]+

EOF <- !.