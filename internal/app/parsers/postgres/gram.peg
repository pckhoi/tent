{
    package postgres
}

Stmtblock
    = Stmtmulti

Stmtmulti
    = var1:Stmt (_ ";" _ Stmt)* {
        return Node{
            Name: "Stmtmulti",
            Props: map[string]interface{}{
                "Stmt1": var1,
            },
        }, nil
    }

Stmt
    = (AlterEventTrigStmt
    / AlterCollationStmt
    / AlterDatabaseStmt
    / AlterDatabaseSetStmt
    / AlterDefaultPrivilegesStmt
    / AlterDomainStmt
    / AlterEnumStmt
    / AlterExtensionStmt
    / AlterExtensionContentsStmt
    / AlterFdwStmt
    / AlterForeignServerStmt
    / AlterForeignTableStmt
    / AlterFunctionStmt
    / AlterGroupStmt
    / AlterObjectDependsStmt
    / AlterObjectSchemaStmt
    / AlterOwnerStmt
    / AlterOperatorStmt
    / AlterPolicyStmt
    / AlterSeqStmt
    / AlterSystemStmt
    / AlterTableStmt
    / AlterTblSpcStmt
    / AlterCompositeTypeStmt
    / AlterPublicationStmt
    / AlterRoleSetStmt
    / AlterRoleStmt
    / AlterSubscriptionStmt
    / AlterTSConfigurationStmt
    / AlterTSDictionaryStmt
    / AlterUserMappingStmt
    / AnalyzeStmt
    / CallStmt
    / CheckPointStmt
    / ClosePortalStmt
    / ClusterStmt
    / CommentStmt
    / ConstraintsSetStmt
    / CopyStmt
    / CreateAmStmt
    / CreateAsStmt
    / CreateAssertStmt
    / CreateCastStmt
    / CreateConversionStmt
    / CreateDomainStmt
    / CreateExtensionStmt
    / CreateFdwStmt
    / CreateForeignServerStmt
    / CreateForeignTableStmt
    / CreateFunctionStmt
    / CreateGroupStmt
    / CreateMatViewStmt
    / CreateOpClassStmt
    / CreateOpFamilyStmt
    / CreatePublicationStmt
    / AlterOpFamilyStmt
    / CreatePolicyStmt
    / CreatePLangStmt
    / CreateSchemaStmt
    / CreateSeqStmt
    / CreateStmt
    / CreateSubscriptionStmt
    / CreateStatsStmt
    / CreateTableSpaceStmt
    / CreateTransformStmt
    / CreateTrigStmt
    / CreateEventTrigStmt
    / CreateRoleStmt
    / CreateUserStmt
    / CreateUserMappingStmt
    / CreatedbStmt
    / DeallocateStmt
    / DeclareCursorStmt
    / DefineStmt
    / DeleteStmt
    / DiscardStmt
    / DoStmt
    / DropAssertStmt
    / DropCastStmt
    / DropOpClassStmt
    / DropOpFamilyStmt
    / DropOwnedStmt
    / DropPLangStmt
    / DropStmt
    / DropSubscriptionStmt
    / DropTableSpaceStmt
    / DropTransformStmt
    / DropRoleStmt
    / DropUserMappingStmt
    / DropdbStmt
    / ExecuteStmt
    / ExplainStmt
    / FetchStmt
    / GrantStmt
    / GrantRoleStmt
    / ImportForeignSchemaStmt
    / IndexStmt
    / InsertStmt
    / ListenStmt
    / RefreshMatViewStmt
    / LoadStmt
    / LockStmt
    / NotifyStmt
    / PrepareStmt
    / ReassignOwnedStmt
    / ReindexStmt
    / RemoveAggrStmt
    / RemoveFuncStmt
    / RemoveOperStmt
    / RenameStmt
    / RevokeStmt
    / RevokeRoleStmt
    / RuleStmt
    / SecLabelStmt
    / SelectStmt
    / TransactionStmt
    / TruncateStmt
    / UnlistenStmt
    / UpdateStmt
    / VacuumStmt
    / VariableResetStmt
    / VariableSetStmt
    / VariableShowStmt
    / ViewStmt)?

CallStmt
    = (CALL _ var1:FuncApplication) {
        return Node{
            Name: "CallStmt",
            Props: map[string]interface{}{
                "FuncApplication1": var1,
            },
        }, nil
    }

CreateRoleStmt
    = (CREATE _ ROLE _ RoleId _ var1:OptWith _ var2:OptRoleList) {
        return Node{
            Name: "CreateRoleStmt",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "OptRoleList1": var2,
            },
        }, nil
    }

OptWith
    = WITH?

OptRoleList
    = (_ CreateOptRoleElem)*

AlterOptRoleList
    = (_ AlterOptRoleElem)*

AlterOptRoleElem
    = AlterOptRoleElemOption1
    / AlterOptRoleElemOption2
    / AlterOptRoleElemOption3
    / AlterOptRoleElemOption4
    / AlterOptRoleElemOption5
    / AlterOptRoleElemOption6
    / AlterOptRoleElemOption7
    / INHERIT
    / IDENT

AlterOptRoleElemOption1
    = VALID _ UNTIL _ Sconst

AlterOptRoleElemOption2
    = ENCRYPTED _ PASSWORD _ Sconst

AlterOptRoleElemOption3
    = UNENCRYPTED _ PASSWORD _ Sconst

AlterOptRoleElemOption4
    = CONNECTION _ LIMIT _ var1:SignedIconst {
        return Node{
            Name: "AlterOptRoleElemOption4",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

AlterOptRoleElemOption5
    = PASSWORD _ NULL

AlterOptRoleElemOption6
    = PASSWORD _ Sconst

AlterOptRoleElemOption7
    = USER _ var1:RoleList {
        return Node{
            Name: "AlterOptRoleElemOption7",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateOptRoleElem
    = CreateOptRoleElemOption1
    / CreateOptRoleElemOption2
    / CreateOptRoleElemOption3
    / CreateOptRoleElemOption4
    / CreateOptRoleElemOption5
    / AlterOptRoleElem

CreateOptRoleElemOption1
    = IN _ ROLE _ var1:RoleList {
        return Node{
            Name: "CreateOptRoleElemOption1",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateOptRoleElemOption2
    = IN _ GROUP _ var1:RoleList {
        return Node{
            Name: "CreateOptRoleElemOption2",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateOptRoleElemOption3
    = SYSID _ Iconst

CreateOptRoleElemOption4
    = ADMIN _ var1:RoleList {
        return Node{
            Name: "CreateOptRoleElemOption4",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateOptRoleElemOption5
    = ROLE _ var1:RoleList {
        return Node{
            Name: "CreateOptRoleElemOption5",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateUserStmt
    = (CREATE _ USER _ RoleId _ var1:OptWith _ var2:OptRoleList) {
        return Node{
            Name: "CreateUserStmt",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "OptRoleList1": var2,
            },
        }, nil
    }

AlterRoleStmt
    = AlterRoleStmtOption1
    / AlterRoleStmtOption2

AlterRoleStmtOption1
    = ALTER _ ROLE _ var1:RoleSpec _ var2:OptWith _ var3:AlterOptRoleList {
        return Node{
            Name: "AlterRoleStmtOption1",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptWith1": var2,
                "AlterOptRoleList1": var3,
            },
        }, nil
    }

AlterRoleStmtOption2
    = ALTER _ USER _ var1:RoleSpec _ var2:OptWith _ var3:AlterOptRoleList {
        return Node{
            Name: "AlterRoleStmtOption2",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptWith1": var2,
                "AlterOptRoleList1": var3,
            },
        }, nil
    }

OptInDatabase
    = (IN _ DATABASE _ DatabaseName)?

AlterRoleSetStmt
    = AlterRoleSetStmtOption1
    / AlterRoleSetStmtOption2
    / AlterRoleSetStmtOption3
    / AlterRoleSetStmtOption4

AlterRoleSetStmtOption1
    = ALTER _ ROLE _ var1:RoleSpec _ var2:OptInDatabase _ var3:SetResetClause {
        return Node{
            Name: "AlterRoleSetStmtOption1",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptInDatabase1": var2,
                "SetResetClause1": var3,
            },
        }, nil
    }

AlterRoleSetStmtOption2
    = ALTER _ ROLE _ ALL _ var1:OptInDatabase _ var2:SetResetClause {
        return Node{
            Name: "AlterRoleSetStmtOption2",
            Props: map[string]interface{}{
                "OptInDatabase1": var1,
                "SetResetClause1": var2,
            },
        }, nil
    }

AlterRoleSetStmtOption3
    = ALTER _ USER _ var1:RoleSpec _ var2:OptInDatabase _ var3:SetResetClause {
        return Node{
            Name: "AlterRoleSetStmtOption3",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptInDatabase1": var2,
                "SetResetClause1": var3,
            },
        }, nil
    }

AlterRoleSetStmtOption4
    = ALTER _ USER _ ALL _ var1:OptInDatabase _ var2:SetResetClause {
        return Node{
            Name: "AlterRoleSetStmtOption4",
            Props: map[string]interface{}{
                "OptInDatabase1": var1,
                "SetResetClause1": var2,
            },
        }, nil
    }

DropRoleStmt
    = DropRoleStmtOption1
    / DropRoleStmtOption2
    / DropRoleStmtOption3
    / DropRoleStmtOption4
    / DropRoleStmtOption5
    / DropRoleStmtOption6

DropRoleStmtOption1
    = DROP _ ROLE _ IF _ EXISTS _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption1",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DropRoleStmtOption2
    = DROP _ USER _ IF _ EXISTS _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption2",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DropRoleStmtOption3
    = DROP _ GROUP _ IF _ EXISTS _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption3",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DropRoleStmtOption4
    = DROP _ ROLE _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption4",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DropRoleStmtOption5
    = DROP _ USER _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption5",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DropRoleStmtOption6
    = DROP _ GROUP _ var1:RoleList {
        return Node{
            Name: "DropRoleStmtOption6",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

CreateGroupStmt
    = (CREATE _ GROUP _ RoleId _ var1:OptWith _ var2:OptRoleList) {
        return Node{
            Name: "CreateGroupStmt",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "OptRoleList1": var2,
            },
        }, nil
    }

AlterGroupStmt
    = (ALTER _ GROUP _ var1:RoleSpec _ var2:AddDrop _ USER _ var3:RoleList) {
        return Node{
            Name: "AlterGroupStmt",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "AddDrop1": var2,
                "RoleList1": var3,
            },
        }, nil
    }

AddDrop
    = ADD
    / DROP

CreateSchemaStmt
    = CreateSchemaStmtOption1
    / CreateSchemaStmtOption2
    / CreateSchemaStmtOption3
    / CreateSchemaStmtOption4

CreateSchemaStmtOption1
    = CREATE _ SCHEMA _ IF _ NOT _ EXISTS _ OptSchemaName _ AUTHORIZATION _ var1:RoleSpec _ var2:OptSchemaEltList {
        return Node{
            Name: "CreateSchemaStmtOption1",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptSchemaEltList1": var2,
            },
        }, nil
    }

CreateSchemaStmtOption2
    = CREATE _ SCHEMA _ IF _ NOT _ EXISTS _ var1:ColId _ var2:OptSchemaEltList {
        return Node{
            Name: "CreateSchemaStmtOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptSchemaEltList1": var2,
            },
        }, nil
    }

CreateSchemaStmtOption3
    = CREATE _ SCHEMA _ OptSchemaName _ AUTHORIZATION _ var1:RoleSpec _ var2:OptSchemaEltList {
        return Node{
            Name: "CreateSchemaStmtOption3",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
                "OptSchemaEltList1": var2,
            },
        }, nil
    }

CreateSchemaStmtOption4
    = CREATE _ SCHEMA _ var1:ColId _ var2:OptSchemaEltList {
        return Node{
            Name: "CreateSchemaStmtOption4",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptSchemaEltList1": var2,
            },
        }, nil
    }

OptSchemaName
    = ColId?

OptSchemaEltList
    = (_ SchemaStmt)*

SchemaStmt
    = CreateStmt
    / IndexStmt
    / CreateSeqStmt
    / CreateTrigStmt
    / GrantStmt
    / ViewStmt

VariableSetStmt
    = VariableSetStmtOption1
    / VariableSetStmtOption2
    / VariableSetStmtOption3

VariableSetStmtOption1
    = SET _ LOCAL _ var1:SetRest {
        return Node{
            Name: "VariableSetStmtOption1",
            Props: map[string]interface{}{
                "SetRest1": var1,
            },
        }, nil
    }

VariableSetStmtOption2
    = SET _ SESSION _ var1:SetRest {
        return Node{
            Name: "VariableSetStmtOption2",
            Props: map[string]interface{}{
                "SetRest1": var1,
            },
        }, nil
    }

VariableSetStmtOption3
    = SET _ var1:SetRest {
        return Node{
            Name: "VariableSetStmtOption3",
            Props: map[string]interface{}{
                "SetRest1": var1,
            },
        }, nil
    }

SetRest
    = SetRestOption1
    / SetRestOption2
    / SetRestMore

SetRestOption1
    = SESSION _ CHARACTERISTICS _ AS _ TRANSACTION _ var1:TransactionModeList {
        return Node{
            Name: "SetRestOption1",
            Props: map[string]interface{}{
                "TransactionModeList1": var1,
            },
        }, nil
    }

SetRestOption2
    = TRANSACTION _ var1:TransactionModeList {
        return Node{
            Name: "SetRestOption2",
            Props: map[string]interface{}{
                "TransactionModeList1": var1,
            },
        }, nil
    }

GenericSet
    = GenericSetOption1
    / GenericSetOption2
    / GenericSetOption3
    / GenericSetOption4

GenericSetOption1
    = var1:VarName _ TO _ var2:VarList {
        return Node{
            Name: "GenericSetOption1",
            Props: map[string]interface{}{
                "VarName1": var1,
                "VarList1": var2,
            },
        }, nil
    }

GenericSetOption2
    = var1:VarName _ "=" _ var2:VarList {
        return Node{
            Name: "GenericSetOption2",
            Props: map[string]interface{}{
                "VarName1": var1,
                "VarList1": var2,
            },
        }, nil
    }

GenericSetOption3
    = var1:VarName _ TO _ DEFAULT {
        return Node{
            Name: "GenericSetOption3",
            Props: map[string]interface{}{
                "VarName1": var1,
            },
        }, nil
    }

GenericSetOption4
    = var1:VarName _ "=" _ DEFAULT {
        return Node{
            Name: "GenericSetOption4",
            Props: map[string]interface{}{
                "VarName1": var1,
            },
        }, nil
    }

SetRestMore
    = SetRestMoreOption1
    / SetRestMoreOption2
    / SetRestMoreOption3
    / SetRestMoreOption4
    / SetRestMoreOption5
    / SetRestMoreOption6
    / SetRestMoreOption7
    / SetRestMoreOption8
    / SetRestMoreOption9
    / SetRestMoreOption10
    / GenericSet

SetRestMoreOption1
    = var1:VarName _ FROM _ CURRENT {
        return Node{
            Name: "SetRestMoreOption1",
            Props: map[string]interface{}{
                "VarName1": var1,
            },
        }, nil
    }

SetRestMoreOption2
    = TIME _ ZONE _ var1:ZoneValue {
        return Node{
            Name: "SetRestMoreOption2",
            Props: map[string]interface{}{
                "ZoneValue1": var1,
            },
        }, nil
    }

SetRestMoreOption3
    = XML _ OPTION _ var1:DocumentOrContent {
        return Node{
            Name: "SetRestMoreOption3",
            Props: map[string]interface{}{
                "DocumentOrContent1": var1,
            },
        }, nil
    }

SetRestMoreOption4
    = TRANSACTION _ SNAPSHOT _ Sconst

SetRestMoreOption5
    = SESSION _ AUTHORIZATION _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "SetRestMoreOption5",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

SetRestMoreOption6
    = SESSION _ AUTHORIZATION _ DEFAULT

SetRestMoreOption7
    = ROLE _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "SetRestMoreOption7",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

SetRestMoreOption8
    = NAMES _ var1:OptEncoding {
        return Node{
            Name: "SetRestMoreOption8",
            Props: map[string]interface{}{
                "OptEncoding1": var1,
            },
        }, nil
    }

SetRestMoreOption9
    = CATALOG _ Sconst

SetRestMoreOption10
    = SCHEMA _ Sconst

VarName
    = var1:ColId (_ "." _ ColId)* {
        return Node{
            Name: "VarName",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

VarList
    = var1:VarValue (_ "," _ VarValue)* {
        return Node{
            Name: "VarList",
            Props: map[string]interface{}{
                "VarValue1": var1,
            },
        }, nil
    }

VarValue
    = OptBooleanOrString
    / NumericOnly

IsoLevel
    = (READ _ UNCOMMITTED)
    / (READ _ COMMITTED)
    / (REPEATABLE _ READ)
    / SERIALIZABLE

OptBooleanOrString
    = TRUE
    / FALSE
    / ON
    / NonReservedWordOrSconst

ZoneValue
    = ZoneValueOption1
    / ZoneValueOption2
    / Sconst
    / IDENT
    / NumericOnly
    / DEFAULT
    / LOCAL

ZoneValueOption1
    = ConstInterval _ "(" _ Iconst _ ")" _ Sconst

ZoneValueOption2
    = ConstInterval _ Sconst _ var1:OptInterval {
        return Node{
            Name: "ZoneValueOption2",
            Props: map[string]interface{}{
                "OptInterval1": var1,
            },
        }, nil
    }

OptEncoding
    = (Sconst
    / DEFAULT)?

NonReservedWordOrSconst
    = NonReservedWord
    / Sconst

VariableResetStmt
    = (RESET _ var1:ResetRest) {
        return Node{
            Name: "VariableResetStmt",
            Props: map[string]interface{}{
                "ResetRest1": var1,
            },
        }, nil
    }

ResetRest
    = (TRANSACTION _ ISOLATION _ LEVEL)
    / (TIME _ ZONE)
    / (SESSION _ AUTHORIZATION)
    / GenericReset

GenericReset
    = VarName
    / ALL

SetResetClause
    = SetResetClauseOption1
    / VariableResetStmt

SetResetClauseOption1
    = SET _ var1:SetRest {
        return Node{
            Name: "SetResetClauseOption1",
            Props: map[string]interface{}{
                "SetRest1": var1,
            },
        }, nil
    }

FunctionSetResetClause
    = FunctionSetResetClauseOption1
    / VariableResetStmt

FunctionSetResetClauseOption1
    = SET _ var1:SetRestMore {
        return Node{
            Name: "FunctionSetResetClauseOption1",
            Props: map[string]interface{}{
                "SetRestMore1": var1,
            },
        }, nil
    }

VariableShowStmt
    = VariableShowStmtOption1
    / VariableShowStmtOption2
    / VariableShowStmtOption3
    / VariableShowStmtOption4
    / VariableShowStmtOption5

VariableShowStmtOption1
    = SHOW _ TRANSACTION _ ISOLATION _ LEVEL

VariableShowStmtOption2
    = SHOW _ TIME _ ZONE

VariableShowStmtOption3
    = SHOW _ SESSION _ AUTHORIZATION

VariableShowStmtOption4
    = SHOW _ var1:VarName {
        return Node{
            Name: "VariableShowStmtOption4",
            Props: map[string]interface{}{
                "VarName1": var1,
            },
        }, nil
    }

VariableShowStmtOption5
    = SHOW _ ALL

ConstraintsSetStmt
    = (SET _ CONSTRAINTS _ var1:ConstraintsSetList _ var2:ConstraintsSetMode) {
        return Node{
            Name: "ConstraintsSetStmt",
            Props: map[string]interface{}{
                "ConstraintsSetList1": var1,
                "ConstraintsSetMode1": var2,
            },
        }, nil
    }

ConstraintsSetList
    = ALL
    / QualifiedNameList

ConstraintsSetMode
    = DEFERRED
    / IMMEDIATE

CheckPointStmt
    = CHECKPOINT

DiscardStmt
    = (DISCARD _ ALL)
    / (DISCARD _ TEMP)
    / (DISCARD _ TEMPORARY)
    / (DISCARD _ PLANS)
    / (DISCARD _ SEQUENCES)

AlterTableStmt
    = AlterTableStmtOption1
    / AlterTableStmtOption2
    / AlterTableStmtOption3
    / AlterTableStmtOption4
    / AlterTableStmtOption5
    / AlterTableStmtOption6
    / AlterTableStmtOption7
    / AlterTableStmtOption8
    / AlterTableStmtOption9
    / AlterTableStmtOption10
    / AlterTableStmtOption11
    / AlterTableStmtOption12
    / AlterTableStmtOption13
    / AlterTableStmtOption14
    / AlterTableStmtOption15
    / AlterTableStmtOption16
    / AlterTableStmtOption17
    / AlterTableStmtOption18
    / AlterTableStmtOption19

AlterTableStmtOption1
    = ALTER _ MATERIALIZED _ VIEW _ ALL _ IN _ TABLESPACE _ Name _ OWNED _ BY _ var1:RoleList _ SET _ TABLESPACE _ Name _ OptNowait {
        return Node{
            Name: "AlterTableStmtOption1",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

AlterTableStmtOption2
    = ALTER _ TABLE _ ALL _ IN _ TABLESPACE _ Name _ OWNED _ BY _ var1:RoleList _ SET _ TABLESPACE _ Name _ OptNowait {
        return Node{
            Name: "AlterTableStmtOption2",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

AlterTableStmtOption3
    = ALTER _ INDEX _ ALL _ IN _ TABLESPACE _ Name _ OWNED _ BY _ var1:RoleList _ SET _ TABLESPACE _ Name _ OptNowait {
        return Node{
            Name: "AlterTableStmtOption3",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

AlterTableStmtOption4
    = ALTER _ MATERIALIZED _ VIEW _ ALL _ IN _ TABLESPACE _ Name _ SET _ TABLESPACE _ Name _ OptNowait

AlterTableStmtOption5
    = ALTER _ TABLE _ ALL _ IN _ TABLESPACE _ Name _ SET _ TABLESPACE _ Name _ OptNowait

AlterTableStmtOption6
    = ALTER _ INDEX _ ALL _ IN _ TABLESPACE _ Name _ SET _ TABLESPACE _ Name _ OptNowait

AlterTableStmtOption7
    = ALTER _ MATERIALIZED _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption7",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption8
    = ALTER _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption8",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption9
    = ALTER _ INDEX _ IF _ EXISTS _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption9",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption10
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption10",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption11
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ var2:PartitionCmd {
        return Node{
            Name: "AlterTableStmtOption11",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "PartitionCmd1": var2,
            },
        }, nil
    }

AlterTableStmtOption12
    = ALTER _ SEQUENCE _ IF _ EXISTS _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption12",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption13
    = ALTER _ MATERIALIZED _ VIEW _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption13",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption14
    = ALTER _ INDEX _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption14",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption15
    = ALTER _ VIEW _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption15",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption16
    = ALTER _ SEQUENCE _ var1:QualifiedName _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption16",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableStmtOption17
    = ALTER _ TABLE _ var1:RelationExpr _ var2:PartitionCmd {
        return Node{
            Name: "AlterTableStmtOption17",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "PartitionCmd1": var2,
            },
        }, nil
    }

AlterTableStmtOption18
    = ALTER _ INDEX _ var1:QualifiedName _ var2:IndexPartitionCmd {
        return Node{
            Name: "AlterTableStmtOption18",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "IndexPartitionCmd1": var2,
            },
        }, nil
    }

AlterTableStmtOption19
    = ALTER _ TABLE _ var1:RelationExpr _ var2:AlterTableCmds {
        return Node{
            Name: "AlterTableStmtOption19",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterTableCmds
    = var1:AlterTableCmd (_ "," _ AlterTableCmd)* {
        return Node{
            Name: "AlterTableCmds",
            Props: map[string]interface{}{
                "AlterTableCmd1": var1,
            },
        }, nil
    }

PartitionCmd
    = PartitionCmdOption1
    / PartitionCmdOption2

PartitionCmdOption1
    = ATTACH _ PARTITION _ var1:QualifiedName _ var2:PartitionBoundSpec {
        return Node{
            Name: "PartitionCmdOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "PartitionBoundSpec1": var2,
            },
        }, nil
    }

PartitionCmdOption2
    = DETACH _ PARTITION _ var1:QualifiedName {
        return Node{
            Name: "PartitionCmdOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

IndexPartitionCmd
    = (ATTACH _ PARTITION _ var1:QualifiedName) {
        return Node{
            Name: "IndexPartitionCmd",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterTableCmd
    = AlterTableCmdOption1
    / AlterTableCmdOption2
    / AlterTableCmdOption3
    / AlterTableCmdOption4
    / AlterTableCmdOption5
    / AlterTableCmdOption6
    / AlterTableCmdOption7
    / AlterTableCmdOption8
    / AlterTableCmdOption9
    / AlterTableCmdOption10
    / AlterTableCmdOption11
    / AlterTableCmdOption12
    / AlterTableCmdOption13
    / AlterTableCmdOption14
    / AlterTableCmdOption15
    / AlterTableCmdOption16
    / AlterTableCmdOption17
    / AlterTableCmdOption18
    / AlterTableCmdOption19
    / AlterTableCmdOption20
    / AlterTableCmdOption21
    / AlterTableCmdOption22
    / AlterTableCmdOption23
    / AlterTableCmdOption24
    / AlterTableCmdOption25
    / AlterTableCmdOption26
    / AlterTableCmdOption27
    / AlterTableCmdOption28
    / AlterTableCmdOption29
    / AlterTableCmdOption30
    / AlterTableCmdOption31
    / AlterTableCmdOption32
    / AlterTableCmdOption33
    / AlterTableCmdOption34
    / AlterTableCmdOption35
    / AlterTableCmdOption36
    / AlterTableCmdOption37
    / AlterTableCmdOption38
    / AlterTableCmdOption39
    / AlterTableCmdOption40
    / AlterTableCmdOption41
    / AlterTableCmdOption42
    / AlterTableCmdOption43
    / AlterTableCmdOption44
    / AlterTableCmdOption45
    / AlterTableCmdOption46
    / AlterTableCmdOption47
    / AlterTableCmdOption48
    / AlterTableCmdOption49
    / AlterTableCmdOption50
    / AlterTableCmdOption51
    / AlterTableCmdOption52
    / AlterTableCmdOption53
    / AlterTableCmdOption54
    / AlterTableCmdOption55
    / AlterTableCmdOption56
    / AlterGenericOptions

AlterTableCmdOption1
    = ALTER _ OptColumn _ var1:ColId _ ADD _ GENERATED _ var2:GeneratedWhen _ AS _ IDENTITY _ var3:OptParenthesizedSeqOptList {
        return Node{
            Name: "AlterTableCmdOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "GeneratedWhen1": var2,
                "OptParenthesizedSeqOptList1": var3,
            },
        }, nil
    }

AlterTableCmdOption2
    = ALTER _ OptColumn _ var1:ColId _ var2:OptSetData _ TYPE _ var3:Typename _ var4:OptCollateClause _ var5:AlterUsing {
        return Node{
            Name: "AlterTableCmdOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptSetData1": var2,
                "Typename1": var3,
                "OptCollateClause1": var4,
                "AlterUsing1": var5,
            },
        }, nil
    }

AlterTableCmdOption3
    = ALTER _ OptColumn _ var1:ColId _ DROP _ IDENTITY _ IF _ EXISTS {
        return Node{
            Name: "AlterTableCmdOption3",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

AlterTableCmdOption4
    = ALTER _ OptColumn _ var1:ColId _ SET _ STATISTICS _ var2:SignedIconst {
        return Node{
            Name: "AlterTableCmdOption4",
            Props: map[string]interface{}{
                "ColId1": var1,
                "SignedIconst1": var2,
            },
        }, nil
    }

AlterTableCmdOption5
    = ADD _ COLUMN _ IF _ NOT _ EXISTS _ var1:ColumnDef {
        return Node{
            Name: "AlterTableCmdOption5",
            Props: map[string]interface{}{
                "ColumnDef1": var1,
            },
        }, nil
    }

AlterTableCmdOption6
    = ALTER _ OptColumn _ var1:ColId _ DROP _ NOT _ NULL {
        return Node{
            Name: "AlterTableCmdOption6",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

AlterTableCmdOption7
    = ALTER _ OptColumn _ var1:ColId _ SET _ NOT _ NULL {
        return Node{
            Name: "AlterTableCmdOption7",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

AlterTableCmdOption8
    = DROP _ CONSTRAINT _ IF _ EXISTS _ Name _ var1:OptDropBehavior {
        return Node{
            Name: "AlterTableCmdOption8",
            Props: map[string]interface{}{
                "OptDropBehavior1": var1,
            },
        }, nil
    }

AlterTableCmdOption9
    = ALTER _ OptColumn _ Iconst _ SET _ STATISTICS _ var1:SignedIconst {
        return Node{
            Name: "AlterTableCmdOption9",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

AlterTableCmdOption10
    = ALTER _ OptColumn _ var1:ColId _ SET _ STORAGE _ var2:ColId {
        return Node{
            Name: "AlterTableCmdOption10",
            Props: map[string]interface{}{
                "ColId1": var1,
                "ColId2": var2,
            },
        }, nil
    }

AlterTableCmdOption11
    = DROP _ OptColumn _ IF _ EXISTS _ var1:ColId _ var2:OptDropBehavior {
        return Node{
            Name: "AlterTableCmdOption11",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterTableCmdOption12
    = ALTER _ OptColumn _ var1:ColId _ SET _ var2:Reloptions {
        return Node{
            Name: "AlterTableCmdOption12",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Reloptions1": var2,
            },
        }, nil
    }

AlterTableCmdOption13
    = ALTER _ OptColumn _ var1:ColId _ RESET _ var2:Reloptions {
        return Node{
            Name: "AlterTableCmdOption13",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Reloptions1": var2,
            },
        }, nil
    }

AlterTableCmdOption14
    = ADD _ IF _ NOT _ EXISTS _ var1:ColumnDef {
        return Node{
            Name: "AlterTableCmdOption14",
            Props: map[string]interface{}{
                "ColumnDef1": var1,
            },
        }, nil
    }

AlterTableCmdOption15
    = NO _ FORCE _ ROW _ LEVEL _ SECURITY

AlterTableCmdOption16
    = ALTER _ OptColumn _ var1:ColId _ DROP _ IDENTITY {
        return Node{
            Name: "AlterTableCmdOption16",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

AlterTableCmdOption17
    = ALTER _ OptColumn _ var1:ColId _ var2:AlterIdentityColumnOptionList {
        return Node{
            Name: "AlterTableCmdOption17",
            Props: map[string]interface{}{
                "ColId1": var1,
                "AlterIdentityColumnOptionList1": var2,
            },
        }, nil
    }

AlterTableCmdOption18
    = DROP _ OptColumn _ var1:ColId _ var2:OptDropBehavior {
        return Node{
            Name: "AlterTableCmdOption18",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterTableCmdOption19
    = ENABLE _ ALWAYS _ RULE _ Name

AlterTableCmdOption20
    = ALTER _ OptColumn _ var1:ColId _ var2:AlterGenericOptions {
        return Node{
            Name: "AlterTableCmdOption20",
            Props: map[string]interface{}{
                "ColId1": var1,
                "AlterGenericOptions1": var2,
            },
        }, nil
    }

AlterTableCmdOption21
    = FORCE _ ROW _ LEVEL _ SECURITY

AlterTableCmdOption22
    = ALTER _ CONSTRAINT _ Name _ var1:ConstraintAttributeSpec {
        return Node{
            Name: "AlterTableCmdOption22",
            Props: map[string]interface{}{
                "ConstraintAttributeSpec1": var1,
            },
        }, nil
    }

AlterTableCmdOption23
    = ALTER _ OptColumn _ var1:ColId _ var2:AlterColumnDefault {
        return Node{
            Name: "AlterTableCmdOption23",
            Props: map[string]interface{}{
                "ColId1": var1,
                "AlterColumnDefault1": var2,
            },
        }, nil
    }

AlterTableCmdOption24
    = ENABLE _ REPLICA _ RULE _ Name

AlterTableCmdOption25
    = DROP _ CONSTRAINT _ Name _ var1:OptDropBehavior {
        return Node{
            Name: "AlterTableCmdOption25",
            Props: map[string]interface{}{
                "OptDropBehavior1": var1,
            },
        }, nil
    }

AlterTableCmdOption26
    = ENABLE _ REPLICA _ TRIGGER _ Name

AlterTableCmdOption27
    = ENABLE _ ALWAYS _ TRIGGER _ Name

AlterTableCmdOption28
    = ENABLE _ ROW _ LEVEL _ SECURITY

AlterTableCmdOption29
    = DISABLE _ ROW _ LEVEL _ SECURITY

AlterTableCmdOption30
    = VALIDATE _ CONSTRAINT _ Name

AlterTableCmdOption31
    = CLUSTER _ ON _ Name

AlterTableCmdOption32
    = ENABLE _ TRIGGER _ Name

AlterTableCmdOption33
    = SET _ WITHOUT _ OIDS

AlterTableCmdOption34
    = SET _ WITH _ OIDS

AlterTableCmdOption35
    = ENABLE _ TRIGGER _ ALL

AlterTableCmdOption36
    = ENABLE _ TRIGGER _ USER

AlterTableCmdOption37
    = DISABLE _ TRIGGER _ Name

AlterTableCmdOption38
    = DISABLE _ TRIGGER _ ALL

AlterTableCmdOption39
    = DISABLE _ TRIGGER _ USER

AlterTableCmdOption40
    = ENABLE _ RULE _ Name

AlterTableCmdOption41
    = SET _ TABLESPACE _ Name

AlterTableCmdOption42
    = ADD _ COLUMN _ var1:ColumnDef {
        return Node{
            Name: "AlterTableCmdOption42",
            Props: map[string]interface{}{
                "ColumnDef1": var1,
            },
        }, nil
    }

AlterTableCmdOption43
    = REPLICA _ IDENTITY _ var1:ReplicaIdentity {
        return Node{
            Name: "AlterTableCmdOption43",
            Props: map[string]interface{}{
                "ReplicaIdentity1": var1,
            },
        }, nil
    }

AlterTableCmdOption44
    = DISABLE _ RULE _ Name

AlterTableCmdOption45
    = NO _ INHERIT _ var1:QualifiedName {
        return Node{
            Name: "AlterTableCmdOption45",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterTableCmdOption46
    = SET _ WITHOUT _ CLUSTER

AlterTableCmdOption47
    = OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterTableCmdOption47",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterTableCmdOption48
    = NOT _ OF

AlterTableCmdOption49
    = OF _ var1:AnyName {
        return Node{
            Name: "AlterTableCmdOption49",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterTableCmdOption50
    = INHERIT _ var1:QualifiedName {
        return Node{
            Name: "AlterTableCmdOption50",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterTableCmdOption51
    = RESET _ var1:Reloptions {
        return Node{
            Name: "AlterTableCmdOption51",
            Props: map[string]interface{}{
                "Reloptions1": var1,
            },
        }, nil
    }

AlterTableCmdOption52
    = SET _ UNLOGGED

AlterTableCmdOption53
    = SET _ LOGGED

AlterTableCmdOption54
    = ADD _ var1:TableConstraint {
        return Node{
            Name: "AlterTableCmdOption54",
            Props: map[string]interface{}{
                "TableConstraint1": var1,
            },
        }, nil
    }

AlterTableCmdOption55
    = ADD _ var1:ColumnDef {
        return Node{
            Name: "AlterTableCmdOption55",
            Props: map[string]interface{}{
                "ColumnDef1": var1,
            },
        }, nil
    }

AlterTableCmdOption56
    = SET _ var1:Reloptions {
        return Node{
            Name: "AlterTableCmdOption56",
            Props: map[string]interface{}{
                "Reloptions1": var1,
            },
        }, nil
    }

AlterColumnDefault
    = AlterColumnDefaultOption1
    / AlterColumnDefaultOption2

AlterColumnDefaultOption1
    = SET _ DEFAULT _ var1:AExpr {
        return Node{
            Name: "AlterColumnDefaultOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

AlterColumnDefaultOption2
    = DROP _ DEFAULT

OptDropBehavior
    = (CASCADE
    / RESTRICT)?

OptCollateClause
    = (COLLATE _ AnyName)?

AlterUsing
    = (USING _ AExpr)?

ReplicaIdentity
    = (USING _ INDEX _ Name)
    / NOTHING
    / FULL
    / DEFAULT

Reloptions
    = ("(" _ var1:ReloptionList _ ")") {
        return Node{
            Name: "Reloptions",
            Props: map[string]interface{}{
                "ReloptionList1": var1,
            },
        }, nil
    }

OptReloptions
    = (WITH _ Reloptions)?

ReloptionList
    = var1:ReloptionElem (_ "," _ ReloptionElem)* {
        return Node{
            Name: "ReloptionList",
            Props: map[string]interface{}{
                "ReloptionElem1": var1,
            },
        }, nil
    }

ReloptionElem
    = ReloptionElemOption1
    / ReloptionElemOption2
    / ReloptionElemOption3
    / ColLabel

ReloptionElemOption1
    = var1:ColLabel _ "." _ var2:ColLabel _ "=" _ var3:DefArg {
        return Node{
            Name: "ReloptionElemOption1",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "ColLabel2": var2,
                "DefArg1": var3,
            },
        }, nil
    }

ReloptionElemOption2
    = var1:ColLabel _ "=" _ var2:DefArg {
        return Node{
            Name: "ReloptionElemOption2",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "DefArg1": var2,
            },
        }, nil
    }

ReloptionElemOption3
    = var1:ColLabel _ "." _ var2:ColLabel {
        return Node{
            Name: "ReloptionElemOption3",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "ColLabel2": var2,
            },
        }, nil
    }

AlterIdentityColumnOptionList
    = var1:AlterIdentityColumnOption (_ AlterIdentityColumnOption)* {
        return Node{
            Name: "AlterIdentityColumnOptionList",
            Props: map[string]interface{}{
                "AlterIdentityColumnOption1": var1,
            },
        }, nil
    }

AlterIdentityColumnOption
    = AlterIdentityColumnOptionOption1
    / AlterIdentityColumnOptionOption2
    / AlterIdentityColumnOptionOption3
    / RESTART

AlterIdentityColumnOptionOption1
    = RESTART _ var1:OptWith _ var2:NumericOnly {
        return Node{
            Name: "AlterIdentityColumnOptionOption1",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "NumericOnly1": var2,
            },
        }, nil
    }

AlterIdentityColumnOptionOption2
    = SET _ GENERATED _ var1:GeneratedWhen {
        return Node{
            Name: "AlterIdentityColumnOptionOption2",
            Props: map[string]interface{}{
                "GeneratedWhen1": var1,
            },
        }, nil
    }

AlterIdentityColumnOptionOption3
    = SET _ var1:SeqOptElem {
        return Node{
            Name: "AlterIdentityColumnOptionOption3",
            Props: map[string]interface{}{
                "SeqOptElem1": var1,
            },
        }, nil
    }

PartitionBoundSpec
    = PartitionBoundSpecOption1
    / PartitionBoundSpecOption2
    / PartitionBoundSpecOption3
    / DEFAULT

PartitionBoundSpecOption1
    = FOR _ VALUES _ FROM _ "(" _ var1:RangeDatumList _ ")" _ TO _ "(" _ var2:RangeDatumList _ ")" {
        return Node{
            Name: "PartitionBoundSpecOption1",
            Props: map[string]interface{}{
                "RangeDatumList1": var1,
                "RangeDatumList2": var2,
            },
        }, nil
    }

PartitionBoundSpecOption2
    = FOR _ VALUES _ WITH _ "(" _ var1:HashPartbound _ ")" {
        return Node{
            Name: "PartitionBoundSpecOption2",
            Props: map[string]interface{}{
                "HashPartbound1": var1,
            },
        }, nil
    }

PartitionBoundSpecOption3
    = FOR _ VALUES _ IN _ "(" _ var1:PartboundDatumList _ ")" {
        return Node{
            Name: "PartitionBoundSpecOption3",
            Props: map[string]interface{}{
                "PartboundDatumList1": var1,
            },
        }, nil
    }

HashPartboundElem
    = (var1:NonReservedWord _ Iconst) {
        return Node{
            Name: "HashPartboundElem",
            Props: map[string]interface{}{
                "NonReservedWord1": var1,
            },
        }, nil
    }

HashPartbound
    = var1:HashPartboundElem (_ "," _ HashPartboundElem)* {
        return Node{
            Name: "HashPartbound",
            Props: map[string]interface{}{
                "HashPartboundElem1": var1,
            },
        }, nil
    }

PartboundDatum
    = Sconst
    / NumericOnly
    / TRUE
    / FALSE
    / NULL

PartboundDatumList
    = var1:PartboundDatum (_ "," _ PartboundDatum)* {
        return Node{
            Name: "PartboundDatumList",
            Props: map[string]interface{}{
                "PartboundDatum1": var1,
            },
        }, nil
    }

RangeDatumList
    = var1:PartitionRangeDatum (_ "," _ PartitionRangeDatum)* {
        return Node{
            Name: "RangeDatumList",
            Props: map[string]interface{}{
                "PartitionRangeDatum1": var1,
            },
        }, nil
    }

PartitionRangeDatum
    = MINVALUE
    / MAXVALUE
    / PartboundDatum

AlterCompositeTypeStmt
    = (ALTER _ TYPE _ var1:AnyName _ var2:AlterTypeCmds) {
        return Node{
            Name: "AlterCompositeTypeStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AlterTypeCmds1": var2,
            },
        }, nil
    }

AlterTypeCmds
    = var1:AlterTypeCmd (_ "," _ AlterTypeCmd)* {
        return Node{
            Name: "AlterTypeCmds",
            Props: map[string]interface{}{
                "AlterTypeCmd1": var1,
            },
        }, nil
    }

AlterTypeCmd
    = AlterTypeCmdOption1
    / AlterTypeCmdOption2
    / AlterTypeCmdOption3
    / AlterTypeCmdOption4

AlterTypeCmdOption1
    = ALTER _ ATTRIBUTE _ var1:ColId _ var2:OptSetData _ TYPE _ var3:Typename _ var4:OptCollateClause _ var5:OptDropBehavior {
        return Node{
            Name: "AlterTypeCmdOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptSetData1": var2,
                "Typename1": var3,
                "OptCollateClause1": var4,
                "OptDropBehavior1": var5,
            },
        }, nil
    }

AlterTypeCmdOption2
    = DROP _ ATTRIBUTE _ IF _ EXISTS _ var1:ColId _ var2:OptDropBehavior {
        return Node{
            Name: "AlterTypeCmdOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterTypeCmdOption3
    = ADD _ ATTRIBUTE _ var1:TableFuncElement _ var2:OptDropBehavior {
        return Node{
            Name: "AlterTypeCmdOption3",
            Props: map[string]interface{}{
                "TableFuncElement1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterTypeCmdOption4
    = DROP _ ATTRIBUTE _ var1:ColId _ var2:OptDropBehavior {
        return Node{
            Name: "AlterTypeCmdOption4",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

ClosePortalStmt
    = (CLOSE _ CursorName)
    / (CLOSE _ ALL)

CopyStmt
    = CopyStmtOption1
    / CopyStmtOption2

CopyStmtOption1
    = COPY _ OptBinary _ var1:QualifiedName _ var2:OptColumnList _ var3:OptOids _ var4:CopyFrom _ OptProgram _ var5:CopyFileName _ var6:CopyDelimiter _ var7:OptWith _ var8:CopyOptions {
        return Node{
            Name: "CopyStmtOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptColumnList1": var2,
                "OptOids1": var3,
                "CopyFrom1": var4,
                "CopyFileName1": var5,
                "CopyDelimiter1": var6,
                "OptWith1": var7,
                "CopyOptions1": var8,
            },
        }, nil
    }

CopyStmtOption2
    = COPY _ "(" _ var1:PreparableStmt _ ")" _ TO _ OptProgram _ var2:CopyFileName _ var3:OptWith _ var4:CopyOptions {
        return Node{
            Name: "CopyStmtOption2",
            Props: map[string]interface{}{
                "PreparableStmt1": var1,
                "CopyFileName1": var2,
                "OptWith1": var3,
                "CopyOptions1": var4,
            },
        }, nil
    }

CopyFrom
    = FROM
    / TO

OptProgram
    = PROGRAM?

CopyFileName
    = Sconst
    / STDIN
    / STDOUT

CopyOptions
    = CopyOptionsOption1
    / CopyOptList

CopyOptionsOption1
    = "(" _ var1:CopyGenericOptList _ ")" {
        return Node{
            Name: "CopyOptionsOption1",
            Props: map[string]interface{}{
                "CopyGenericOptList1": var1,
            },
        }, nil
    }

CopyOptList
    = (_ CopyOptItem)*

CopyOptItem
    = CopyOptItemOption1
    / CopyOptItemOption2
    / CopyOptItemOption3
    / CopyOptItemOption4
    / CopyOptItemOption5
    / CopyOptItemOption6
    / CopyOptItemOption7
    / CopyOptItemOption8
    / CopyOptItemOption9
    / HEADER
    / CSV
    / FREEZE
    / OIDS
    / BINARY

CopyOptItemOption1
    = FORCE _ NOT _ NULL _ var1:ColumnList {
        return Node{
            Name: "CopyOptItemOption1",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

CopyOptItemOption2
    = ESCAPE _ OptAs _ Sconst

CopyOptItemOption3
    = FORCE _ NULL _ var1:ColumnList {
        return Node{
            Name: "CopyOptItemOption3",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

CopyOptItemOption4
    = DELIMITER _ OptAs _ Sconst

CopyOptItemOption5
    = NULL _ OptAs _ Sconst

CopyOptItemOption6
    = FORCE _ QUOTE _ "*"

CopyOptItemOption7
    = FORCE _ QUOTE _ var1:ColumnList {
        return Node{
            Name: "CopyOptItemOption7",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

CopyOptItemOption8
    = QUOTE _ OptAs _ Sconst

CopyOptItemOption9
    = ENCODING _ Sconst

OptBinary
    = BINARY?

OptOids
    = (WITH _ OIDS)?

CopyDelimiter
    = (OptUsing _ DELIMITERS _ Sconst)?

OptUsing
    = USING?

CopyGenericOptList
    = var1:CopyGenericOptElem (_ "," _ CopyGenericOptElem)* {
        return Node{
            Name: "CopyGenericOptList",
            Props: map[string]interface{}{
                "CopyGenericOptElem1": var1,
            },
        }, nil
    }

CopyGenericOptElem
    = (var1:ColLabel _ var2:CopyGenericOptArg) {
        return Node{
            Name: "CopyGenericOptElem",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "CopyGenericOptArg1": var2,
            },
        }, nil
    }

CopyGenericOptArg
    = (CopyGenericOptArgOption1
    / OptBooleanOrString
    / NumericOnly
    / "*")?

CopyGenericOptArgOption1
    = "(" _ var1:CopyGenericOptArgList _ ")" {
        return Node{
            Name: "CopyGenericOptArgOption1",
            Props: map[string]interface{}{
                "CopyGenericOptArgList1": var1,
            },
        }, nil
    }

CopyGenericOptArgList
    = CopyGenericOptArgListItem (_ "," _ CopyGenericOptArgListItem)*

CopyGenericOptArgListItem
    = OptBooleanOrString

CreateStmt
    = CreateStmtOption1
    / CreateStmtOption2
    / CreateStmtOption3
    / CreateStmtOption4
    / CreateStmtOption5
    / CreateStmtOption6

CreateStmtOption1
    = CREATE _ var1:OptTemp _ TABLE _ IF _ NOT _ EXISTS _ var2:QualifiedName _ PARTITION _ OF _ var3:QualifiedName _ var4:OptTypedTableElementList _ var5:PartitionBoundSpec _ OptPartitionSpec _ var6:OptWith1 _ var7:OnCommitOption _ var8:OptTableSpace {
        return Node{
            Name: "CreateStmtOption1",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "QualifiedName2": var3,
                "OptTypedTableElementList1": var4,
                "PartitionBoundSpec1": var5,
                "OptWith11": var6,
                "OnCommitOption1": var7,
                "OptTableSpace1": var8,
            },
        }, nil
    }

CreateStmtOption2
    = CREATE _ var1:OptTemp _ TABLE _ IF _ NOT _ EXISTS _ var2:QualifiedName _ "(" _ OptTableElementList _ ")" _ var3:OptInherit _ OptPartitionSpec _ var4:OptWith1 _ var5:OnCommitOption _ var6:OptTableSpace {
        return Node{
            Name: "CreateStmtOption2",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "OptInherit1": var3,
                "OptWith11": var4,
                "OnCommitOption1": var5,
                "OptTableSpace1": var6,
            },
        }, nil
    }

CreateStmtOption3
    = CREATE _ var1:OptTemp _ TABLE _ IF _ NOT _ EXISTS _ var2:QualifiedName _ OF _ var3:AnyName _ var4:OptTypedTableElementList _ OptPartitionSpec _ var5:OptWith1 _ var6:OnCommitOption _ var7:OptTableSpace {
        return Node{
            Name: "CreateStmtOption3",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "AnyName1": var3,
                "OptTypedTableElementList1": var4,
                "OptWith11": var5,
                "OnCommitOption1": var6,
                "OptTableSpace1": var7,
            },
        }, nil
    }

CreateStmtOption4
    = CREATE _ var1:OptTemp _ TABLE _ var2:QualifiedName _ PARTITION _ OF _ var3:QualifiedName _ var4:OptTypedTableElementList _ var5:PartitionBoundSpec _ OptPartitionSpec _ var6:OptWith1 _ var7:OnCommitOption _ var8:OptTableSpace {
        return Node{
            Name: "CreateStmtOption4",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "QualifiedName2": var3,
                "OptTypedTableElementList1": var4,
                "PartitionBoundSpec1": var5,
                "OptWith11": var6,
                "OnCommitOption1": var7,
                "OptTableSpace1": var8,
            },
        }, nil
    }

CreateStmtOption5
    = CREATE _ var1:OptTemp _ TABLE _ var2:QualifiedName _ "(" _ OptTableElementList _ ")" _ var3:OptInherit _ OptPartitionSpec _ var4:OptWith1 _ var5:OnCommitOption _ var6:OptTableSpace {
        return Node{
            Name: "CreateStmtOption5",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "OptInherit1": var3,
                "OptWith11": var4,
                "OnCommitOption1": var5,
                "OptTableSpace1": var6,
            },
        }, nil
    }

CreateStmtOption6
    = CREATE _ var1:OptTemp _ TABLE _ var2:QualifiedName _ OF _ var3:AnyName _ var4:OptTypedTableElementList _ OptPartitionSpec _ var5:OptWith1 _ var6:OnCommitOption _ var7:OptTableSpace {
        return Node{
            Name: "CreateStmtOption6",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "AnyName1": var3,
                "OptTypedTableElementList1": var4,
                "OptWith11": var5,
                "OnCommitOption1": var6,
                "OptTableSpace1": var7,
            },
        }, nil
    }

OptTemp
    = ((LOCAL _ TEMPORARY)
    / (LOCAL _ TEMP)
    / (GLOBAL _ TEMPORARY)
    / (GLOBAL _ TEMP)
    / TEMPORARY
    / TEMP
    / UNLOGGED)?

OptTableElementList
    = TableElementList?

OptTypedTableElementList
    = ("(" _ TypedTableElementList _ ")")?

TableElementList
    = var1:TableElement (_ "," _ TableElement)* {
        return Node{
            Name: "TableElementList",
            Props: map[string]interface{}{
                "TableElement1": var1,
            },
        }, nil
    }

TypedTableElementList
    = var1:TypedTableElement (_ "," _ TypedTableElement)* {
        return Node{
            Name: "TypedTableElementList",
            Props: map[string]interface{}{
                "TypedTableElement1": var1,
            },
        }, nil
    }

TableElement
    = ColumnDef
    / TableLikeClause
    / TableConstraint

TypedTableElement
    = ColumnOptions
    / TableConstraint

ColumnDef
    = (var1:ColId _ var2:Typename _ var3:CreateGenericOptions _ var4:ColQualList) {
        return Node{
            Name: "ColumnDef",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Typename1": var2,
                "CreateGenericOptions1": var3,
                "ColQualList1": var4,
            },
        }, nil
    }

ColumnOptions
    = ColumnOptionsOption1
    / ColumnOptionsOption2

ColumnOptionsOption1
    = var1:ColId _ WITH _ OPTIONS _ var2:ColQualList {
        return Node{
            Name: "ColumnOptionsOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "ColQualList1": var2,
            },
        }, nil
    }

ColumnOptionsOption2
    = var1:ColId _ var2:ColQualList {
        return Node{
            Name: "ColumnOptionsOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "ColQualList1": var2,
            },
        }, nil
    }

ColQualList
    = (_ ColConstraint)*

ColConstraint
    = ColConstraintOption1
    / ColConstraintOption2
    / ColConstraintElem
    / ConstraintAttr

ColConstraintOption1
    = CONSTRAINT _ Name _ var1:ColConstraintElem {
        return Node{
            Name: "ColConstraintOption1",
            Props: map[string]interface{}{
                "ColConstraintElem1": var1,
            },
        }, nil
    }

ColConstraintOption2
    = COLLATE _ var1:AnyName {
        return Node{
            Name: "ColConstraintOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

ColConstraintElem
    = ColConstraintElemOption1
    / ColConstraintElemOption2
    / ColConstraintElemOption3
    / ColConstraintElemOption4
    / ColConstraintElemOption5
    / ColConstraintElemOption6
    / ColConstraintElemOption7
    / NULL

ColConstraintElemOption1
    = GENERATED _ var1:GeneratedWhen _ AS _ IDENTITY _ var2:OptParenthesizedSeqOptList {
        return Node{
            Name: "ColConstraintElemOption1",
            Props: map[string]interface{}{
                "GeneratedWhen1": var1,
                "OptParenthesizedSeqOptList1": var2,
            },
        }, nil
    }

ColConstraintElemOption2
    = REFERENCES _ var1:QualifiedName _ var2:OptColumnList _ var3:KeyMatch _ var4:KeyActions {
        return Node{
            Name: "ColConstraintElemOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptColumnList1": var2,
                "KeyMatch1": var3,
                "KeyActions1": var4,
            },
        }, nil
    }

ColConstraintElemOption3
    = CHECK _ "(" _ var1:AExpr _ ")" _ var2:OptNoInherit {
        return Node{
            Name: "ColConstraintElemOption3",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OptNoInherit1": var2,
            },
        }, nil
    }

ColConstraintElemOption4
    = PRIMARY _ KEY _ var1:OptDefinition _ var2:OptConsTableSpace {
        return Node{
            Name: "ColConstraintElemOption4",
            Props: map[string]interface{}{
                "OptDefinition1": var1,
                "OptConsTableSpace1": var2,
            },
        }, nil
    }

ColConstraintElemOption5
    = UNIQUE _ var1:OptDefinition _ var2:OptConsTableSpace {
        return Node{
            Name: "ColConstraintElemOption5",
            Props: map[string]interface{}{
                "OptDefinition1": var1,
                "OptConsTableSpace1": var2,
            },
        }, nil
    }

ColConstraintElemOption6
    = DEFAULT _ var1:BExpr {
        return Node{
            Name: "ColConstraintElemOption6",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

ColConstraintElemOption7
    = NOT _ NULL

GeneratedWhen
    = (BY _ DEFAULT)
    / ALWAYS

ConstraintAttr
    = (NOT _ DEFERRABLE)
    / (INITIALLY _ DEFERRED)
    / (INITIALLY _ IMMEDIATE)
    / DEFERRABLE

TableLikeClause
    = (LIKE _ var1:QualifiedName _ var2:TableLikeOptionList) {
        return Node{
            Name: "TableLikeClause",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "TableLikeOptionList1": var2,
            },
        }, nil
    }

TableLikeOptionList
    = (TableLikeOptionListOption1
    / TableLikeOptionListOption2)*

TableLikeOptionListOption1
    = _ INCLUDING _ var1:TableLikeOption {
        return Node{
            Name: "TableLikeOptionListOption1",
            Props: map[string]interface{}{
                "TableLikeOption1": var1,
            },
        }, nil
    }

TableLikeOptionListOption2
    = _ EXCLUDING _ var1:TableLikeOption {
        return Node{
            Name: "TableLikeOptionListOption2",
            Props: map[string]interface{}{
                "TableLikeOption1": var1,
            },
        }, nil
    }

TableLikeOption
    = COMMENTS
    / CONSTRAINTS
    / DEFAULTS
    / IDENTITY
    / INDEXES
    / STATISTICS
    / STORAGE
    / ALL

TableConstraint
    = TableConstraintOption1
    / ConstraintElem

TableConstraintOption1
    = CONSTRAINT _ Name _ var1:ConstraintElem {
        return Node{
            Name: "TableConstraintOption1",
            Props: map[string]interface{}{
                "ConstraintElem1": var1,
            },
        }, nil
    }

ConstraintElem
    = ConstraintElemOption1
    / ConstraintElemOption2
    / ConstraintElemOption3
    / ConstraintElemOption4
    / ConstraintElemOption5
    / ConstraintElemOption6
    / ConstraintElemOption7

ConstraintElemOption1
    = FOREIGN _ KEY _ "(" _ var1:ColumnList _ ")" _ REFERENCES _ var2:QualifiedName _ var3:OptColumnList _ var4:KeyMatch _ var5:KeyActions _ var6:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption1",
            Props: map[string]interface{}{
                "ColumnList1": var1,
                "QualifiedName1": var2,
                "OptColumnList1": var3,
                "KeyMatch1": var4,
                "KeyActions1": var5,
                "ConstraintAttributeSpec1": var6,
            },
        }, nil
    }

ConstraintElemOption2
    = EXCLUDE _ var1:AccessMethodClause _ "(" _ var2:ExclusionConstraintList _ ")" _ var3:OptCInclude _ var4:OptDefinition _ var5:OptConsTableSpace _ var6:ExclusionWhereClause _ var7:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption2",
            Props: map[string]interface{}{
                "AccessMethodClause1": var1,
                "ExclusionConstraintList1": var2,
                "OptCInclude1": var3,
                "OptDefinition1": var4,
                "OptConsTableSpace1": var5,
                "ExclusionWhereClause1": var6,
                "ConstraintAttributeSpec1": var7,
            },
        }, nil
    }

ConstraintElemOption3
    = PRIMARY _ KEY _ "(" _ var1:ColumnList _ ")" _ var2:OptCInclude _ var3:OptDefinition _ var4:OptConsTableSpace _ var5:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption3",
            Props: map[string]interface{}{
                "ColumnList1": var1,
                "OptCInclude1": var2,
                "OptDefinition1": var3,
                "OptConsTableSpace1": var4,
                "ConstraintAttributeSpec1": var5,
            },
        }, nil
    }

ConstraintElemOption4
    = UNIQUE _ "(" _ var1:ColumnList _ ")" _ var2:OptCInclude _ var3:OptDefinition _ var4:OptConsTableSpace _ var5:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption4",
            Props: map[string]interface{}{
                "ColumnList1": var1,
                "OptCInclude1": var2,
                "OptDefinition1": var3,
                "OptConsTableSpace1": var4,
                "ConstraintAttributeSpec1": var5,
            },
        }, nil
    }

ConstraintElemOption5
    = CHECK _ "(" _ var1:AExpr _ ")" _ var2:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption5",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "ConstraintAttributeSpec1": var2,
            },
        }, nil
    }

ConstraintElemOption6
    = PRIMARY _ KEY _ var1:ExistingIndex _ var2:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption6",
            Props: map[string]interface{}{
                "ExistingIndex1": var1,
                "ConstraintAttributeSpec1": var2,
            },
        }, nil
    }

ConstraintElemOption7
    = UNIQUE _ var1:ExistingIndex _ var2:ConstraintAttributeSpec {
        return Node{
            Name: "ConstraintElemOption7",
            Props: map[string]interface{}{
                "ExistingIndex1": var1,
                "ConstraintAttributeSpec1": var2,
            },
        }, nil
    }

OptNoInherit
    = (NO _ INHERIT)?

OptColumnList
    = ("(" _ ColumnList _ ")")?

ColumnList
    = ColumnElem (_ "," _ ColumnElem)*

ColumnElem
    = ColId

OptCInclude
    = (INCLUDE _ "(" _ ColumnList _ ")")?

KeyMatch
    = ((MATCH _ FULL)
    / (MATCH _ PARTIAL)
    / (MATCH _ SIMPLE))?

ExclusionConstraintList
    = var1:ExclusionConstraintElem (_ "," _ ExclusionConstraintElem)* {
        return Node{
            Name: "ExclusionConstraintList",
            Props: map[string]interface{}{
                "ExclusionConstraintElem1": var1,
            },
        }, nil
    }

ExclusionConstraintElem
    = ExclusionConstraintElemOption1
    / ExclusionConstraintElemOption2

ExclusionConstraintElemOption1
    = var1:IndexElem _ WITH _ OPERATOR _ "(" _ var2:AnyOperator _ ")" {
        return Node{
            Name: "ExclusionConstraintElemOption1",
            Props: map[string]interface{}{
                "IndexElem1": var1,
                "AnyOperator1": var2,
            },
        }, nil
    }

ExclusionConstraintElemOption2
    = var1:IndexElem _ WITH _ var2:AnyOperator {
        return Node{
            Name: "ExclusionConstraintElemOption2",
            Props: map[string]interface{}{
                "IndexElem1": var1,
                "AnyOperator1": var2,
            },
        }, nil
    }

ExclusionWhereClause
    = (WHERE _ "(" _ AExpr _ ")")?

KeyActions
    = (KeyActionsOption1
    / KeyActionsOption2
    / KeyUpdate
    / KeyDelete)?

KeyActionsOption1
    = var1:KeyUpdate _ var2:KeyDelete {
        return Node{
            Name: "KeyActionsOption1",
            Props: map[string]interface{}{
                "KeyUpdate1": var1,
                "KeyDelete1": var2,
            },
        }, nil
    }

KeyActionsOption2
    = var1:KeyDelete _ var2:KeyUpdate {
        return Node{
            Name: "KeyActionsOption2",
            Props: map[string]interface{}{
                "KeyDelete1": var1,
                "KeyUpdate1": var2,
            },
        }, nil
    }

KeyUpdate
    = (ON _ UPDATE _ var1:KeyAction) {
        return Node{
            Name: "KeyUpdate",
            Props: map[string]interface{}{
                "KeyAction1": var1,
            },
        }, nil
    }

KeyDelete
    = (ON _ DELETE _ var1:KeyAction) {
        return Node{
            Name: "KeyDelete",
            Props: map[string]interface{}{
                "KeyAction1": var1,
            },
        }, nil
    }

KeyAction
    = (NO _ ACTION)
    / (SET _ NULL)
    / (SET _ DEFAULT)
    / RESTRICT
    / CASCADE

OptInherit
    = (INHERITS _ "(" _ QualifiedNameList _ ")")?

OptPartitionSpec
    = PartitionSpec?

PartitionSpec
    = (PARTITION _ BY _ var1:PartStrategy _ "(" _ var2:PartParams _ ")") {
        return Node{
            Name: "PartitionSpec",
            Props: map[string]interface{}{
                "PartStrategy1": var1,
                "PartParams1": var2,
            },
        }, nil
    }

PartStrategy
    = IDENT
    / UnreservedKeyword

PartParams
    = var1:PartElem (_ "," _ PartElem)* {
        return Node{
            Name: "PartParams",
            Props: map[string]interface{}{
                "PartElem1": var1,
            },
        }, nil
    }

PartElem
    = PartElemOption1
    / PartElemOption2
    / PartElemOption3

PartElemOption1
    = "(" _ var1:AExpr _ ")" _ var2:OptCollate _ OptClass {
        return Node{
            Name: "PartElemOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OptCollate1": var2,
            },
        }, nil
    }

PartElemOption2
    = var1:ColId _ var2:OptCollate _ OptClass {
        return Node{
            Name: "PartElemOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptCollate1": var2,
            },
        }, nil
    }

PartElemOption3
    = var1:FuncExprWindowless _ var2:OptCollate _ OptClass {
        return Node{
            Name: "PartElemOption3",
            Props: map[string]interface{}{
                "FuncExprWindowless1": var1,
                "OptCollate1": var2,
            },
        }, nil
    }

OptWith1
    = (OptWithOption1
    / OptWithOption2
    / OptWithOption3)?

OptWithOption1
    = WITH _ var1:Reloptions {
        return Node{
            Name: "OptWithOption1",
            Props: map[string]interface{}{
                "Reloptions1": var1,
            },
        }, nil
    }

OptWithOption2
    = WITH _ OIDS

OptWithOption3
    = WITHOUT _ OIDS

OnCommitOption
    = ((ON _ COMMIT _ DELETE _ ROWS)
    / (ON _ COMMIT _ PRESERVE _ ROWS)
    / (ON _ COMMIT _ DROP))?

OptTableSpace
    = (TABLESPACE _ Name)?

OptConsTableSpace
    = (USING _ INDEX _ TABLESPACE _ Name)?

ExistingIndex
    = (USING _ INDEX _ IndexName)

CreateStatsStmt
    = CreateStatsStmtOption1
    / CreateStatsStmtOption2

CreateStatsStmtOption1
    = CREATE _ STATISTICS _ IF _ NOT _ EXISTS _ var1:AnyName _ var2:OptNameList _ ON _ var3:ExprList _ FROM _ var4:FromList {
        return Node{
            Name: "CreateStatsStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptNameList1": var2,
                "ExprList1": var3,
                "FromList1": var4,
            },
        }, nil
    }

CreateStatsStmtOption2
    = CREATE _ STATISTICS _ var1:AnyName _ var2:OptNameList _ ON _ var3:ExprList _ FROM _ var4:FromList {
        return Node{
            Name: "CreateStatsStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptNameList1": var2,
                "ExprList1": var3,
                "FromList1": var4,
            },
        }, nil
    }

CreateAsStmt
    = CreateAsStmtOption1
    / CreateAsStmtOption2

CreateAsStmtOption1
    = CREATE _ var1:OptTemp _ TABLE _ IF _ NOT _ EXISTS _ var2:CreateAsTarget _ AS _ var3:SelectStmt _ var4:OptWithData {
        return Node{
            Name: "CreateAsStmtOption1",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "CreateAsTarget1": var2,
                "SelectStmt1": var3,
                "OptWithData1": var4,
            },
        }, nil
    }

CreateAsStmtOption2
    = CREATE _ var1:OptTemp _ TABLE _ var2:CreateAsTarget _ AS _ var3:SelectStmt _ var4:OptWithData {
        return Node{
            Name: "CreateAsStmtOption2",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "CreateAsTarget1": var2,
                "SelectStmt1": var3,
                "OptWithData1": var4,
            },
        }, nil
    }

CreateAsTarget
    = (var1:QualifiedName _ var2:OptColumnList _ var3:OptWith1 _ var4:OnCommitOption _ var5:OptTableSpace) {
        return Node{
            Name: "CreateAsTarget",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptColumnList1": var2,
                "OptWith11": var3,
                "OnCommitOption1": var4,
                "OptTableSpace1": var5,
            },
        }, nil
    }

OptWithData
    = ((WITH _ NO _ DATA)
    / (WITH _ DATA))?

CreateMatViewStmt
    = CreateMatViewStmtOption1
    / CreateMatViewStmtOption2

CreateMatViewStmtOption1
    = CREATE _ OptNoLog _ MATERIALIZED _ VIEW _ IF _ NOT _ EXISTS _ var1:CreateMvTarget _ AS _ var2:SelectStmt _ var3:OptWithData {
        return Node{
            Name: "CreateMatViewStmtOption1",
            Props: map[string]interface{}{
                "CreateMvTarget1": var1,
                "SelectStmt1": var2,
                "OptWithData1": var3,
            },
        }, nil
    }

CreateMatViewStmtOption2
    = CREATE _ OptNoLog _ MATERIALIZED _ VIEW _ var1:CreateMvTarget _ AS _ var2:SelectStmt _ var3:OptWithData {
        return Node{
            Name: "CreateMatViewStmtOption2",
            Props: map[string]interface{}{
                "CreateMvTarget1": var1,
                "SelectStmt1": var2,
                "OptWithData1": var3,
            },
        }, nil
    }

CreateMvTarget
    = (var1:QualifiedName _ var2:OptColumnList _ var3:OptReloptions _ var4:OptTableSpace) {
        return Node{
            Name: "CreateMvTarget",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptColumnList1": var2,
                "OptReloptions1": var3,
                "OptTableSpace1": var4,
            },
        }, nil
    }

OptNoLog
    = UNLOGGED?

RefreshMatViewStmt
    = (REFRESH _ MATERIALIZED _ VIEW _ OptConcurrently _ var1:QualifiedName _ var2:OptWithData) {
        return Node{
            Name: "RefreshMatViewStmt",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptWithData1": var2,
            },
        }, nil
    }

CreateSeqStmt
    = CreateSeqStmtOption1
    / CreateSeqStmtOption2

CreateSeqStmtOption1
    = CREATE _ var1:OptTemp _ SEQUENCE _ IF _ NOT _ EXISTS _ var2:QualifiedName _ OptSeqOptList {
        return Node{
            Name: "CreateSeqStmtOption1",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
            },
        }, nil
    }

CreateSeqStmtOption2
    = CREATE _ var1:OptTemp _ SEQUENCE _ var2:QualifiedName _ OptSeqOptList {
        return Node{
            Name: "CreateSeqStmtOption2",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
            },
        }, nil
    }

AlterSeqStmt
    = AlterSeqStmtOption1
    / AlterSeqStmtOption2

AlterSeqStmtOption1
    = ALTER _ SEQUENCE _ IF _ EXISTS _ var1:QualifiedName _ var2:SeqOptList {
        return Node{
            Name: "AlterSeqStmtOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "SeqOptList1": var2,
            },
        }, nil
    }

AlterSeqStmtOption2
    = ALTER _ SEQUENCE _ var1:QualifiedName _ var2:SeqOptList {
        return Node{
            Name: "AlterSeqStmtOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "SeqOptList1": var2,
            },
        }, nil
    }

OptSeqOptList
    = SeqOptList?

OptParenthesizedSeqOptList
    = ("(" _ SeqOptList _ ")")?

SeqOptList
    = var1:SeqOptElem (_ SeqOptElem)* {
        return Node{
            Name: "SeqOptList",
            Props: map[string]interface{}{
                "SeqOptElem1": var1,
            },
        }, nil
    }

SeqOptElem
    = SeqOptElemOption1
    / SeqOptElemOption2
    / SeqOptElemOption3
    / SeqOptElemOption4
    / SeqOptElemOption5
    / SeqOptElemOption6
    / SeqOptElemOption7
    / SeqOptElemOption8
    / SeqOptElemOption9
    / SeqOptElemOption10
    / SeqOptElemOption11
    / SeqOptElemOption12
    / CYCLE
    / RESTART

SeqOptElemOption1
    = RESTART _ var1:OptWith _ var2:NumericOnly {
        return Node{
            Name: "SeqOptElemOption1",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "NumericOnly1": var2,
            },
        }, nil
    }

SeqOptElemOption2
    = SEQUENCE _ NAME _ var1:AnyName {
        return Node{
            Name: "SeqOptElemOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

SeqOptElemOption3
    = START _ var1:OptWith _ var2:NumericOnly {
        return Node{
            Name: "SeqOptElemOption3",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "NumericOnly1": var2,
            },
        }, nil
    }

SeqOptElemOption4
    = OWNED _ BY _ var1:AnyName {
        return Node{
            Name: "SeqOptElemOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

SeqOptElemOption5
    = INCREMENT _ OptBy _ var1:NumericOnly {
        return Node{
            Name: "SeqOptElemOption5",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

SeqOptElemOption6
    = NO _ MAXVALUE

SeqOptElemOption7
    = MINVALUE _ var1:NumericOnly {
        return Node{
            Name: "SeqOptElemOption7",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

SeqOptElemOption8
    = MAXVALUE _ var1:NumericOnly {
        return Node{
            Name: "SeqOptElemOption8",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

SeqOptElemOption9
    = NO _ MINVALUE

SeqOptElemOption10
    = NO _ CYCLE

SeqOptElemOption11
    = CACHE _ var1:NumericOnly {
        return Node{
            Name: "SeqOptElemOption11",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

SeqOptElemOption12
    = AS _ var1:SimpleTypename {
        return Node{
            Name: "SeqOptElemOption12",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
            },
        }, nil
    }

OptBy
    = BY?

NumericOnly
    = ("+" _ FCONST)
    / ("-" _ FCONST)
    / FCONST
    / SignedIconst

NumericOnlyList
    = var1:NumericOnly (_ "," _ NumericOnly)* {
        return Node{
            Name: "NumericOnlyList",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

CreatePLangStmt
    = CreatePLangStmtOption1
    / CreatePLangStmtOption2

CreatePLangStmtOption1
    = CREATE _ var1:OptOrReplace _ OptTrusted _ OptProcedural _ LANGUAGE _ var2:NonReservedWordOrSconst _ HANDLER _ var3:HandlerName _ var4:OptInlineHandler _ OptValidator {
        return Node{
            Name: "CreatePLangStmtOption1",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "NonReservedWordOrSconst1": var2,
                "HandlerName1": var3,
                "OptInlineHandler1": var4,
            },
        }, nil
    }

CreatePLangStmtOption2
    = CREATE _ var1:OptOrReplace _ OptTrusted _ OptProcedural _ LANGUAGE _ var2:NonReservedWordOrSconst {
        return Node{
            Name: "CreatePLangStmtOption2",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "NonReservedWordOrSconst1": var2,
            },
        }, nil
    }

OptTrusted
    = TRUSTED?

HandlerName
    = HandlerNameOption1
    / Name

HandlerNameOption1
    = Name _ var1:Attrs {
        return Node{
            Name: "HandlerNameOption1",
            Props: map[string]interface{}{
                "Attrs1": var1,
            },
        }, nil
    }

OptInlineHandler
    = (INLINE _ HandlerName)?

ValidatorClause
    = ValidatorClauseOption1
    / ValidatorClauseOption2

ValidatorClauseOption1
    = VALIDATOR _ var1:HandlerName {
        return Node{
            Name: "ValidatorClauseOption1",
            Props: map[string]interface{}{
                "HandlerName1": var1,
            },
        }, nil
    }

ValidatorClauseOption2
    = NO _ VALIDATOR

OptValidator
    = ValidatorClause?

DropPLangStmt
    = DropPLangStmtOption1
    / DropPLangStmtOption2

DropPLangStmtOption1
    = DROP _ OptProcedural _ LANGUAGE _ IF _ EXISTS _ var1:NonReservedWordOrSconst _ var2:OptDropBehavior {
        return Node{
            Name: "DropPLangStmtOption1",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropPLangStmtOption2
    = DROP _ OptProcedural _ LANGUAGE _ var1:NonReservedWordOrSconst _ var2:OptDropBehavior {
        return Node{
            Name: "DropPLangStmtOption2",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

OptProcedural
    = PROCEDURAL?

CreateTableSpaceStmt
    = (CREATE _ TABLESPACE _ Name _ var1:OptTableSpaceOwner _ LOCATION _ Sconst _ var2:OptReloptions) {
        return Node{
            Name: "CreateTableSpaceStmt",
            Props: map[string]interface{}{
                "OptTableSpaceOwner1": var1,
                "OptReloptions1": var2,
            },
        }, nil
    }

OptTableSpaceOwner
    = (OWNER _ RoleSpec)?

DropTableSpaceStmt
    = (DROP _ TABLESPACE _ IF _ EXISTS _ Name)
    / (DROP _ TABLESPACE _ Name)

CreateExtensionStmt
    = CreateExtensionStmtOption1
    / CreateExtensionStmtOption2

CreateExtensionStmtOption1
    = CREATE _ EXTENSION _ IF _ NOT _ EXISTS _ Name _ var1:OptWith _ var2:CreateExtensionOptList {
        return Node{
            Name: "CreateExtensionStmtOption1",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "CreateExtensionOptList1": var2,
            },
        }, nil
    }

CreateExtensionStmtOption2
    = CREATE _ EXTENSION _ Name _ var1:OptWith _ var2:CreateExtensionOptList {
        return Node{
            Name: "CreateExtensionStmtOption2",
            Props: map[string]interface{}{
                "OptWith1": var1,
                "CreateExtensionOptList1": var2,
            },
        }, nil
    }

CreateExtensionOptList
    = (_ CreateExtensionOptItem)*

CreateExtensionOptItem
    = CreateExtensionOptItemOption1
    / CreateExtensionOptItemOption2
    / CreateExtensionOptItemOption3
    / CASCADE

CreateExtensionOptItemOption1
    = SCHEMA _ Name

CreateExtensionOptItemOption2
    = VERSION _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "CreateExtensionOptItemOption2",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

CreateExtensionOptItemOption3
    = FROM _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "CreateExtensionOptItemOption3",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

AlterExtensionStmt
    = (ALTER _ EXTENSION _ Name _ UPDATE _ var1:AlterExtensionOptList) {
        return Node{
            Name: "AlterExtensionStmt",
            Props: map[string]interface{}{
                "AlterExtensionOptList1": var1,
            },
        }, nil
    }

AlterExtensionOptList
    = (_ AlterExtensionOptItem)*

AlterExtensionOptItem
    = (TO _ var1:NonReservedWordOrSconst) {
        return Node{
            Name: "AlterExtensionOptItem",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmt
    = AlterExtensionContentsStmtOption1
    / AlterExtensionContentsStmtOption2
    / AlterExtensionContentsStmtOption3
    / AlterExtensionContentsStmtOption4
    / AlterExtensionContentsStmtOption5
    / AlterExtensionContentsStmtOption6
    / AlterExtensionContentsStmtOption7
    / AlterExtensionContentsStmtOption8
    / AlterExtensionContentsStmtOption9
    / AlterExtensionContentsStmtOption10
    / AlterExtensionContentsStmtOption11
    / AlterExtensionContentsStmtOption12
    / AlterExtensionContentsStmtOption13
    / AlterExtensionContentsStmtOption14
    / AlterExtensionContentsStmtOption15
    / AlterExtensionContentsStmtOption16
    / AlterExtensionContentsStmtOption17
    / AlterExtensionContentsStmtOption18
    / AlterExtensionContentsStmtOption19
    / AlterExtensionContentsStmtOption20
    / AlterExtensionContentsStmtOption21
    / AlterExtensionContentsStmtOption22
    / AlterExtensionContentsStmtOption23
    / AlterExtensionContentsStmtOption24
    / AlterExtensionContentsStmtOption25
    / AlterExtensionContentsStmtOption26
    / AlterExtensionContentsStmtOption27
    / AlterExtensionContentsStmtOption28

AlterExtensionContentsStmtOption1
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ CAST _ "(" _ var2:Typename _ AS _ var3:Typename _ ")" {
        return Node{
            Name: "AlterExtensionContentsStmtOption1",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "Typename1": var2,
                "Typename2": var3,
            },
        }, nil
    }

AlterExtensionContentsStmtOption2
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ OPERATOR _ FAMILY _ var2:AnyName _ USING _ AccessMethod {
        return Node{
            Name: "AlterExtensionContentsStmtOption2",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption3
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TRANSFORM _ FOR _ var2:Typename _ LANGUAGE _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption3",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "Typename1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption4
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ OPERATOR _ CLASS _ var2:AnyName _ USING _ AccessMethod {
        return Node{
            Name: "AlterExtensionContentsStmtOption4",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption5
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TEXT _ SEARCH _ PARSER _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption5",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption6
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TEXT _ SEARCH _ DICTIONARY _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption6",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption7
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TEXT _ SEARCH _ CONFIGURATION _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption7",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption8
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ FOREIGN _ DATA _ WRAPPER _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption8",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption9
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TEXT _ SEARCH _ TEMPLATE _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption9",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption10
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ OptProcedural _ LANGUAGE _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption10",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption11
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ MATERIALIZED _ VIEW _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption11",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption12
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ FOREIGN _ TABLE _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption12",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption13
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ EVENT _ TRIGGER _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption13",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption14
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ ACCESS _ METHOD _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption14",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption15
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ SCHEMA _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption15",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption16
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TABLE _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption16",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption17
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ ROUTINE _ var2:FunctionWithArgtypes {
        return Node{
            Name: "AlterExtensionContentsStmtOption17",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "FunctionWithArgtypes1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption18
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ PROCEDURE _ var2:FunctionWithArgtypes {
        return Node{
            Name: "AlterExtensionContentsStmtOption18",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "FunctionWithArgtypes1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption19
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ OPERATOR _ var2:OperatorWithArgtypes {
        return Node{
            Name: "AlterExtensionContentsStmtOption19",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "OperatorWithArgtypes1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption20
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ FUNCTION _ var2:FunctionWithArgtypes {
        return Node{
            Name: "AlterExtensionContentsStmtOption20",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "FunctionWithArgtypes1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption21
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ SEQUENCE _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption21",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption22
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ VIEW _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption22",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption23
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ DOMAIN _ var2:Typename {
        return Node{
            Name: "AlterExtensionContentsStmtOption23",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "Typename1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption24
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ CONVERSION _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption24",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption25
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ COLLATION _ var2:AnyName {
        return Node{
            Name: "AlterExtensionContentsStmtOption25",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AnyName1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption26
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ SERVER _ Name {
        return Node{
            Name: "AlterExtensionContentsStmtOption26",
            Props: map[string]interface{}{
                "AddDrop1": var1,
            },
        }, nil
    }

AlterExtensionContentsStmtOption27
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ AGGREGATE _ var2:AggregateWithArgtypes {
        return Node{
            Name: "AlterExtensionContentsStmtOption27",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "AggregateWithArgtypes1": var2,
            },
        }, nil
    }

AlterExtensionContentsStmtOption28
    = ALTER _ EXTENSION _ Name _ var1:AddDrop _ TYPE _ var2:Typename {
        return Node{
            Name: "AlterExtensionContentsStmtOption28",
            Props: map[string]interface{}{
                "AddDrop1": var1,
                "Typename1": var2,
            },
        }, nil
    }

CreateFdwStmt
    = (CREATE _ FOREIGN _ DATA _ WRAPPER _ Name _ OptFdwOptions _ var1:CreateGenericOptions) {
        return Node{
            Name: "CreateFdwStmt",
            Props: map[string]interface{}{
                "CreateGenericOptions1": var1,
            },
        }, nil
    }

FdwOption
    = FdwOptionOption1
    / FdwOptionOption2
    / FdwOptionOption3
    / FdwOptionOption4

FdwOptionOption1
    = HANDLER _ var1:HandlerName {
        return Node{
            Name: "FdwOptionOption1",
            Props: map[string]interface{}{
                "HandlerName1": var1,
            },
        }, nil
    }

FdwOptionOption2
    = NO _ HANDLER

FdwOptionOption3
    = VALIDATOR _ var1:HandlerName {
        return Node{
            Name: "FdwOptionOption3",
            Props: map[string]interface{}{
                "HandlerName1": var1,
            },
        }, nil
    }

FdwOptionOption4
    = NO _ VALIDATOR

FdwOptions
    = var1:FdwOption (_ FdwOption)* {
        return Node{
            Name: "FdwOptions",
            Props: map[string]interface{}{
                "FdwOption1": var1,
            },
        }, nil
    }

OptFdwOptions
    = FdwOptions?

AlterFdwStmt
    = AlterFdwStmtOption1
    / AlterFdwStmtOption2

AlterFdwStmtOption1
    = ALTER _ FOREIGN _ DATA _ WRAPPER _ Name _ OptFdwOptions _ var1:AlterGenericOptions {
        return Node{
            Name: "AlterFdwStmtOption1",
            Props: map[string]interface{}{
                "AlterGenericOptions1": var1,
            },
        }, nil
    }

AlterFdwStmtOption2
    = ALTER _ FOREIGN _ DATA _ WRAPPER _ Name _ var1:FdwOptions {
        return Node{
            Name: "AlterFdwStmtOption2",
            Props: map[string]interface{}{
                "FdwOptions1": var1,
            },
        }, nil
    }

CreateGenericOptions
    = (OPTIONS _ "(" _ GenericOptionList _ ")")?

GenericOptionList
    = var1:GenericOptionElem (_ "," _ GenericOptionElem)* {
        return Node{
            Name: "GenericOptionList",
            Props: map[string]interface{}{
                "GenericOptionElem1": var1,
            },
        }, nil
    }

AlterGenericOptions
    = (OPTIONS _ "(" _ var1:AlterGenericOptionList _ ")") {
        return Node{
            Name: "AlterGenericOptions",
            Props: map[string]interface{}{
                "AlterGenericOptionList1": var1,
            },
        }, nil
    }

AlterGenericOptionList
    = var1:AlterGenericOptionElem (_ "," _ AlterGenericOptionElem)* {
        return Node{
            Name: "AlterGenericOptionList",
            Props: map[string]interface{}{
                "AlterGenericOptionElem1": var1,
            },
        }, nil
    }

AlterGenericOptionElem
    = AlterGenericOptionElemOption1
    / AlterGenericOptionElemOption2
    / AlterGenericOptionElemOption3
    / GenericOptionElem

AlterGenericOptionElemOption1
    = SET _ var1:GenericOptionElem {
        return Node{
            Name: "AlterGenericOptionElemOption1",
            Props: map[string]interface{}{
                "GenericOptionElem1": var1,
            },
        }, nil
    }

AlterGenericOptionElemOption2
    = ADD _ var1:GenericOptionElem {
        return Node{
            Name: "AlterGenericOptionElemOption2",
            Props: map[string]interface{}{
                "GenericOptionElem1": var1,
            },
        }, nil
    }

AlterGenericOptionElemOption3
    = DROP _ GenericOptionName

GenericOptionElem
    = (GenericOptionName _ GenericOptionArg)

GenericOptionName
    = ColLabel

GenericOptionArg
    = Sconst

CreateForeignServerStmt
    = CreateForeignServerStmtOption1
    / CreateForeignServerStmtOption2

CreateForeignServerStmtOption1
    = CREATE _ SERVER _ IF _ NOT _ EXISTS _ Name _ var1:OptType _ OptForeignServerVersion _ FOREIGN _ DATA _ WRAPPER _ Name _ var2:CreateGenericOptions {
        return Node{
            Name: "CreateForeignServerStmtOption1",
            Props: map[string]interface{}{
                "OptType1": var1,
                "CreateGenericOptions1": var2,
            },
        }, nil
    }

CreateForeignServerStmtOption2
    = CREATE _ SERVER _ Name _ var1:OptType _ OptForeignServerVersion _ FOREIGN _ DATA _ WRAPPER _ Name _ var2:CreateGenericOptions {
        return Node{
            Name: "CreateForeignServerStmtOption2",
            Props: map[string]interface{}{
                "OptType1": var1,
                "CreateGenericOptions1": var2,
            },
        }, nil
    }

OptType
    = (TYPE _ Sconst)?

ForeignServerVersion
    = (VERSION _ Sconst)
    / (VERSION _ NULL)

OptForeignServerVersion
    = ForeignServerVersion?

AlterForeignServerStmt
    = AlterForeignServerStmtOption1
    / AlterForeignServerStmtOption2
    / AlterForeignServerStmtOption3

AlterForeignServerStmtOption1
    = ALTER _ SERVER _ Name _ var1:ForeignServerVersion _ var2:AlterGenericOptions {
        return Node{
            Name: "AlterForeignServerStmtOption1",
            Props: map[string]interface{}{
                "ForeignServerVersion1": var1,
                "AlterGenericOptions1": var2,
            },
        }, nil
    }

AlterForeignServerStmtOption2
    = ALTER _ SERVER _ Name _ var1:ForeignServerVersion {
        return Node{
            Name: "AlterForeignServerStmtOption2",
            Props: map[string]interface{}{
                "ForeignServerVersion1": var1,
            },
        }, nil
    }

AlterForeignServerStmtOption3
    = ALTER _ SERVER _ Name _ var1:AlterGenericOptions {
        return Node{
            Name: "AlterForeignServerStmtOption3",
            Props: map[string]interface{}{
                "AlterGenericOptions1": var1,
            },
        }, nil
    }

CreateForeignTableStmt
    = CreateForeignTableStmtOption1
    / CreateForeignTableStmtOption2
    / CreateForeignTableStmtOption3
    / CreateForeignTableStmtOption4

CreateForeignTableStmtOption1
    = CREATE _ FOREIGN _ TABLE _ IF _ NOT _ EXISTS _ var1:QualifiedName _ PARTITION _ OF _ var2:QualifiedName _ var3:OptTypedTableElementList _ var4:PartitionBoundSpec _ SERVER _ Name _ var5:CreateGenericOptions {
        return Node{
            Name: "CreateForeignTableStmtOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "QualifiedName2": var2,
                "OptTypedTableElementList1": var3,
                "PartitionBoundSpec1": var4,
                "CreateGenericOptions1": var5,
            },
        }, nil
    }

CreateForeignTableStmtOption2
    = CREATE _ FOREIGN _ TABLE _ IF _ NOT _ EXISTS _ var1:QualifiedName _ "(" _ OptTableElementList _ ")" _ var2:OptInherit _ SERVER _ Name _ var3:CreateGenericOptions {
        return Node{
            Name: "CreateForeignTableStmtOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptInherit1": var2,
                "CreateGenericOptions1": var3,
            },
        }, nil
    }

CreateForeignTableStmtOption3
    = CREATE _ FOREIGN _ TABLE _ var1:QualifiedName _ PARTITION _ OF _ var2:QualifiedName _ var3:OptTypedTableElementList _ var4:PartitionBoundSpec _ SERVER _ Name _ var5:CreateGenericOptions {
        return Node{
            Name: "CreateForeignTableStmtOption3",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "QualifiedName2": var2,
                "OptTypedTableElementList1": var3,
                "PartitionBoundSpec1": var4,
                "CreateGenericOptions1": var5,
            },
        }, nil
    }

CreateForeignTableStmtOption4
    = CREATE _ FOREIGN _ TABLE _ var1:QualifiedName _ "(" _ OptTableElementList _ ")" _ var2:OptInherit _ SERVER _ Name _ var3:CreateGenericOptions {
        return Node{
            Name: "CreateForeignTableStmtOption4",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptInherit1": var2,
                "CreateGenericOptions1": var3,
            },
        }, nil
    }

AlterForeignTableStmt
    = AlterForeignTableStmtOption1
    / AlterForeignTableStmtOption2

AlterForeignTableStmtOption1
    = ALTER _ FOREIGN _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ var2:AlterTableCmds {
        return Node{
            Name: "AlterForeignTableStmtOption1",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

AlterForeignTableStmtOption2
    = ALTER _ FOREIGN _ TABLE _ var1:RelationExpr _ var2:AlterTableCmds {
        return Node{
            Name: "AlterForeignTableStmtOption2",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AlterTableCmds1": var2,
            },
        }, nil
    }

ImportForeignSchemaStmt
    = (IMPORT _ FOREIGN _ SCHEMA _ Name _ var1:ImportQualification _ FROM _ SERVER _ Name _ INTO _ Name _ var2:CreateGenericOptions) {
        return Node{
            Name: "ImportForeignSchemaStmt",
            Props: map[string]interface{}{
                "ImportQualification1": var1,
                "CreateGenericOptions1": var2,
            },
        }, nil
    }

ImportQualificationType
    = (LIMIT _ TO)
    / EXCEPT

ImportQualification
    = (ImportQualificationType _ "(" _ RelationExprList _ ")")?

CreateUserMappingStmt
    = CreateUserMappingStmtOption1
    / CreateUserMappingStmtOption2

CreateUserMappingStmtOption1
    = CREATE _ USER _ MAPPING _ IF _ NOT _ EXISTS _ FOR _ var1:AuthIdent _ SERVER _ Name _ var2:CreateGenericOptions {
        return Node{
            Name: "CreateUserMappingStmtOption1",
            Props: map[string]interface{}{
                "AuthIdent1": var1,
                "CreateGenericOptions1": var2,
            },
        }, nil
    }

CreateUserMappingStmtOption2
    = CREATE _ USER _ MAPPING _ FOR _ var1:AuthIdent _ SERVER _ Name _ var2:CreateGenericOptions {
        return Node{
            Name: "CreateUserMappingStmtOption2",
            Props: map[string]interface{}{
                "AuthIdent1": var1,
                "CreateGenericOptions1": var2,
            },
        }, nil
    }

AuthIdent
    = RoleSpec
    / USER

DropUserMappingStmt
    = DropUserMappingStmtOption1
    / DropUserMappingStmtOption2

DropUserMappingStmtOption1
    = DROP _ USER _ MAPPING _ IF _ EXISTS _ FOR _ var1:AuthIdent _ SERVER _ Name {
        return Node{
            Name: "DropUserMappingStmtOption1",
            Props: map[string]interface{}{
                "AuthIdent1": var1,
            },
        }, nil
    }

DropUserMappingStmtOption2
    = DROP _ USER _ MAPPING _ FOR _ var1:AuthIdent _ SERVER _ Name {
        return Node{
            Name: "DropUserMappingStmtOption2",
            Props: map[string]interface{}{
                "AuthIdent1": var1,
            },
        }, nil
    }

AlterUserMappingStmt
    = (ALTER _ USER _ MAPPING _ FOR _ var1:AuthIdent _ SERVER _ Name _ var2:AlterGenericOptions) {
        return Node{
            Name: "AlterUserMappingStmt",
            Props: map[string]interface{}{
                "AuthIdent1": var1,
                "AlterGenericOptions1": var2,
            },
        }, nil
    }

CreatePolicyStmt
    = (CREATE _ POLICY _ Name _ ON _ var1:QualifiedName _ var2:RowSecurityDefaultPermissive _ var3:RowSecurityDefaultForCmd _ var4:RowSecurityDefaultToRole _ var5:RowSecurityOptionalExpr _ var6:RowSecurityOptionalWithCheck) {
        return Node{
            Name: "CreatePolicyStmt",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "RowSecurityDefaultPermissive1": var2,
                "RowSecurityDefaultForCmd1": var3,
                "RowSecurityDefaultToRole1": var4,
                "RowSecurityOptionalExpr1": var5,
                "RowSecurityOptionalWithCheck1": var6,
            },
        }, nil
    }

AlterPolicyStmt
    = (ALTER _ POLICY _ Name _ ON _ var1:QualifiedName _ var2:RowSecurityOptionalToRole _ var3:RowSecurityOptionalExpr _ var4:RowSecurityOptionalWithCheck) {
        return Node{
            Name: "AlterPolicyStmt",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "RowSecurityOptionalToRole1": var2,
                "RowSecurityOptionalExpr1": var3,
                "RowSecurityOptionalWithCheck1": var4,
            },
        }, nil
    }

RowSecurityOptionalExpr
    = (USING _ "(" _ AExpr _ ")")?

RowSecurityOptionalWithCheck
    = (WITH _ CHECK _ "(" _ AExpr _ ")")?

RowSecurityDefaultToRole
    = (TO _ RoleList)?

RowSecurityOptionalToRole
    = (TO _ RoleList)?

RowSecurityDefaultPermissive
    = (AS _ IDENT)?

RowSecurityDefaultForCmd
    = (FOR _ RowSecurityCmd)?

RowSecurityCmd
    = ALL
    / SELECT
    / INSERT
    / UPDATE
    / DELETE

CreateAmStmt
    = (CREATE _ ACCESS _ METHOD _ Name _ TYPE _ INDEX _ HANDLER _ var1:HandlerName) {
        return Node{
            Name: "CreateAmStmt",
            Props: map[string]interface{}{
                "HandlerName1": var1,
            },
        }, nil
    }

CreateTrigStmt
    = CreateTrigStmtOption1
    / CreateTrigStmtOption2

CreateTrigStmtOption1
    = CREATE _ CONSTRAINT _ TRIGGER _ Name _ AFTER _ var1:TriggerEvents _ ON _ var2:QualifiedName _ var3:OptConstrFromTable _ var4:ConstraintAttributeSpec _ FOR _ EACH _ ROW _ var5:TriggerWhen _ EXECUTE _ PROCEDURE _ var6:FuncName _ "(" _ var7:TriggerFuncArgs _ ")" {
        return Node{
            Name: "CreateTrigStmtOption1",
            Props: map[string]interface{}{
                "TriggerEvents1": var1,
                "QualifiedName1": var2,
                "OptConstrFromTable1": var3,
                "ConstraintAttributeSpec1": var4,
                "TriggerWhen1": var5,
                "FuncName1": var6,
                "TriggerFuncArgs1": var7,
            },
        }, nil
    }

CreateTrigStmtOption2
    = CREATE _ TRIGGER _ Name _ var1:TriggerActionTime _ var2:TriggerEvents _ ON _ var3:QualifiedName _ var4:TriggerReferencing _ var5:TriggerForSpec _ var6:TriggerWhen _ EXECUTE _ PROCEDURE _ var7:FuncName _ "(" _ var8:TriggerFuncArgs _ ")" {
        return Node{
            Name: "CreateTrigStmtOption2",
            Props: map[string]interface{}{
                "TriggerActionTime1": var1,
                "TriggerEvents1": var2,
                "QualifiedName1": var3,
                "TriggerReferencing1": var4,
                "TriggerForSpec1": var5,
                "TriggerWhen1": var6,
                "FuncName1": var7,
                "TriggerFuncArgs1": var8,
            },
        }, nil
    }

TriggerActionTime
    = (INSTEAD _ OF)
    / BEFORE
    / AFTER

TriggerEvents
    = var1:TriggerOneEvent (_ OR _ TriggerOneEvent)* {
        return Node{
            Name: "TriggerEvents",
            Props: map[string]interface{}{
                "TriggerOneEvent1": var1,
            },
        }, nil
    }

TriggerOneEvent
    = TriggerOneEventOption1
    / INSERT
    / DELETE
    / UPDATE
    / TRUNCATE

TriggerOneEventOption1
    = UPDATE _ OF _ var1:ColumnList {
        return Node{
            Name: "TriggerOneEventOption1",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

TriggerReferencing
    = (REFERENCING _ TriggerTransitions)?

TriggerTransitions
    = var1:TriggerTransition (_ TriggerTransition)* {
        return Node{
            Name: "TriggerTransitions",
            Props: map[string]interface{}{
                "TriggerTransition1": var1,
            },
        }, nil
    }

TriggerTransition
    = (var1:TransitionOldOrNew _ var2:TransitionRowOrTable _ OptAs _ TransitionRelName) {
        return Node{
            Name: "TriggerTransition",
            Props: map[string]interface{}{
                "TransitionOldOrNew1": var1,
                "TransitionRowOrTable1": var2,
            },
        }, nil
    }

TransitionOldOrNew
    = NEW
    / OLD

TransitionRowOrTable
    = TABLE
    / ROW

TransitionRelName
    = ColId

TriggerForSpec
    = (FOR _ TriggerForOptEach _ TriggerForType)?

TriggerForOptEach
    = EACH?

TriggerForType
    = ROW
    / STATEMENT

TriggerWhen
    = (WHEN _ "(" _ AExpr _ ")")?

TriggerFuncArgs
    = (TriggerFuncArg (_ "," _ TriggerFuncArg)*)?

TriggerFuncArg
    = Iconst
    / FCONST
    / Sconst
    / ColLabel

OptConstrFromTable
    = (FROM _ QualifiedName)?

ConstraintAttributeSpec
    = (_ ConstraintAttributeElem)*

ConstraintAttributeElem
    = (NOT _ DEFERRABLE)
    / (INITIALLY _ IMMEDIATE)
    / (INITIALLY _ DEFERRED)
    / (NOT _ VALID)
    / (NO _ INHERIT)
    / DEFERRABLE

CreateEventTrigStmt
    = CreateEventTrigStmtOption1
    / CreateEventTrigStmtOption2

CreateEventTrigStmtOption1
    = CREATE _ EVENT _ TRIGGER _ Name _ ON _ var1:ColLabel _ WHEN _ var2:EventTriggerWhenList _ EXECUTE _ PROCEDURE _ var3:FuncName _ "(" _ ")" {
        return Node{
            Name: "CreateEventTrigStmtOption1",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "EventTriggerWhenList1": var2,
                "FuncName1": var3,
            },
        }, nil
    }

CreateEventTrigStmtOption2
    = CREATE _ EVENT _ TRIGGER _ Name _ ON _ var1:ColLabel _ EXECUTE _ PROCEDURE _ var2:FuncName _ "(" _ ")" {
        return Node{
            Name: "CreateEventTrigStmtOption2",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "FuncName1": var2,
            },
        }, nil
    }

EventTriggerWhenList
    = var1:EventTriggerWhenItem (_ AND _ EventTriggerWhenItem)* {
        return Node{
            Name: "EventTriggerWhenList",
            Props: map[string]interface{}{
                "EventTriggerWhenItem1": var1,
            },
        }, nil
    }

EventTriggerWhenItem
    = (var1:ColId _ IN _ "(" _ var2:EventTriggerValueList _ ")") {
        return Node{
            Name: "EventTriggerWhenItem",
            Props: map[string]interface{}{
                "ColId1": var1,
                "EventTriggerValueList1": var2,
            },
        }, nil
    }

EventTriggerValueList
    = SCONST (_ "," _ SCONST)*

AlterEventTrigStmt
    = (ALTER _ EVENT _ TRIGGER _ Name _ var1:EnableTrigger) {
        return Node{
            Name: "AlterEventTrigStmt",
            Props: map[string]interface{}{
                "EnableTrigger1": var1,
            },
        }, nil
    }

EnableTrigger
    = (ENABLE _ REPLICA)
    / (ENABLE _ ALWAYS)
    / ENABLE
    / DISABLE

CreateAssertStmt
    = (CREATE _ ASSERTION _ Name _ CHECK _ "(" _ var1:AExpr _ ")" _ var2:ConstraintAttributeSpec) {
        return Node{
            Name: "CreateAssertStmt",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "ConstraintAttributeSpec1": var2,
            },
        }, nil
    }

DropAssertStmt
    = (DROP _ ASSERTION _ Name _ var1:OptDropBehavior) {
        return Node{
            Name: "DropAssertStmt",
            Props: map[string]interface{}{
                "OptDropBehavior1": var1,
            },
        }, nil
    }

DefineStmt
    = DefineStmtOption1
    / DefineStmtOption2
    / DefineStmtOption3
    / DefineStmtOption4
    / DefineStmtOption5
    / DefineStmtOption6
    / DefineStmtOption7
    / DefineStmtOption8
    / DefineStmtOption9
    / DefineStmtOption10
    / DefineStmtOption11
    / DefineStmtOption12
    / DefineStmtOption13
    / DefineStmtOption14
    / DefineStmtOption15
    / DefineStmtOption16

DefineStmtOption1
    = CREATE _ COLLATION _ IF _ NOT _ EXISTS _ var1:AnyName _ FROM _ var2:AnyName {
        return Node{
            Name: "DefineStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AnyName2": var2,
            },
        }, nil
    }

DefineStmtOption2
    = CREATE _ TYPE _ var1:AnyName _ AS _ ENUM _ "(" _ OptEnumValList _ ")" {
        return Node{
            Name: "DefineStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

DefineStmtOption3
    = CREATE _ COLLATION _ IF _ NOT _ EXISTS _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption4
    = CREATE _ TYPE _ var1:AnyName _ AS _ "(" _ OptTableFuncElementList _ ")" {
        return Node{
            Name: "DefineStmtOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

DefineStmtOption5
    = CREATE _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption6
    = CREATE _ TEXT _ SEARCH _ TEMPLATE _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption6",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption7
    = CREATE _ TEXT _ SEARCH _ DICTIONARY _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption7",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption8
    = CREATE _ TYPE _ var1:AnyName _ AS _ RANGE _ var2:Definition {
        return Node{
            Name: "DefineStmtOption8",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption9
    = CREATE _ TEXT _ SEARCH _ PARSER _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption9",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption10
    = CREATE _ AGGREGATE _ var1:FuncName _ var2:AggrArgs _ var3:Definition {
        return Node{
            Name: "DefineStmtOption10",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "AggrArgs1": var2,
                "Definition1": var3,
            },
        }, nil
    }

DefineStmtOption11
    = CREATE _ COLLATION _ var1:AnyName _ FROM _ var2:AnyName {
        return Node{
            Name: "DefineStmtOption11",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AnyName2": var2,
            },
        }, nil
    }

DefineStmtOption12
    = CREATE _ TYPE _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption12",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption13
    = CREATE _ OPERATOR _ var1:AnyOperator _ var2:Definition {
        return Node{
            Name: "DefineStmtOption13",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption14
    = CREATE _ COLLATION _ var1:AnyName _ var2:Definition {
        return Node{
            Name: "DefineStmtOption14",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

DefineStmtOption15
    = CREATE _ AGGREGATE _ var1:FuncName _ var2:OldAggrDefinition {
        return Node{
            Name: "DefineStmtOption15",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "OldAggrDefinition1": var2,
            },
        }, nil
    }

DefineStmtOption16
    = CREATE _ TYPE _ var1:AnyName {
        return Node{
            Name: "DefineStmtOption16",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

Definition
    = ("(" _ var1:DefList _ ")") {
        return Node{
            Name: "Definition",
            Props: map[string]interface{}{
                "DefList1": var1,
            },
        }, nil
    }

DefList
    = var1:DefElem (_ "," _ DefElem)* {
        return Node{
            Name: "DefList",
            Props: map[string]interface{}{
                "DefElem1": var1,
            },
        }, nil
    }

DefElem
    = DefElemOption1
    / ColLabel

DefElemOption1
    = var1:ColLabel _ "=" _ var2:DefArg {
        return Node{
            Name: "DefElemOption1",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "DefArg1": var2,
            },
        }, nil
    }

DefArg
    = FuncType
    / ReservedKeyword
    / QualAllOp
    / NumericOnly
    / Sconst
    / NONE

OldAggrDefinition
    = ("(" _ var1:OldAggrList _ ")") {
        return Node{
            Name: "OldAggrDefinition",
            Props: map[string]interface{}{
                "OldAggrList1": var1,
            },
        }, nil
    }

OldAggrList
    = var1:OldAggrElem (_ "," _ OldAggrElem)* {
        return Node{
            Name: "OldAggrList",
            Props: map[string]interface{}{
                "OldAggrElem1": var1,
            },
        }, nil
    }

OldAggrElem
    = (IDENT _ "=" _ var1:DefArg) {
        return Node{
            Name: "OldAggrElem",
            Props: map[string]interface{}{
                "DefArg1": var1,
            },
        }, nil
    }

OptEnumValList
    = EnumValList?

EnumValList
    = Sconst (_ "," _ Sconst)*

AlterEnumStmt
    = AlterEnumStmtOption1
    / AlterEnumStmtOption2
    / AlterEnumStmtOption3
    / AlterEnumStmtOption4

AlterEnumStmtOption1
    = ALTER _ TYPE _ var1:AnyName _ ADD _ VALUE _ var2:OptIfNotExists _ Sconst _ BEFORE _ Sconst {
        return Node{
            Name: "AlterEnumStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptIfNotExists1": var2,
            },
        }, nil
    }

AlterEnumStmtOption2
    = ALTER _ TYPE _ var1:AnyName _ ADD _ VALUE _ var2:OptIfNotExists _ Sconst _ AFTER _ Sconst {
        return Node{
            Name: "AlterEnumStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptIfNotExists1": var2,
            },
        }, nil
    }

AlterEnumStmtOption3
    = ALTER _ TYPE _ var1:AnyName _ RENAME _ VALUE _ Sconst _ TO _ Sconst {
        return Node{
            Name: "AlterEnumStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterEnumStmtOption4
    = ALTER _ TYPE _ var1:AnyName _ ADD _ VALUE _ var2:OptIfNotExists _ Sconst {
        return Node{
            Name: "AlterEnumStmtOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptIfNotExists1": var2,
            },
        }, nil
    }

OptIfNotExists
    = (IF _ NOT _ EXISTS)?

CreateOpClassStmt
    = (CREATE _ OPERATOR _ CLASS _ var1:AnyName _ OptDefault _ FOR _ TYPE _ var2:Typename _ USING _ AccessMethod _ var3:OptOpfamily _ AS _ var4:OpclassItemList) {
        return Node{
            Name: "CreateOpClassStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Typename1": var2,
                "OptOpfamily1": var3,
                "OpclassItemList1": var4,
            },
        }, nil
    }

OpclassItemList
    = var1:OpclassItem (_ "," _ OpclassItem)* {
        return Node{
            Name: "OpclassItemList",
            Props: map[string]interface{}{
                "OpclassItem1": var1,
            },
        }, nil
    }

OpclassItem
    = OpclassItemOption1
    / OpclassItemOption2
    / OpclassItemOption3
    / OpclassItemOption4
    / OpclassItemOption5

OpclassItemOption1
    = FUNCTION _ Iconst _ "(" _ var1:TypeList _ ")" _ var2:FunctionWithArgtypes {
        return Node{
            Name: "OpclassItemOption1",
            Props: map[string]interface{}{
                "TypeList1": var1,
                "FunctionWithArgtypes1": var2,
            },
        }, nil
    }

OpclassItemOption2
    = OPERATOR _ Iconst _ var1:AnyOperator _ var2:OpclassPurpose _ OptRecheck {
        return Node{
            Name: "OpclassItemOption2",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
                "OpclassPurpose1": var2,
            },
        }, nil
    }

OpclassItemOption3
    = OPERATOR _ Iconst _ var1:OperatorWithArgtypes _ var2:OpclassPurpose _ OptRecheck {
        return Node{
            Name: "OpclassItemOption3",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
                "OpclassPurpose1": var2,
            },
        }, nil
    }

OpclassItemOption4
    = FUNCTION _ Iconst _ var1:FunctionWithArgtypes {
        return Node{
            Name: "OpclassItemOption4",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

OpclassItemOption5
    = STORAGE _ var1:Typename {
        return Node{
            Name: "OpclassItemOption5",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

OptDefault
    = DEFAULT?

OptOpfamily
    = (FAMILY _ AnyName)?

OpclassPurpose
    = (OpclassPurposeOption1
    / OpclassPurposeOption2)?

OpclassPurposeOption1
    = FOR _ ORDER _ BY _ var1:AnyName {
        return Node{
            Name: "OpclassPurposeOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

OpclassPurposeOption2
    = FOR _ SEARCH

OptRecheck
    = RECHECK?

CreateOpFamilyStmt
    = (CREATE _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod) {
        return Node{
            Name: "CreateOpFamilyStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterOpFamilyStmt
    = AlterOpFamilyStmtOption1
    / AlterOpFamilyStmtOption2

AlterOpFamilyStmtOption1
    = ALTER _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ ADD _ var2:OpclassItemList {
        return Node{
            Name: "AlterOpFamilyStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OpclassItemList1": var2,
            },
        }, nil
    }

AlterOpFamilyStmtOption2
    = ALTER _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ DROP _ var2:OpclassDropList {
        return Node{
            Name: "AlterOpFamilyStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OpclassDropList1": var2,
            },
        }, nil
    }

OpclassDropList
    = var1:OpclassDrop (_ "," _ OpclassDrop)* {
        return Node{
            Name: "OpclassDropList",
            Props: map[string]interface{}{
                "OpclassDrop1": var1,
            },
        }, nil
    }

OpclassDrop
    = OpclassDropOption1
    / OpclassDropOption2

OpclassDropOption1
    = OPERATOR _ Iconst _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "OpclassDropOption1",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

OpclassDropOption2
    = FUNCTION _ Iconst _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "OpclassDropOption2",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

DropOpClassStmt
    = DropOpClassStmtOption1
    / DropOpClassStmtOption2

DropOpClassStmtOption1
    = DROP _ OPERATOR _ CLASS _ IF _ EXISTS _ var1:AnyName _ USING _ AccessMethod _ var2:OptDropBehavior {
        return Node{
            Name: "DropOpClassStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropOpClassStmtOption2
    = DROP _ OPERATOR _ CLASS _ var1:AnyName _ USING _ AccessMethod _ var2:OptDropBehavior {
        return Node{
            Name: "DropOpClassStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropOpFamilyStmt
    = DropOpFamilyStmtOption1
    / DropOpFamilyStmtOption2

DropOpFamilyStmtOption1
    = DROP _ OPERATOR _ FAMILY _ IF _ EXISTS _ var1:AnyName _ USING _ AccessMethod _ var2:OptDropBehavior {
        return Node{
            Name: "DropOpFamilyStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropOpFamilyStmtOption2
    = DROP _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ var2:OptDropBehavior {
        return Node{
            Name: "DropOpFamilyStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropOwnedStmt
    = (DROP _ OWNED _ BY _ var1:RoleList _ var2:OptDropBehavior) {
        return Node{
            Name: "DropOwnedStmt",
            Props: map[string]interface{}{
                "RoleList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

ReassignOwnedStmt
    = (REASSIGN _ OWNED _ BY _ var1:RoleList _ TO _ var2:RoleSpec) {
        return Node{
            Name: "ReassignOwnedStmt",
            Props: map[string]interface{}{
                "RoleList1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

DropStmt
    = DropStmtOption1
    / DropStmtOption2
    / DropStmtOption3
    / DropStmtOption4
    / DropStmtOption5
    / DropStmtOption6
    / DropStmtOption7
    / DropStmtOption8
    / DropStmtOption9
    / DropStmtOption10
    / DropStmtOption11
    / DropStmtOption12

DropStmtOption1
    = DROP _ var1:DropTypeNameOnAnyName _ IF _ EXISTS _ Name _ ON _ var2:AnyName _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption1",
            Props: map[string]interface{}{
                "DropTypeNameOnAnyName1": var1,
                "AnyName1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropStmtOption2
    = DROP _ INDEX _ CONCURRENTLY _ IF _ EXISTS _ var1:AnyNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption2",
            Props: map[string]interface{}{
                "AnyNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption3
    = DROP _ var1:DropTypeAnyName _ IF _ EXISTS _ var2:AnyNameList _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption3",
            Props: map[string]interface{}{
                "DropTypeAnyName1": var1,
                "AnyNameList1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropStmtOption4
    = DROP _ TYPE _ IF _ EXISTS _ var1:TypeNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption4",
            Props: map[string]interface{}{
                "TypeNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption5
    = DROP _ var1:DropTypeName _ IF _ EXISTS _ var2:NameList _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption5",
            Props: map[string]interface{}{
                "DropTypeName1": var1,
                "NameList1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropStmtOption6
    = DROP _ DOMAIN _ IF _ EXISTS _ var1:TypeNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption6",
            Props: map[string]interface{}{
                "TypeNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption7
    = DROP _ var1:DropTypeNameOnAnyName _ Name _ ON _ var2:AnyName _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption7",
            Props: map[string]interface{}{
                "DropTypeNameOnAnyName1": var1,
                "AnyName1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropStmtOption8
    = DROP _ INDEX _ CONCURRENTLY _ var1:AnyNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption8",
            Props: map[string]interface{}{
                "AnyNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption9
    = DROP _ TYPE _ var1:TypeNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption9",
            Props: map[string]interface{}{
                "TypeNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption10
    = DROP _ var1:DropTypeAnyName _ var2:AnyNameList _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption10",
            Props: map[string]interface{}{
                "DropTypeAnyName1": var1,
                "AnyNameList1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropStmtOption11
    = DROP _ DOMAIN _ var1:TypeNameList _ var2:OptDropBehavior {
        return Node{
            Name: "DropStmtOption11",
            Props: map[string]interface{}{
                "TypeNameList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

DropStmtOption12
    = DROP _ var1:DropTypeName _ var2:NameList _ var3:OptDropBehavior {
        return Node{
            Name: "DropStmtOption12",
            Props: map[string]interface{}{
                "DropTypeName1": var1,
                "NameList1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

DropTypeAnyName
    = (TEXT _ SEARCH _ CONFIGURATION)
    / (TEXT _ SEARCH _ TEMPLATE)
    / (TEXT _ SEARCH _ DICTIONARY)
    / (TEXT _ SEARCH _ PARSER)
    / (MATERIALIZED _ VIEW)
    / (FOREIGN _ TABLE)
    / COLLATION
    / CONVERSION
    / STATISTICS
    / INDEX
    / VIEW
    / SEQUENCE
    / TABLE

DropTypeName
    = (FOREIGN _ DATA _ WRAPPER)
    / (ACCESS _ METHOD)
    / (EVENT _ TRIGGER)
    / EXTENSION
    / PUBLICATION
    / SCHEMA
    / SERVER

DropTypeNameOnAnyName
    = POLICY
    / RULE
    / TRIGGER

AnyNameList
    = var1:AnyName (_ "," _ AnyName)* {
        return Node{
            Name: "AnyNameList",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AnyName
    = AnyNameOption1
    / ColId

AnyNameOption1
    = var1:ColId _ var2:Attrs {
        return Node{
            Name: "AnyNameOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Attrs1": var2,
            },
        }, nil
    }

Attrs
    = "." _ AttrName (_ "." _ AttrName)*

TypeNameList
    = var1:Typename (_ "," _ Typename)* {
        return Node{
            Name: "TypeNameList",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

TruncateStmt
    = (TRUNCATE _ OptTable _ var1:RelationExprList _ var2:OptRestartSeqs _ var3:OptDropBehavior) {
        return Node{
            Name: "TruncateStmt",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
                "OptRestartSeqs1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

OptRestartSeqs
    = ((CONTINUE _ IDENTITY)
    / (RESTART _ IDENTITY))?

CommentStmt
    = CommentStmtOption1
    / CommentStmtOption2
    / CommentStmtOption3
    / CommentStmtOption4
    / CommentStmtOption5
    / CommentStmtOption6
    / CommentStmtOption7
    / CommentStmtOption8
    / CommentStmtOption9
    / CommentStmtOption10
    / CommentStmtOption11
    / CommentStmtOption12
    / CommentStmtOption13
    / CommentStmtOption14
    / CommentStmtOption15
    / CommentStmtOption16
    / CommentStmtOption17
    / CommentStmtOption18
    / CommentStmtOption19

CommentStmtOption1
    = COMMENT _ ON _ CAST _ "(" _ var1:Typename _ AS _ var2:Typename _ ")" _ IS _ var3:CommentText {
        return Node{
            Name: "CommentStmtOption1",
            Props: map[string]interface{}{
                "Typename1": var1,
                "Typename2": var2,
                "CommentText1": var3,
            },
        }, nil
    }

CommentStmtOption2
    = COMMENT _ ON _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption3
    = COMMENT _ ON _ OPERATOR _ CLASS _ var1:AnyName _ USING _ AccessMethod _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption4
    = COMMENT _ ON _ TRANSFORM _ FOR _ var1:Typename _ LANGUAGE _ Name _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption4",
            Props: map[string]interface{}{
                "Typename1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption5
    = COMMENT _ ON _ CONSTRAINT _ Name _ ON _ DOMAIN _ var1:AnyName _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption6
    = COMMENT _ ON _ TRIGGER _ Name _ ON _ var1:AnyName _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption6",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption7
    = COMMENT _ ON _ RULE _ Name _ ON _ var1:AnyName _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption7",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption8
    = COMMENT _ ON _ CONSTRAINT _ Name _ ON _ var1:AnyName _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption8",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption9
    = COMMENT _ ON _ POLICY _ Name _ ON _ var1:AnyName _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption9",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption10
    = COMMENT _ ON _ LARGE _ OBJECT _ var1:NumericOnly _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption10",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption11
    = COMMENT _ ON _ OPERATOR _ var1:OperatorWithArgtypes _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption11",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption12
    = COMMENT _ ON _ PROCEDURE _ var1:FunctionWithArgtypes _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption12",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption13
    = COMMENT _ ON _ FUNCTION _ var1:FunctionWithArgtypes _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption13",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption14
    = COMMENT _ ON _ AGGREGATE _ var1:AggregateWithArgtypes _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption14",
            Props: map[string]interface{}{
                "AggregateWithArgtypes1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption15
    = COMMENT _ ON _ DOMAIN _ var1:Typename _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption15",
            Props: map[string]interface{}{
                "Typename1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption16
    = COMMENT _ ON _ TYPE _ var1:Typename _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption16",
            Props: map[string]interface{}{
                "Typename1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption17
    = COMMENT _ ON _ var1:CommentTypeName _ Name _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption17",
            Props: map[string]interface{}{
                "CommentTypeName1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption18
    = COMMENT _ ON _ ROUTINE _ var1:FunctionWithArgtypes _ IS _ var2:CommentText {
        return Node{
            Name: "CommentStmtOption18",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "CommentText1": var2,
            },
        }, nil
    }

CommentStmtOption19
    = COMMENT _ ON _ var1:CommentTypeAnyName _ var2:AnyName _ IS _ var3:CommentText {
        return Node{
            Name: "CommentStmtOption19",
            Props: map[string]interface{}{
                "CommentTypeAnyName1": var1,
                "AnyName1": var2,
                "CommentText1": var3,
            },
        }, nil
    }

CommentTypeAnyName
    = (TEXT _ SEARCH _ PARSER)
    / (TEXT _ SEARCH _ DICTIONARY)
    / (TEXT _ SEARCH _ CONFIGURATION)
    / (TEXT _ SEARCH _ TEMPLATE)
    / (MATERIALIZED _ VIEW)
    / (FOREIGN _ TABLE)
    / COLLATION
    / VIEW
    / CONVERSION
    / TABLE
    / STATISTICS
    / SEQUENCE
    / INDEX
    / COLUMN

CommentTypeName
    = (FOREIGN _ DATA _ WRAPPER)
    / (ACCESS _ METHOD)
    / (EVENT _ TRIGGER)
    / (OptProcedural _ LANGUAGE)
    / DATABASE
    / EXTENSION
    / PUBLICATION
    / ROLE
    / SCHEMA
    / SERVER
    / SUBSCRIPTION
    / TABLESPACE

CommentText
    = Sconst
    / NULL

SecLabelStmt
    = SecLabelStmtOption1
    / SecLabelStmtOption2
    / SecLabelStmtOption3
    / SecLabelStmtOption4
    / SecLabelStmtOption5
    / SecLabelStmtOption6
    / SecLabelStmtOption7
    / SecLabelStmtOption8
    / SecLabelStmtOption9

SecLabelStmtOption1
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ LARGE _ OBJECT _ var2:NumericOnly _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption1",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "NumericOnly1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption2
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ var2:SecurityLabelTypeName _ Name _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption2",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "SecurityLabelTypeName1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption3
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ TYPE _ var2:Typename _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption3",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "Typename1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption4
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ DOMAIN _ var2:Typename _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption4",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "Typename1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption5
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ AGGREGATE _ var2:AggregateWithArgtypes _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption5",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "AggregateWithArgtypes1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption6
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ FUNCTION _ var2:FunctionWithArgtypes _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption6",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "FunctionWithArgtypes1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption7
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ var2:SecurityLabelTypeAnyName _ var3:AnyName _ IS _ var4:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption7",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "SecurityLabelTypeAnyName1": var2,
                "AnyName1": var3,
                "SecurityLabel1": var4,
            },
        }, nil
    }

SecLabelStmtOption8
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ PROCEDURE _ var2:FunctionWithArgtypes _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption8",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "FunctionWithArgtypes1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

SecLabelStmtOption9
    = SECURITY _ LABEL _ var1:OptProvider _ ON _ ROUTINE _ var2:FunctionWithArgtypes _ IS _ var3:SecurityLabel {
        return Node{
            Name: "SecLabelStmtOption9",
            Props: map[string]interface{}{
                "OptProvider1": var1,
                "FunctionWithArgtypes1": var2,
                "SecurityLabel1": var3,
            },
        }, nil
    }

OptProvider
    = (FOR _ NonReservedWordOrSconst)?

SecurityLabelTypeAnyName
    = (FOREIGN _ TABLE)
    / (MATERIALIZED _ VIEW)
    / COLUMN
    / SEQUENCE
    / TABLE
    / VIEW

SecurityLabelTypeName
    = (EVENT _ TRIGGER)
    / (OptProcedural _ LANGUAGE)
    / DATABASE
    / PUBLICATION
    / ROLE
    / SCHEMA
    / SUBSCRIPTION
    / TABLESPACE

SecurityLabel
    = Sconst
    / NULL

FetchStmt
    = FetchStmtOption1
    / FetchStmtOption2

FetchStmtOption1
    = FETCH _ var1:FetchArgs {
        return Node{
            Name: "FetchStmtOption1",
            Props: map[string]interface{}{
                "FetchArgs1": var1,
            },
        }, nil
    }

FetchStmtOption2
    = MOVE _ var1:FetchArgs {
        return Node{
            Name: "FetchStmtOption2",
            Props: map[string]interface{}{
                "FetchArgs1": var1,
            },
        }, nil
    }

FetchArgs
    = FetchArgsOption1
    / FetchArgsOption2
    / FetchArgsOption3
    / FetchArgsOption4
    / FetchArgsOption5
    / FetchArgsOption6
    / FetchArgsOption7
    / FetchArgsOption8
    / FetchArgsOption9
    / FetchArgsOption10
    / FetchArgsOption11
    / FetchArgsOption12
    / FetchArgsOption13
    / FetchArgsOption14
    / FetchArgsOption15
    / CursorName

FetchArgsOption1
    = ABSOLUTE _ var1:SignedIconst _ OptFromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption1",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

FetchArgsOption2
    = BACKWARD _ var1:SignedIconst _ OptFromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption2",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

FetchArgsOption3
    = FORWARD _ ALL _ OptFromIn _ CursorName

FetchArgsOption4
    = FORWARD _ var1:SignedIconst _ OptFromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption4",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

FetchArgsOption5
    = BACKWARD _ ALL _ OptFromIn _ CursorName

FetchArgsOption6
    = RELATIVE _ var1:SignedIconst _ OptFromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption6",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

FetchArgsOption7
    = var1:SignedIconst _ OptFromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption7",
            Props: map[string]interface{}{
                "SignedIconst1": var1,
            },
        }, nil
    }

FetchArgsOption8
    = LAST _ OptFromIn _ CursorName

FetchArgsOption9
    = FIRST _ OptFromIn _ CursorName

FetchArgsOption10
    = ALL _ OptFromIn _ CursorName

FetchArgsOption11
    = FORWARD _ OptFromIn _ CursorName

FetchArgsOption12
    = PRIOR _ OptFromIn _ CursorName

FetchArgsOption13
    = NEXT _ OptFromIn _ CursorName

FetchArgsOption14
    = BACKWARD _ OptFromIn _ CursorName

FetchArgsOption15
    = var1:FromIn _ CursorName {
        return Node{
            Name: "FetchArgsOption15",
            Props: map[string]interface{}{
                "FromIn1": var1,
            },
        }, nil
    }

FromIn
    = FROM
    / IN

OptFromIn
    = FromIn?

GrantStmt
    = (GRANT _ var1:Privileges _ ON _ var2:PrivilegeTarget _ TO _ var3:GranteeList _ var4:OptGrantGrantOption) {
        return Node{
            Name: "GrantStmt",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "PrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptGrantGrantOption1": var4,
            },
        }, nil
    }

RevokeStmt
    = RevokeStmtOption1
    / RevokeStmtOption2

RevokeStmtOption1
    = REVOKE _ GRANT _ OPTION _ FOR _ var1:Privileges _ ON _ var2:PrivilegeTarget _ FROM _ var3:GranteeList _ var4:OptDropBehavior {
        return Node{
            Name: "RevokeStmtOption1",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "PrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

RevokeStmtOption2
    = REVOKE _ var1:Privileges _ ON _ var2:PrivilegeTarget _ FROM _ var3:GranteeList _ var4:OptDropBehavior {
        return Node{
            Name: "RevokeStmtOption2",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "PrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

Privileges
    = PrivilegesOption1
    / PrivilegesOption2
    / PrivilegesOption3
    / PrivilegeList
    / ALL

PrivilegesOption1
    = ALL _ PRIVILEGES _ "(" _ var1:ColumnList _ ")" {
        return Node{
            Name: "PrivilegesOption1",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

PrivilegesOption2
    = ALL _ "(" _ var1:ColumnList _ ")" {
        return Node{
            Name: "PrivilegesOption2",
            Props: map[string]interface{}{
                "ColumnList1": var1,
            },
        }, nil
    }

PrivilegesOption3
    = ALL _ PRIVILEGES

PrivilegeList
    = var1:Privilege (_ "," _ Privilege)* {
        return Node{
            Name: "PrivilegeList",
            Props: map[string]interface{}{
                "Privilege1": var1,
            },
        }, nil
    }

Privilege
    = PrivilegeOption1
    / PrivilegeOption2
    / PrivilegeOption3
    / PrivilegeOption4

PrivilegeOption1
    = SELECT _ var1:OptColumnList {
        return Node{
            Name: "PrivilegeOption1",
            Props: map[string]interface{}{
                "OptColumnList1": var1,
            },
        }, nil
    }

PrivilegeOption2
    = REFERENCES _ var1:OptColumnList {
        return Node{
            Name: "PrivilegeOption2",
            Props: map[string]interface{}{
                "OptColumnList1": var1,
            },
        }, nil
    }

PrivilegeOption3
    = CREATE _ var1:OptColumnList {
        return Node{
            Name: "PrivilegeOption3",
            Props: map[string]interface{}{
                "OptColumnList1": var1,
            },
        }, nil
    }

PrivilegeOption4
    = var1:ColId _ var2:OptColumnList {
        return Node{
            Name: "PrivilegeOption4",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptColumnList1": var2,
            },
        }, nil
    }

PrivilegeTarget
    = PrivilegeTargetOption1
    / PrivilegeTargetOption2
    / PrivilegeTargetOption3
    / PrivilegeTargetOption4
    / PrivilegeTargetOption5
    / PrivilegeTargetOption6
    / PrivilegeTargetOption7
    / PrivilegeTargetOption8
    / PrivilegeTargetOption9
    / PrivilegeTargetOption10
    / PrivilegeTargetOption11
    / PrivilegeTargetOption12
    / PrivilegeTargetOption13
    / PrivilegeTargetOption14
    / PrivilegeTargetOption15
    / PrivilegeTargetOption16
    / PrivilegeTargetOption17
    / PrivilegeTargetOption18
    / PrivilegeTargetOption19
    / QualifiedNameList

PrivilegeTargetOption1
    = ALL _ ROUTINES _ IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption1",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption2
    = ALL _ PROCEDURES _ IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption2",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption3
    = ALL _ FUNCTIONS _ IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption3",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption4
    = ALL _ SEQUENCES _ IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption4",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption5
    = ALL _ TABLES _ IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption5",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption6
    = FOREIGN _ DATA _ WRAPPER _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption6",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption7
    = FOREIGN _ SERVER _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption7",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption8
    = LARGE _ OBJECT _ var1:NumericOnlyList {
        return Node{
            Name: "PrivilegeTargetOption8",
            Props: map[string]interface{}{
                "NumericOnlyList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption9
    = LANGUAGE _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption9",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption10
    = DOMAIN _ var1:AnyNameList {
        return Node{
            Name: "PrivilegeTargetOption10",
            Props: map[string]interface{}{
                "AnyNameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption11
    = DATABASE _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption11",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption12
    = ROUTINE _ var1:FunctionWithArgtypesList {
        return Node{
            Name: "PrivilegeTargetOption12",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption13
    = SCHEMA _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption13",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption14
    = TABLESPACE _ var1:NameList {
        return Node{
            Name: "PrivilegeTargetOption14",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption15
    = TYPE _ var1:AnyNameList {
        return Node{
            Name: "PrivilegeTargetOption15",
            Props: map[string]interface{}{
                "AnyNameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption16
    = PROCEDURE _ var1:FunctionWithArgtypesList {
        return Node{
            Name: "PrivilegeTargetOption16",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption17
    = FUNCTION _ var1:FunctionWithArgtypesList {
        return Node{
            Name: "PrivilegeTargetOption17",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption18
    = SEQUENCE _ var1:QualifiedNameList {
        return Node{
            Name: "PrivilegeTargetOption18",
            Props: map[string]interface{}{
                "QualifiedNameList1": var1,
            },
        }, nil
    }

PrivilegeTargetOption19
    = TABLE _ var1:QualifiedNameList {
        return Node{
            Name: "PrivilegeTargetOption19",
            Props: map[string]interface{}{
                "QualifiedNameList1": var1,
            },
        }, nil
    }

GranteeList
    = var1:Grantee (_ "," _ Grantee)* {
        return Node{
            Name: "GranteeList",
            Props: map[string]interface{}{
                "Grantee1": var1,
            },
        }, nil
    }

Grantee
    = GranteeOption1
    / RoleSpec

GranteeOption1
    = GROUP _ var1:RoleSpec {
        return Node{
            Name: "GranteeOption1",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

OptGrantGrantOption
    = (WITH _ GRANT _ OPTION)?

GrantRoleStmt
    = (GRANT _ var1:PrivilegeList _ TO _ var2:RoleList _ var3:OptGrantAdminOption _ var4:OptGrantedBy) {
        return Node{
            Name: "GrantRoleStmt",
            Props: map[string]interface{}{
                "PrivilegeList1": var1,
                "RoleList1": var2,
                "OptGrantAdminOption1": var3,
                "OptGrantedBy1": var4,
            },
        }, nil
    }

RevokeRoleStmt
    = RevokeRoleStmtOption1
    / RevokeRoleStmtOption2

RevokeRoleStmtOption1
    = REVOKE _ ADMIN _ OPTION _ FOR _ var1:PrivilegeList _ FROM _ var2:RoleList _ var3:OptGrantedBy _ var4:OptDropBehavior {
        return Node{
            Name: "RevokeRoleStmtOption1",
            Props: map[string]interface{}{
                "PrivilegeList1": var1,
                "RoleList1": var2,
                "OptGrantedBy1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

RevokeRoleStmtOption2
    = REVOKE _ var1:PrivilegeList _ FROM _ var2:RoleList _ var3:OptGrantedBy _ var4:OptDropBehavior {
        return Node{
            Name: "RevokeRoleStmtOption2",
            Props: map[string]interface{}{
                "PrivilegeList1": var1,
                "RoleList1": var2,
                "OptGrantedBy1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

OptGrantAdminOption
    = (WITH _ ADMIN _ OPTION)?

OptGrantedBy
    = (GRANTED _ BY _ RoleSpec)?

AlterDefaultPrivilegesStmt
    = (ALTER _ DEFAULT _ PRIVILEGES _ var1:DefACLOptionList _ var2:DefACLAction) {
        return Node{
            Name: "AlterDefaultPrivilegesStmt",
            Props: map[string]interface{}{
                "DefACLOptionList1": var1,
                "DefACLAction1": var2,
            },
        }, nil
    }

DefACLOptionList
    = (_ DefACLOption)*

DefACLOption
    = DefACLOptionOption1
    / DefACLOptionOption2
    / DefACLOptionOption3

DefACLOptionOption1
    = IN _ SCHEMA _ var1:NameList {
        return Node{
            Name: "DefACLOptionOption1",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

DefACLOptionOption2
    = FOR _ ROLE _ var1:RoleList {
        return Node{
            Name: "DefACLOptionOption2",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DefACLOptionOption3
    = FOR _ USER _ var1:RoleList {
        return Node{
            Name: "DefACLOptionOption3",
            Props: map[string]interface{}{
                "RoleList1": var1,
            },
        }, nil
    }

DefACLAction
    = DefACLActionOption1
    / DefACLActionOption2
    / DefACLActionOption3

DefACLActionOption1
    = REVOKE _ GRANT _ OPTION _ FOR _ var1:Privileges _ ON _ var2:DefaclPrivilegeTarget _ FROM _ var3:GranteeList _ var4:OptDropBehavior {
        return Node{
            Name: "DefACLActionOption1",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "DefaclPrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

DefACLActionOption2
    = GRANT _ var1:Privileges _ ON _ var2:DefaclPrivilegeTarget _ TO _ var3:GranteeList _ var4:OptGrantGrantOption {
        return Node{
            Name: "DefACLActionOption2",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "DefaclPrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptGrantGrantOption1": var4,
            },
        }, nil
    }

DefACLActionOption3
    = REVOKE _ var1:Privileges _ ON _ var2:DefaclPrivilegeTarget _ FROM _ var3:GranteeList _ var4:OptDropBehavior {
        return Node{
            Name: "DefACLActionOption3",
            Props: map[string]interface{}{
                "Privileges1": var1,
                "DefaclPrivilegeTarget1": var2,
                "GranteeList1": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

DefaclPrivilegeTarget
    = TABLES
    / FUNCTIONS
    / ROUTINES
    / SEQUENCES
    / TYPES
    / SCHEMAS

IndexStmt
    = IndexStmtOption1
    / IndexStmtOption2

IndexStmtOption1
    = CREATE _ OptUnique _ INDEX _ OptConcurrently _ IF _ NOT _ EXISTS _ IndexName _ ON _ var1:RelationExpr _ var2:AccessMethodClause _ "(" _ var3:IndexParams _ ")" _ var4:OptInclude _ var5:OptReloptions _ var6:OptTableSpace _ var7:WhereClause {
        return Node{
            Name: "IndexStmtOption1",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AccessMethodClause1": var2,
                "IndexParams1": var3,
                "OptInclude1": var4,
                "OptReloptions1": var5,
                "OptTableSpace1": var6,
                "WhereClause1": var7,
            },
        }, nil
    }

IndexStmtOption2
    = CREATE _ OptUnique _ INDEX _ OptConcurrently _ OptIndexName _ ON _ var1:RelationExpr _ var2:AccessMethodClause _ "(" _ var3:IndexParams _ ")" _ var4:OptInclude _ var5:OptReloptions _ var6:OptTableSpace _ var7:WhereClause {
        return Node{
            Name: "IndexStmtOption2",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "AccessMethodClause1": var2,
                "IndexParams1": var3,
                "OptInclude1": var4,
                "OptReloptions1": var5,
                "OptTableSpace1": var6,
                "WhereClause1": var7,
            },
        }, nil
    }

OptUnique
    = UNIQUE?

OptConcurrently
    = CONCURRENTLY?

OptIndexName
    = IndexName?

AccessMethodClause
    = (USING _ AccessMethod)?

IndexParams
    = var1:IndexElem (_ "," _ IndexElem)* {
        return Node{
            Name: "IndexParams",
            Props: map[string]interface{}{
                "IndexElem1": var1,
            },
        }, nil
    }

IndexElem
    = IndexElemOption1
    / IndexElemOption2
    / IndexElemOption3

IndexElemOption1
    = "(" _ var1:AExpr _ ")" _ var2:OptCollate _ OptClass _ var3:OptAscDesc _ var4:OptNullsOrder {
        return Node{
            Name: "IndexElemOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OptCollate1": var2,
                "OptAscDesc1": var3,
                "OptNullsOrder1": var4,
            },
        }, nil
    }

IndexElemOption2
    = var1:ColId _ var2:OptCollate _ OptClass _ var3:OptAscDesc _ var4:OptNullsOrder {
        return Node{
            Name: "IndexElemOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptCollate1": var2,
                "OptAscDesc1": var3,
                "OptNullsOrder1": var4,
            },
        }, nil
    }

IndexElemOption3
    = var1:FuncExprWindowless _ var2:OptCollate _ OptClass _ var3:OptAscDesc _ var4:OptNullsOrder {
        return Node{
            Name: "IndexElemOption3",
            Props: map[string]interface{}{
                "FuncExprWindowless1": var1,
                "OptCollate1": var2,
                "OptAscDesc1": var3,
                "OptNullsOrder1": var4,
            },
        }, nil
    }

OptInclude
    = (INCLUDE _ "(" _ IndexIncludingParams _ ")")?

IndexIncludingParams
    = var1:IndexElem (_ "," _ IndexElem)* {
        return Node{
            Name: "IndexIncludingParams",
            Props: map[string]interface{}{
                "IndexElem1": var1,
            },
        }, nil
    }

OptCollate
    = (COLLATE _ AnyName)?

OptClass
    = AnyName?

OptAscDesc
    = (ASC
    / DESC)?

OptNullsOrder
    = ((NULLS _ FIRST)
    / (NULLS _ LAST))?

CreateFunctionStmt
    = CreateFunctionStmtOption1
    / CreateFunctionStmtOption2
    / CreateFunctionStmtOption3
    / CreateFunctionStmtOption4

CreateFunctionStmtOption1
    = CREATE _ var1:OptOrReplace _ FUNCTION _ var2:FuncName _ var3:FuncArgsWithDefaults _ RETURNS _ TABLE _ "(" _ var4:TableFuncColumnList _ ")" _ var5:CreatefuncOptList {
        return Node{
            Name: "CreateFunctionStmtOption1",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "FuncName1": var2,
                "FuncArgsWithDefaults1": var3,
                "TableFuncColumnList1": var4,
                "CreatefuncOptList1": var5,
            },
        }, nil
    }

CreateFunctionStmtOption2
    = CREATE _ var1:OptOrReplace _ FUNCTION _ var2:FuncName _ var3:FuncArgsWithDefaults _ RETURNS _ FuncReturn _ var4:CreatefuncOptList {
        return Node{
            Name: "CreateFunctionStmtOption2",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "FuncName1": var2,
                "FuncArgsWithDefaults1": var3,
                "CreatefuncOptList1": var4,
            },
        }, nil
    }

CreateFunctionStmtOption3
    = CREATE _ var1:OptOrReplace _ FUNCTION _ var2:FuncName _ var3:FuncArgsWithDefaults _ var4:CreatefuncOptList {
        return Node{
            Name: "CreateFunctionStmtOption3",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "FuncName1": var2,
                "FuncArgsWithDefaults1": var3,
                "CreatefuncOptList1": var4,
            },
        }, nil
    }

CreateFunctionStmtOption4
    = CREATE _ var1:OptOrReplace _ PROCEDURE _ var2:FuncName _ var3:FuncArgsWithDefaults _ var4:CreatefuncOptList {
        return Node{
            Name: "CreateFunctionStmtOption4",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "FuncName1": var2,
                "FuncArgsWithDefaults1": var3,
                "CreatefuncOptList1": var4,
            },
        }, nil
    }

OptOrReplace
    = (OR _ REPLACE)?

FuncArgs
    = FuncArgsOption1
    / FuncArgsOption2

FuncArgsOption1
    = "(" _ var1:FuncArgsList _ ")" {
        return Node{
            Name: "FuncArgsOption1",
            Props: map[string]interface{}{
                "FuncArgsList1": var1,
            },
        }, nil
    }

FuncArgsOption2
    = "(" _ ")"

FuncArgsList
    = var1:FuncArg (_ "," _ FuncArg)* {
        return Node{
            Name: "FuncArgsList",
            Props: map[string]interface{}{
                "FuncArg1": var1,
            },
        }, nil
    }

FunctionWithArgtypesList
    = var1:FunctionWithArgtypes (_ "," _ FunctionWithArgtypes)* {
        return Node{
            Name: "FunctionWithArgtypesList",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

FunctionWithArgtypes
    = FunctionWithArgtypesOption1
    / FunctionWithArgtypesOption2
    / TypeFuncNameKeyword
    / ColId

FunctionWithArgtypesOption1
    = var1:FuncName _ var2:FuncArgs {
        return Node{
            Name: "FunctionWithArgtypesOption1",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgs1": var2,
            },
        }, nil
    }

FunctionWithArgtypesOption2
    = var1:ColId _ var2:Indirection {
        return Node{
            Name: "FunctionWithArgtypesOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Indirection1": var2,
            },
        }, nil
    }

FuncArgsWithDefaults
    = FuncArgsWithDefaultsOption1
    / FuncArgsWithDefaultsOption2

FuncArgsWithDefaultsOption1
    = "(" _ var1:FuncArgsWithDefaultsList _ ")" {
        return Node{
            Name: "FuncArgsWithDefaultsOption1",
            Props: map[string]interface{}{
                "FuncArgsWithDefaultsList1": var1,
            },
        }, nil
    }

FuncArgsWithDefaultsOption2
    = "(" _ ")"

FuncArgsWithDefaultsList
    = var1:FuncArgWithDefault (_ "," _ FuncArgWithDefault)* {
        return Node{
            Name: "FuncArgsWithDefaultsList",
            Props: map[string]interface{}{
                "FuncArgWithDefault1": var1,
            },
        }, nil
    }

FuncArg
    = FuncArgOption1
    / FuncArgOption2
    / FuncArgOption3
    / FuncArgOption4
    / FuncType

FuncArgOption1
    = var1:ArgClass _ ParamName _ var2:FuncType {
        return Node{
            Name: "FuncArgOption1",
            Props: map[string]interface{}{
                "ArgClass1": var1,
                "FuncType1": var2,
            },
        }, nil
    }

FuncArgOption2
    = ParamName _ var1:ArgClass _ var2:FuncType {
        return Node{
            Name: "FuncArgOption2",
            Props: map[string]interface{}{
                "ArgClass1": var1,
                "FuncType1": var2,
            },
        }, nil
    }

FuncArgOption3
    = ParamName _ var1:FuncType {
        return Node{
            Name: "FuncArgOption3",
            Props: map[string]interface{}{
                "FuncType1": var1,
            },
        }, nil
    }

FuncArgOption4
    = var1:ArgClass _ var2:FuncType {
        return Node{
            Name: "FuncArgOption4",
            Props: map[string]interface{}{
                "ArgClass1": var1,
                "FuncType1": var2,
            },
        }, nil
    }

ArgClass
    = (IN _ OUT)
    / IN
    / OUT
    / INOUT
    / VARIADIC

ParamName
    = TypeFunctionName

FuncReturn
    = FuncType

FuncType
    = FuncTypeOption1
    / FuncTypeOption2
    / Typename

FuncTypeOption1
    = SETOF _ var1:TypeFunctionName _ var2:Attrs _ "%" _ TYPE {
        return Node{
            Name: "FuncTypeOption1",
            Props: map[string]interface{}{
                "TypeFunctionName1": var1,
                "Attrs1": var2,
            },
        }, nil
    }

FuncTypeOption2
    = var1:TypeFunctionName _ var2:Attrs _ "%" _ TYPE {
        return Node{
            Name: "FuncTypeOption2",
            Props: map[string]interface{}{
                "TypeFunctionName1": var1,
                "Attrs1": var2,
            },
        }, nil
    }

FuncArgWithDefault
    = FuncArgWithDefaultOption1
    / FuncArgWithDefaultOption2
    / FuncArg

FuncArgWithDefaultOption1
    = var1:FuncArg _ DEFAULT _ var2:AExpr {
        return Node{
            Name: "FuncArgWithDefaultOption1",
            Props: map[string]interface{}{
                "FuncArg1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

FuncArgWithDefaultOption2
    = var1:FuncArg _ "=" _ var2:AExpr {
        return Node{
            Name: "FuncArgWithDefaultOption2",
            Props: map[string]interface{}{
                "FuncArg1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

AggrArg
    = FuncArg

AggrArgs
    = AggrArgsOption1
    / AggrArgsOption2
    / AggrArgsOption3
    / AggrArgsOption4

AggrArgsOption1
    = "(" _ var1:AggrArgsList _ ORDER _ BY _ var2:AggrArgsList _ ")" {
        return Node{
            Name: "AggrArgsOption1",
            Props: map[string]interface{}{
                "AggrArgsList1": var1,
                "AggrArgsList2": var2,
            },
        }, nil
    }

AggrArgsOption2
    = "(" _ ORDER _ BY _ var1:AggrArgsList _ ")" {
        return Node{
            Name: "AggrArgsOption2",
            Props: map[string]interface{}{
                "AggrArgsList1": var1,
            },
        }, nil
    }

AggrArgsOption3
    = "(" _ "*" _ ")"

AggrArgsOption4
    = "(" _ var1:AggrArgsList _ ")" {
        return Node{
            Name: "AggrArgsOption4",
            Props: map[string]interface{}{
                "AggrArgsList1": var1,
            },
        }, nil
    }

AggrArgsList
    = AggrArg (_ "," _ AggrArg)*

AggregateWithArgtypes
    = (var1:FuncName _ var2:AggrArgs) {
        return Node{
            Name: "AggregateWithArgtypes",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "AggrArgs1": var2,
            },
        }, nil
    }

AggregateWithArgtypesList
    = var1:AggregateWithArgtypes (_ "," _ AggregateWithArgtypes)* {
        return Node{
            Name: "AggregateWithArgtypesList",
            Props: map[string]interface{}{
                "AggregateWithArgtypes1": var1,
            },
        }, nil
    }

CreatefuncOptList
    = var1:CreatefuncOptItem (_ CreatefuncOptItem)* {
        return Node{
            Name: "CreatefuncOptList",
            Props: map[string]interface{}{
                "CreatefuncOptItem1": var1,
            },
        }, nil
    }

CommonFuncOptItem
    = CommonFuncOptItemOption1
    / CommonFuncOptItemOption2
    / CommonFuncOptItemOption3
    / CommonFuncOptItemOption4
    / CommonFuncOptItemOption5
    / CommonFuncOptItemOption6
    / CommonFuncOptItemOption7
    / CommonFuncOptItemOption8
    / CommonFuncOptItemOption9
    / CommonFuncOptItemOption10
    / LEAKPROOF
    / STABLE
    / IMMUTABLE
    / STRICT
    / FunctionSetResetClause
    / VOLATILE

CommonFuncOptItemOption1
    = RETURNS _ NULL _ ON _ NULL _ INPUT

CommonFuncOptItemOption2
    = CALLED _ ON _ NULL _ INPUT

CommonFuncOptItemOption3
    = EXTERNAL _ SECURITY _ DEFINER

CommonFuncOptItemOption4
    = EXTERNAL _ SECURITY _ INVOKER

CommonFuncOptItemOption5
    = ROWS _ var1:NumericOnly {
        return Node{
            Name: "CommonFuncOptItemOption5",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

CommonFuncOptItemOption6
    = COST _ var1:NumericOnly {
        return Node{
            Name: "CommonFuncOptItemOption6",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
            },
        }, nil
    }

CommonFuncOptItemOption7
    = NOT _ LEAKPROOF

CommonFuncOptItemOption8
    = SECURITY _ INVOKER

CommonFuncOptItemOption9
    = SECURITY _ DEFINER

CommonFuncOptItemOption10
    = PARALLEL _ var1:ColId {
        return Node{
            Name: "CommonFuncOptItemOption10",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

CreatefuncOptItem
    = CreatefuncOptItemOption1
    / CreatefuncOptItemOption2
    / CreatefuncOptItemOption3
    / WINDOW
    / CommonFuncOptItem

CreatefuncOptItemOption1
    = AS _ var1:FuncAs {
        return Node{
            Name: "CreatefuncOptItemOption1",
            Props: map[string]interface{}{
                "FuncAs1": var1,
            },
        }, nil
    }

CreatefuncOptItemOption2
    = LANGUAGE _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "CreatefuncOptItemOption2",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

CreatefuncOptItemOption3
    = TRANSFORM _ var1:TransformTypeList {
        return Node{
            Name: "CreatefuncOptItemOption3",
            Props: map[string]interface{}{
                "TransformTypeList1": var1,
            },
        }, nil
    }

FuncAs
    = (Sconst _ "," _ Sconst)
    / Sconst

TransformTypeList
    = FOR _ TYPE _ var1:Typename (_ "," _ FOR _ TYPE _ Typename)* {
        return Node{
            Name: "TransformTypeList",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

OptDefinition
    = (WITH _ Definition)?

TableFuncColumn
    = (ParamName _ var1:FuncType) {
        return Node{
            Name: "TableFuncColumn",
            Props: map[string]interface{}{
                "FuncType1": var1,
            },
        }, nil
    }

TableFuncColumnList
    = var1:TableFuncColumn (_ "," _ TableFuncColumn)* {
        return Node{
            Name: "TableFuncColumnList",
            Props: map[string]interface{}{
                "TableFuncColumn1": var1,
            },
        }, nil
    }

AlterFunctionStmt
    = AlterFunctionStmtOption1
    / AlterFunctionStmtOption2
    / AlterFunctionStmtOption3

AlterFunctionStmtOption1
    = ALTER _ FUNCTION _ var1:FunctionWithArgtypes _ var2:AlterfuncOptList _ OptRestrict {
        return Node{
            Name: "AlterFunctionStmtOption1",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "AlterfuncOptList1": var2,
            },
        }, nil
    }

AlterFunctionStmtOption2
    = ALTER _ PROCEDURE _ var1:FunctionWithArgtypes _ var2:AlterfuncOptList _ OptRestrict {
        return Node{
            Name: "AlterFunctionStmtOption2",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "AlterfuncOptList1": var2,
            },
        }, nil
    }

AlterFunctionStmtOption3
    = ALTER _ ROUTINE _ var1:FunctionWithArgtypes _ var2:AlterfuncOptList _ OptRestrict {
        return Node{
            Name: "AlterFunctionStmtOption3",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "AlterfuncOptList1": var2,
            },
        }, nil
    }

AlterfuncOptList
    = var1:CommonFuncOptItem (_ CommonFuncOptItem)* {
        return Node{
            Name: "AlterfuncOptList",
            Props: map[string]interface{}{
                "CommonFuncOptItem1": var1,
            },
        }, nil
    }

OptRestrict
    = RESTRICT?

RemoveFuncStmt
    = RemoveFuncStmtOption1
    / RemoveFuncStmtOption2
    / RemoveFuncStmtOption3
    / RemoveFuncStmtOption4
    / RemoveFuncStmtOption5
    / RemoveFuncStmtOption6

RemoveFuncStmtOption1
    = DROP _ FUNCTION _ IF _ EXISTS _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption1",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveFuncStmtOption2
    = DROP _ PROCEDURE _ IF _ EXISTS _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption2",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveFuncStmtOption3
    = DROP _ ROUTINE _ IF _ EXISTS _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption3",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveFuncStmtOption4
    = DROP _ FUNCTION _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption4",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveFuncStmtOption5
    = DROP _ PROCEDURE _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption5",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveFuncStmtOption6
    = DROP _ ROUTINE _ var1:FunctionWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveFuncStmtOption6",
            Props: map[string]interface{}{
                "FunctionWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveAggrStmt
    = RemoveAggrStmtOption1
    / RemoveAggrStmtOption2

RemoveAggrStmtOption1
    = DROP _ AGGREGATE _ IF _ EXISTS _ var1:AggregateWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveAggrStmtOption1",
            Props: map[string]interface{}{
                "AggregateWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveAggrStmtOption2
    = DROP _ AGGREGATE _ var1:AggregateWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveAggrStmtOption2",
            Props: map[string]interface{}{
                "AggregateWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveOperStmt
    = RemoveOperStmtOption1
    / RemoveOperStmtOption2

RemoveOperStmtOption1
    = DROP _ OPERATOR _ IF _ EXISTS _ var1:OperatorWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveOperStmtOption1",
            Props: map[string]interface{}{
                "OperatorWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RemoveOperStmtOption2
    = DROP _ OPERATOR _ var1:OperatorWithArgtypesList _ var2:OptDropBehavior {
        return Node{
            Name: "RemoveOperStmtOption2",
            Props: map[string]interface{}{
                "OperatorWithArgtypesList1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

OperArgtypes
    = OperArgtypesOption1
    / OperArgtypesOption2
    / OperArgtypesOption3
    / OperArgtypesOption4

OperArgtypesOption1
    = "(" _ var1:Typename _ "," _ var2:Typename _ ")" {
        return Node{
            Name: "OperArgtypesOption1",
            Props: map[string]interface{}{
                "Typename1": var1,
                "Typename2": var2,
            },
        }, nil
    }

OperArgtypesOption2
    = "(" _ NONE _ "," _ var1:Typename _ ")" {
        return Node{
            Name: "OperArgtypesOption2",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

OperArgtypesOption3
    = "(" _ var1:Typename _ "," _ NONE _ ")" {
        return Node{
            Name: "OperArgtypesOption3",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

OperArgtypesOption4
    = "(" _ var1:Typename _ ")" {
        return Node{
            Name: "OperArgtypesOption4",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

AnyOperator
    = (ColId _ "." _)* var1:AllOp {
        return Node{
            Name: "AnyOperator",
            Props: map[string]interface{}{
                "AllOp1": var1,
            },
        }, nil
    }

OperatorWithArgtypesList
    = var1:OperatorWithArgtypes (_ "," _ OperatorWithArgtypes)* {
        return Node{
            Name: "OperatorWithArgtypesList",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
            },
        }, nil
    }

OperatorWithArgtypes
    = (var1:AnyOperator _ var2:OperArgtypes) {
        return Node{
            Name: "OperatorWithArgtypes",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
                "OperArgtypes1": var2,
            },
        }, nil
    }

DoStmt
    = (DO _ var1:DostmtOptList) {
        return Node{
            Name: "DoStmt",
            Props: map[string]interface{}{
                "DostmtOptList1": var1,
            },
        }, nil
    }

DostmtOptList
    = var1:DostmtOptItem (_ DostmtOptItem)* {
        return Node{
            Name: "DostmtOptList",
            Props: map[string]interface{}{
                "DostmtOptItem1": var1,
            },
        }, nil
    }

DostmtOptItem
    = DostmtOptItemOption1
    / Sconst

DostmtOptItemOption1
    = LANGUAGE _ var1:NonReservedWordOrSconst {
        return Node{
            Name: "DostmtOptItemOption1",
            Props: map[string]interface{}{
                "NonReservedWordOrSconst1": var1,
            },
        }, nil
    }

CreateCastStmt
    = CreateCastStmtOption1
    / CreateCastStmtOption2
    / CreateCastStmtOption3

CreateCastStmtOption1
    = CREATE _ CAST _ "(" _ var1:Typename _ AS _ var2:Typename _ ")" _ WITH _ FUNCTION _ var3:FunctionWithArgtypes _ var4:CastContext {
        return Node{
            Name: "CreateCastStmtOption1",
            Props: map[string]interface{}{
                "Typename1": var1,
                "Typename2": var2,
                "FunctionWithArgtypes1": var3,
                "CastContext1": var4,
            },
        }, nil
    }

CreateCastStmtOption2
    = CREATE _ CAST _ "(" _ var1:Typename _ AS _ var2:Typename _ ")" _ WITHOUT _ FUNCTION _ var3:CastContext {
        return Node{
            Name: "CreateCastStmtOption2",
            Props: map[string]interface{}{
                "Typename1": var1,
                "Typename2": var2,
                "CastContext1": var3,
            },
        }, nil
    }

CreateCastStmtOption3
    = CREATE _ CAST _ "(" _ var1:Typename _ AS _ var2:Typename _ ")" _ WITH _ INOUT _ var3:CastContext {
        return Node{
            Name: "CreateCastStmtOption3",
            Props: map[string]interface{}{
                "Typename1": var1,
                "Typename2": var2,
                "CastContext1": var3,
            },
        }, nil
    }

CastContext
    = ((AS _ IMPLICIT)
    / (AS _ ASSIGNMENT))?

DropCastStmt
    = (DROP _ CAST _ var1:OptIfExists _ "(" _ var2:Typename _ AS _ var3:Typename _ ")" _ var4:OptDropBehavior) {
        return Node{
            Name: "DropCastStmt",
            Props: map[string]interface{}{
                "OptIfExists1": var1,
                "Typename1": var2,
                "Typename2": var3,
                "OptDropBehavior1": var4,
            },
        }, nil
    }

OptIfExists
    = (IF _ EXISTS)?

CreateTransformStmt
    = (CREATE _ var1:OptOrReplace _ TRANSFORM _ FOR _ var2:Typename _ LANGUAGE _ Name _ "(" _ var3:TransformElementList _ ")") {
        return Node{
            Name: "CreateTransformStmt",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "Typename1": var2,
                "TransformElementList1": var3,
            },
        }, nil
    }

TransformElementList
    = TransformElementListOption1
    / TransformElementListOption2
    / TransformElementListOption3
    / TransformElementListOption4

TransformElementListOption1
    = FROM _ SQL _ WITH _ FUNCTION _ var1:FunctionWithArgtypes _ "," _ TO _ SQL _ WITH _ FUNCTION _ var2:FunctionWithArgtypes {
        return Node{
            Name: "TransformElementListOption1",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "FunctionWithArgtypes2": var2,
            },
        }, nil
    }

TransformElementListOption2
    = TO _ SQL _ WITH _ FUNCTION _ var1:FunctionWithArgtypes _ "," _ FROM _ SQL _ WITH _ FUNCTION _ var2:FunctionWithArgtypes {
        return Node{
            Name: "TransformElementListOption2",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "FunctionWithArgtypes2": var2,
            },
        }, nil
    }

TransformElementListOption3
    = FROM _ SQL _ WITH _ FUNCTION _ var1:FunctionWithArgtypes {
        return Node{
            Name: "TransformElementListOption3",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

TransformElementListOption4
    = TO _ SQL _ WITH _ FUNCTION _ var1:FunctionWithArgtypes {
        return Node{
            Name: "TransformElementListOption4",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

DropTransformStmt
    = (DROP _ TRANSFORM _ var1:OptIfExists _ FOR _ var2:Typename _ LANGUAGE _ Name _ var3:OptDropBehavior) {
        return Node{
            Name: "DropTransformStmt",
            Props: map[string]interface{}{
                "OptIfExists1": var1,
                "Typename1": var2,
                "OptDropBehavior1": var3,
            },
        }, nil
    }

ReindexStmt
    = ReindexStmtOption1
    / ReindexStmtOption2
    / ReindexStmtOption3
    / ReindexStmtOption4

ReindexStmtOption1
    = REINDEX _ "(" _ var1:ReindexOptionList _ ")" _ var2:ReindexTargetType _ var3:QualifiedName {
        return Node{
            Name: "ReindexStmtOption1",
            Props: map[string]interface{}{
                "ReindexOptionList1": var1,
                "ReindexTargetType1": var2,
                "QualifiedName1": var3,
            },
        }, nil
    }

ReindexStmtOption2
    = REINDEX _ "(" _ var1:ReindexOptionList _ ")" _ var2:ReindexTargetMultitable _ Name {
        return Node{
            Name: "ReindexStmtOption2",
            Props: map[string]interface{}{
                "ReindexOptionList1": var1,
                "ReindexTargetMultitable1": var2,
            },
        }, nil
    }

ReindexStmtOption3
    = REINDEX _ var1:ReindexTargetType _ var2:QualifiedName {
        return Node{
            Name: "ReindexStmtOption3",
            Props: map[string]interface{}{
                "ReindexTargetType1": var1,
                "QualifiedName1": var2,
            },
        }, nil
    }

ReindexStmtOption4
    = REINDEX _ var1:ReindexTargetMultitable _ Name {
        return Node{
            Name: "ReindexStmtOption4",
            Props: map[string]interface{}{
                "ReindexTargetMultitable1": var1,
            },
        }, nil
    }

ReindexTargetType
    = INDEX
    / TABLE

ReindexTargetMultitable
    = SCHEMA
    / SYSTEM
    / DATABASE

ReindexOptionList
    = ReindexOptionElem (_ "," _ ReindexOptionElem)*

ReindexOptionElem
    = VERBOSE

AlterTblSpcStmt
    = AlterTblSpcStmtOption1
    / AlterTblSpcStmtOption2

AlterTblSpcStmtOption1
    = ALTER _ TABLESPACE _ Name _ SET _ var1:Reloptions {
        return Node{
            Name: "AlterTblSpcStmtOption1",
            Props: map[string]interface{}{
                "Reloptions1": var1,
            },
        }, nil
    }

AlterTblSpcStmtOption2
    = ALTER _ TABLESPACE _ Name _ RESET _ var1:Reloptions {
        return Node{
            Name: "AlterTblSpcStmtOption2",
            Props: map[string]interface{}{
                "Reloptions1": var1,
            },
        }, nil
    }

RenameStmt
    = RenameStmtOption1
    / RenameStmtOption2
    / RenameStmtOption3
    / RenameStmtOption4
    / RenameStmtOption5
    / RenameStmtOption6
    / RenameStmtOption7
    / RenameStmtOption8
    / RenameStmtOption9
    / RenameStmtOption10
    / RenameStmtOption11
    / RenameStmtOption12
    / RenameStmtOption13
    / RenameStmtOption14
    / RenameStmtOption15
    / RenameStmtOption16
    / RenameStmtOption17
    / RenameStmtOption18
    / RenameStmtOption19
    / RenameStmtOption20
    / RenameStmtOption21
    / RenameStmtOption22
    / RenameStmtOption23
    / RenameStmtOption24
    / RenameStmtOption25
    / RenameStmtOption26
    / RenameStmtOption27
    / RenameStmtOption28
    / RenameStmtOption29
    / RenameStmtOption30
    / RenameStmtOption31
    / RenameStmtOption32
    / RenameStmtOption33
    / RenameStmtOption34
    / RenameStmtOption35
    / RenameStmtOption36
    / RenameStmtOption37
    / RenameStmtOption38
    / RenameStmtOption39
    / RenameStmtOption40
    / RenameStmtOption41
    / RenameStmtOption42
    / RenameStmtOption43
    / RenameStmtOption44
    / RenameStmtOption45
    / RenameStmtOption46
    / RenameStmtOption47
    / RenameStmtOption48
    / RenameStmtOption49
    / RenameStmtOption50
    / RenameStmtOption51
    / RenameStmtOption52
    / RenameStmtOption53

RenameStmtOption1
    = ALTER _ FOREIGN _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption1",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption2
    = ALTER _ MATERIALIZED _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption3
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ RENAME _ CONSTRAINT _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption3",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption4
    = ALTER _ POLICY _ IF _ EXISTS _ Name _ ON _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption4",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption5
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption5",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption6
    = ALTER _ MATERIALIZED _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption6",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption7
    = ALTER _ MATERIALIZED _ VIEW _ var1:QualifiedName _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption7",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption8
    = ALTER _ FOREIGN _ TABLE _ var1:RelationExpr _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption8",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption9
    = ALTER _ TYPE _ var1:AnyName _ RENAME _ ATTRIBUTE _ Name _ TO _ Name _ var2:OptDropBehavior {
        return Node{
            Name: "RenameStmtOption9",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

RenameStmtOption10
    = ALTER _ FOREIGN _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption10",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption11
    = ALTER _ OPERATOR _ CLASS _ var1:AnyName _ USING _ AccessMethod _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption11",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption12
    = ALTER _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption12",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption13
    = ALTER _ POLICY _ Name _ ON _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption13",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption14
    = ALTER _ TRIGGER _ Name _ ON _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption14",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption15
    = ALTER _ FOREIGN _ DATA _ WRAPPER _ Name _ RENAME _ TO _ Name

RenameStmtOption16
    = ALTER _ TABLE _ var1:RelationExpr _ RENAME _ CONSTRAINT _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption16",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption17
    = ALTER _ DOMAIN _ var1:AnyName _ RENAME _ CONSTRAINT _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption17",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption18
    = ALTER _ TEXT _ SEARCH _ PARSER _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption18",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption19
    = ALTER _ TEXT _ SEARCH _ DICTIONARY _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption19",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption20
    = ALTER _ TEXT _ SEARCH _ TEMPLATE _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption20",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption21
    = ALTER _ TABLE _ var1:RelationExpr _ RENAME _ OptColumn _ Name _ TO _ Name {
        return Node{
            Name: "RenameStmtOption21",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption22
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption22",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption23
    = ALTER _ INDEX _ IF _ EXISTS _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption23",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption24
    = ALTER _ SEQUENCE _ IF _ EXISTS _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption24",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption25
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption25",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption26
    = ALTER _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption26",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption27
    = ALTER _ RULE _ Name _ ON _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption27",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption28
    = ALTER _ OptProcedural _ LANGUAGE _ Name _ RENAME _ TO _ Name

RenameStmtOption29
    = ALTER _ EVENT _ TRIGGER _ Name _ RENAME _ TO _ Name

RenameStmtOption30
    = ALTER _ MATERIALIZED _ VIEW _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption30",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption31
    = ALTER _ FOREIGN _ TABLE _ var1:RelationExpr _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption31",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption32
    = ALTER _ STATISTICS _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption32",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption33
    = ALTER _ TABLE _ var1:RelationExpr _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption33",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RenameStmtOption34
    = ALTER _ SERVER _ Name _ RENAME _ TO _ Name

RenameStmtOption35
    = ALTER _ SCHEMA _ Name _ RENAME _ TO _ Name

RenameStmtOption36
    = ALTER _ ROUTINE _ var1:FunctionWithArgtypes _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption36",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

RenameStmtOption37
    = ALTER _ PUBLICATION _ Name _ RENAME _ TO _ Name

RenameStmtOption38
    = ALTER _ PROCEDURE _ var1:FunctionWithArgtypes _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption38",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

RenameStmtOption39
    = ALTER _ AGGREGATE _ var1:AggregateWithArgtypes _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption39",
            Props: map[string]interface{}{
                "AggregateWithArgtypes1": var1,
            },
        }, nil
    }

RenameStmtOption40
    = ALTER _ SUBSCRIPTION _ Name _ RENAME _ TO _ Name

RenameStmtOption41
    = ALTER _ SEQUENCE _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption41",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption42
    = ALTER _ GROUP _ RoleId _ RENAME _ TO _ RoleId

RenameStmtOption43
    = ALTER _ INDEX _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption43",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RenameStmtOption44
    = ALTER _ ROLE _ RoleId _ RENAME _ TO _ RoleId

RenameStmtOption45
    = ALTER _ USER _ RoleId _ RENAME _ TO _ RoleId

RenameStmtOption46
    = ALTER _ TABLESPACE _ Name _ RENAME _ TO _ Name

RenameStmtOption47
    = ALTER _ FUNCTION _ var1:FunctionWithArgtypes _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption47",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

RenameStmtOption48
    = ALTER _ DOMAIN _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption48",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption49
    = ALTER _ DATABASE _ DatabaseName _ RENAME _ TO _ DatabaseName

RenameStmtOption50
    = ALTER _ CONVERSION _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption50",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption51
    = ALTER _ COLLATION _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption51",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption52
    = ALTER _ TYPE _ var1:AnyName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption52",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

RenameStmtOption53
    = ALTER _ VIEW _ var1:QualifiedName _ RENAME _ TO _ Name {
        return Node{
            Name: "RenameStmtOption53",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptColumn
    = COLUMN?

OptSetData
    = (SET _ DATA)?

AlterObjectDependsStmt
    = AlterObjectDependsStmtOption1
    / AlterObjectDependsStmtOption2
    / AlterObjectDependsStmtOption3
    / AlterObjectDependsStmtOption4
    / AlterObjectDependsStmtOption5
    / AlterObjectDependsStmtOption6

AlterObjectDependsStmtOption1
    = ALTER _ TRIGGER _ Name _ ON _ var1:QualifiedName _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectDependsStmtOption2
    = ALTER _ MATERIALIZED _ VIEW _ var1:QualifiedName _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectDependsStmtOption3
    = ALTER _ FUNCTION _ var1:FunctionWithArgtypes _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption3",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectDependsStmtOption4
    = ALTER _ PROCEDURE _ var1:FunctionWithArgtypes _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption4",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectDependsStmtOption5
    = ALTER _ ROUTINE _ var1:FunctionWithArgtypes _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption5",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectDependsStmtOption6
    = ALTER _ INDEX _ var1:QualifiedName _ DEPENDS _ ON _ EXTENSION _ Name {
        return Node{
            Name: "AlterObjectDependsStmtOption6",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmt
    = AlterObjectSchemaStmtOption1
    / AlterObjectSchemaStmtOption2
    / AlterObjectSchemaStmtOption3
    / AlterObjectSchemaStmtOption4
    / AlterObjectSchemaStmtOption5
    / AlterObjectSchemaStmtOption6
    / AlterObjectSchemaStmtOption7
    / AlterObjectSchemaStmtOption8
    / AlterObjectSchemaStmtOption9
    / AlterObjectSchemaStmtOption10
    / AlterObjectSchemaStmtOption11
    / AlterObjectSchemaStmtOption12
    / AlterObjectSchemaStmtOption13
    / AlterObjectSchemaStmtOption14
    / AlterObjectSchemaStmtOption15
    / AlterObjectSchemaStmtOption16
    / AlterObjectSchemaStmtOption17
    / AlterObjectSchemaStmtOption18
    / AlterObjectSchemaStmtOption19
    / AlterObjectSchemaStmtOption20
    / AlterObjectSchemaStmtOption21
    / AlterObjectSchemaStmtOption22
    / AlterObjectSchemaStmtOption23
    / AlterObjectSchemaStmtOption24
    / AlterObjectSchemaStmtOption25
    / AlterObjectSchemaStmtOption26
    / AlterObjectSchemaStmtOption27

AlterObjectSchemaStmtOption1
    = ALTER _ OPERATOR _ CLASS _ var1:AnyName _ USING _ AccessMethod _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption2
    = ALTER _ FOREIGN _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption2",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption3
    = ALTER _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption4
    = ALTER _ MATERIALIZED _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption4",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption5
    = ALTER _ TEXT _ SEARCH _ PARSER _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption6
    = ALTER _ VIEW _ IF _ EXISTS _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption6",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption7
    = ALTER _ SEQUENCE _ IF _ EXISTS _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption7",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption8
    = ALTER _ TEXT _ SEARCH _ TEMPLATE _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption8",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption9
    = ALTER _ TEXT _ SEARCH _ DICTIONARY _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption9",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption10
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption10",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption11
    = ALTER _ TABLE _ IF _ EXISTS _ var1:RelationExpr _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption11",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption12
    = ALTER _ MATERIALIZED _ VIEW _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption12",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption13
    = ALTER _ FOREIGN _ TABLE _ var1:RelationExpr _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption13",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption14
    = ALTER _ AGGREGATE _ var1:AggregateWithArgtypes _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption14",
            Props: map[string]interface{}{
                "AggregateWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption15
    = ALTER _ STATISTICS _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption15",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption16
    = ALTER _ TABLE _ var1:RelationExpr _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption16",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption17
    = ALTER _ ROUTINE _ var1:FunctionWithArgtypes _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption17",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption18
    = ALTER _ PROCEDURE _ var1:FunctionWithArgtypes _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption18",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption19
    = ALTER _ SEQUENCE _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption19",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption20
    = ALTER _ OPERATOR _ var1:OperatorWithArgtypes _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption20",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption21
    = ALTER _ VIEW _ var1:QualifiedName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption21",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption22
    = ALTER _ FUNCTION _ var1:FunctionWithArgtypes _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption22",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption23
    = ALTER _ EXTENSION _ Name _ SET _ SCHEMA _ Name

AlterObjectSchemaStmtOption24
    = ALTER _ DOMAIN _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption24",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption25
    = ALTER _ CONVERSION _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption25",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption26
    = ALTER _ COLLATION _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption26",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterObjectSchemaStmtOption27
    = ALTER _ TYPE _ var1:AnyName _ SET _ SCHEMA _ Name {
        return Node{
            Name: "AlterObjectSchemaStmtOption27",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterOperatorStmt
    = (ALTER _ OPERATOR _ var1:OperatorWithArgtypes _ SET _ "(" _ var2:OperatorDefList _ ")") {
        return Node{
            Name: "AlterOperatorStmt",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
                "OperatorDefList1": var2,
            },
        }, nil
    }

OperatorDefList
    = var1:OperatorDefElem (_ "," _ OperatorDefElem)* {
        return Node{
            Name: "OperatorDefList",
            Props: map[string]interface{}{
                "OperatorDefElem1": var1,
            },
        }, nil
    }

OperatorDefElem
    = OperatorDefElemOption1
    / OperatorDefElemOption2

OperatorDefElemOption1
    = var1:ColLabel _ "=" _ NONE {
        return Node{
            Name: "OperatorDefElemOption1",
            Props: map[string]interface{}{
                "ColLabel1": var1,
            },
        }, nil
    }

OperatorDefElemOption2
    = var1:ColLabel _ "=" _ var2:OperatorDefArg {
        return Node{
            Name: "OperatorDefElemOption2",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "OperatorDefArg1": var2,
            },
        }, nil
    }

OperatorDefArg
    = FuncType
    / ReservedKeyword
    / QualAllOp
    / NumericOnly
    / Sconst

AlterOwnerStmt
    = AlterOwnerStmtOption1
    / AlterOwnerStmtOption2
    / AlterOwnerStmtOption3
    / AlterOwnerStmtOption4
    / AlterOwnerStmtOption5
    / AlterOwnerStmtOption6
    / AlterOwnerStmtOption7
    / AlterOwnerStmtOption8
    / AlterOwnerStmtOption9
    / AlterOwnerStmtOption10
    / AlterOwnerStmtOption11
    / AlterOwnerStmtOption12
    / AlterOwnerStmtOption13
    / AlterOwnerStmtOption14
    / AlterOwnerStmtOption15
    / AlterOwnerStmtOption16
    / AlterOwnerStmtOption17
    / AlterOwnerStmtOption18
    / AlterOwnerStmtOption19
    / AlterOwnerStmtOption20
    / AlterOwnerStmtOption21
    / AlterOwnerStmtOption22
    / AlterOwnerStmtOption23
    / AlterOwnerStmtOption24

AlterOwnerStmtOption1
    = ALTER _ OPERATOR _ CLASS _ var1:AnyName _ USING _ AccessMethod _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption2
    = ALTER _ OPERATOR _ FAMILY _ var1:AnyName _ USING _ AccessMethod _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption3
    = ALTER _ FOREIGN _ DATA _ WRAPPER _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption3",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption4
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption5
    = ALTER _ TEXT _ SEARCH _ DICTIONARY _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption6
    = ALTER _ EVENT _ TRIGGER _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption6",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption7
    = ALTER _ OptProcedural _ LANGUAGE _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption7",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption8
    = ALTER _ LARGE _ OBJECT _ var1:NumericOnly _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption8",
            Props: map[string]interface{}{
                "NumericOnly1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption9
    = ALTER _ AGGREGATE _ var1:AggregateWithArgtypes _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption9",
            Props: map[string]interface{}{
                "AggregateWithArgtypes1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption10
    = ALTER _ OPERATOR _ var1:OperatorWithArgtypes _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption10",
            Props: map[string]interface{}{
                "OperatorWithArgtypes1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption11
    = ALTER _ FUNCTION _ var1:FunctionWithArgtypes _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption11",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption12
    = ALTER _ PROCEDURE _ var1:FunctionWithArgtypes _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption12",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption13
    = ALTER _ ROUTINE _ var1:FunctionWithArgtypes _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption13",
            Props: map[string]interface{}{
                "FunctionWithArgtypes1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption14
    = ALTER _ SCHEMA _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption14",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption15
    = ALTER _ TYPE _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption15",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption16
    = ALTER _ TABLESPACE _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption16",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption17
    = ALTER _ STATISTICS _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption17",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption18
    = ALTER _ DOMAIN _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption18",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption19
    = ALTER _ DATABASE _ DatabaseName _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption19",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption20
    = ALTER _ CONVERSION _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption20",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption21
    = ALTER _ SERVER _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption21",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption22
    = ALTER _ COLLATION _ var1:AnyName _ OWNER _ TO _ var2:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption22",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "RoleSpec1": var2,
            },
        }, nil
    }

AlterOwnerStmtOption23
    = ALTER _ PUBLICATION _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption23",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

AlterOwnerStmtOption24
    = ALTER _ SUBSCRIPTION _ Name _ OWNER _ TO _ var1:RoleSpec {
        return Node{
            Name: "AlterOwnerStmtOption24",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

CreatePublicationStmt
    = (CREATE _ PUBLICATION _ Name _ OptPublicationForTables _ var1:OptDefinition) {
        return Node{
            Name: "CreatePublicationStmt",
            Props: map[string]interface{}{
                "OptDefinition1": var1,
            },
        }, nil
    }

OptPublicationForTables
    = PublicationForTables?

PublicationForTables
    = PublicationForTablesOption1
    / PublicationForTablesOption2

PublicationForTablesOption1
    = FOR _ TABLE _ var1:RelationExprList {
        return Node{
            Name: "PublicationForTablesOption1",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
            },
        }, nil
    }

PublicationForTablesOption2
    = FOR _ ALL _ TABLES

AlterPublicationStmt
    = AlterPublicationStmtOption1
    / AlterPublicationStmtOption2
    / AlterPublicationStmtOption3
    / AlterPublicationStmtOption4

AlterPublicationStmtOption1
    = ALTER _ PUBLICATION _ Name _ ADD _ TABLE _ var1:RelationExprList {
        return Node{
            Name: "AlterPublicationStmtOption1",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
            },
        }, nil
    }

AlterPublicationStmtOption2
    = ALTER _ PUBLICATION _ Name _ SET _ TABLE _ var1:RelationExprList {
        return Node{
            Name: "AlterPublicationStmtOption2",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
            },
        }, nil
    }

AlterPublicationStmtOption3
    = ALTER _ PUBLICATION _ Name _ DROP _ TABLE _ var1:RelationExprList {
        return Node{
            Name: "AlterPublicationStmtOption3",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
            },
        }, nil
    }

AlterPublicationStmtOption4
    = ALTER _ PUBLICATION _ Name _ SET _ var1:Definition {
        return Node{
            Name: "AlterPublicationStmtOption4",
            Props: map[string]interface{}{
                "Definition1": var1,
            },
        }, nil
    }

CreateSubscriptionStmt
    = (CREATE _ SUBSCRIPTION _ Name _ CONNECTION _ Sconst _ PUBLICATION _ var1:PublicationNameList _ var2:OptDefinition) {
        return Node{
            Name: "CreateSubscriptionStmt",
            Props: map[string]interface{}{
                "PublicationNameList1": var1,
                "OptDefinition1": var2,
            },
        }, nil
    }

PublicationNameList
    = PublicationNameItem (_ "," _ PublicationNameItem)*

PublicationNameItem
    = ColLabel

AlterSubscriptionStmt
    = AlterSubscriptionStmtOption1
    / AlterSubscriptionStmtOption2
    / AlterSubscriptionStmtOption3
    / AlterSubscriptionStmtOption4
    / AlterSubscriptionStmtOption5
    / AlterSubscriptionStmtOption6

AlterSubscriptionStmtOption1
    = ALTER _ SUBSCRIPTION _ Name _ SET _ PUBLICATION _ var1:PublicationNameList _ var2:OptDefinition {
        return Node{
            Name: "AlterSubscriptionStmtOption1",
            Props: map[string]interface{}{
                "PublicationNameList1": var1,
                "OptDefinition1": var2,
            },
        }, nil
    }

AlterSubscriptionStmtOption2
    = ALTER _ SUBSCRIPTION _ Name _ REFRESH _ PUBLICATION _ var1:OptDefinition {
        return Node{
            Name: "AlterSubscriptionStmtOption2",
            Props: map[string]interface{}{
                "OptDefinition1": var1,
            },
        }, nil
    }

AlterSubscriptionStmtOption3
    = ALTER _ SUBSCRIPTION _ Name _ SET _ var1:Definition {
        return Node{
            Name: "AlterSubscriptionStmtOption3",
            Props: map[string]interface{}{
                "Definition1": var1,
            },
        }, nil
    }

AlterSubscriptionStmtOption4
    = ALTER _ SUBSCRIPTION _ Name _ CONNECTION _ Sconst

AlterSubscriptionStmtOption5
    = ALTER _ SUBSCRIPTION _ Name _ ENABLE

AlterSubscriptionStmtOption6
    = ALTER _ SUBSCRIPTION _ Name _ DISABLE

DropSubscriptionStmt
    = DropSubscriptionStmtOption1
    / DropSubscriptionStmtOption2

DropSubscriptionStmtOption1
    = DROP _ SUBSCRIPTION _ IF _ EXISTS _ Name _ var1:OptDropBehavior {
        return Node{
            Name: "DropSubscriptionStmtOption1",
            Props: map[string]interface{}{
                "OptDropBehavior1": var1,
            },
        }, nil
    }

DropSubscriptionStmtOption2
    = DROP _ SUBSCRIPTION _ Name _ var1:OptDropBehavior {
        return Node{
            Name: "DropSubscriptionStmtOption2",
            Props: map[string]interface{}{
                "OptDropBehavior1": var1,
            },
        }, nil
    }

RuleStmt
    = (CREATE _ var1:OptOrReplace _ RULE _ Name _ AS _ ON _ var2:Event _ TO _ var3:QualifiedName _ var4:WhereClause _ DO _ var5:OptInstead _ var6:RuleActionList) {
        return Node{
            Name: "RuleStmt",
            Props: map[string]interface{}{
                "OptOrReplace1": var1,
                "Event1": var2,
                "QualifiedName1": var3,
                "WhereClause1": var4,
                "OptInstead1": var5,
                "RuleActionList1": var6,
            },
        }, nil
    }

RuleActionList
    = RuleActionListOption1
    / NOTHING
    / RuleActionStmt

RuleActionListOption1
    = "(" _ var1:RuleActionMulti _ ")" {
        return Node{
            Name: "RuleActionListOption1",
            Props: map[string]interface{}{
                "RuleActionMulti1": var1,
            },
        }, nil
    }

RuleActionMulti
    = RuleActionStmtOrEmpty (_ ";" _ RuleActionStmtOrEmpty)*

RuleActionStmt
    = SelectStmt
    / InsertStmt
    / UpdateStmt
    / DeleteStmt
    / NotifyStmt

RuleActionStmtOrEmpty
    = RuleActionStmt?

Event
    = SELECT
    / UPDATE
    / DELETE
    / INSERT

OptInstead
    = (INSTEAD
    / ALSO)?

NotifyStmt
    = (NOTIFY _ var1:ColId _ var2:NotifyPayload) {
        return Node{
            Name: "NotifyStmt",
            Props: map[string]interface{}{
                "ColId1": var1,
                "NotifyPayload1": var2,
            },
        }, nil
    }

NotifyPayload
    = ("," _ Sconst)?

ListenStmt
    = (LISTEN _ var1:ColId) {
        return Node{
            Name: "ListenStmt",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

UnlistenStmt
    = UnlistenStmtOption1
    / UnlistenStmtOption2

UnlistenStmtOption1
    = UNLISTEN _ var1:ColId {
        return Node{
            Name: "UnlistenStmtOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

UnlistenStmtOption2
    = UNLISTEN _ "*"

TransactionStmt
    = TransactionStmtOption1
    / TransactionStmtOption2
    / TransactionStmtOption3
    / TransactionStmtOption4
    / TransactionStmtOption5
    / TransactionStmtOption6
    / TransactionStmtOption7
    / TransactionStmtOption8
    / TransactionStmtOption9
    / TransactionStmtOption10
    / TransactionStmtOption11
    / TransactionStmtOption12
    / TransactionStmtOption13
    / TransactionStmtOption14

TransactionStmtOption1
    = ROLLBACK _ var1:OptTransaction _ TO _ SAVEPOINT _ var2:ColId {
        return Node{
            Name: "TransactionStmtOption1",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
                "ColId1": var2,
            },
        }, nil
    }

TransactionStmtOption2
    = ROLLBACK _ var1:OptTransaction _ TO _ var2:ColId {
        return Node{
            Name: "TransactionStmtOption2",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
                "ColId1": var2,
            },
        }, nil
    }

TransactionStmtOption3
    = BEGIN _ var1:OptTransaction _ TransactionModeListOrEmpty {
        return Node{
            Name: "TransactionStmtOption3",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
            },
        }, nil
    }

TransactionStmtOption4
    = START _ TRANSACTION _ TransactionModeListOrEmpty

TransactionStmtOption5
    = COMMIT _ PREPARED _ Sconst

TransactionStmtOption6
    = PREPARE _ TRANSACTION _ Sconst

TransactionStmtOption7
    = RELEASE _ SAVEPOINT _ var1:ColId {
        return Node{
            Name: "TransactionStmtOption7",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

TransactionStmtOption8
    = ROLLBACK _ PREPARED _ Sconst

TransactionStmtOption9
    = RELEASE _ var1:ColId {
        return Node{
            Name: "TransactionStmtOption9",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

TransactionStmtOption10
    = SAVEPOINT _ var1:ColId {
        return Node{
            Name: "TransactionStmtOption10",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

TransactionStmtOption11
    = ROLLBACK _ var1:OptTransaction {
        return Node{
            Name: "TransactionStmtOption11",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
            },
        }, nil
    }

TransactionStmtOption12
    = END _ var1:OptTransaction {
        return Node{
            Name: "TransactionStmtOption12",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
            },
        }, nil
    }

TransactionStmtOption13
    = COMMIT _ var1:OptTransaction {
        return Node{
            Name: "TransactionStmtOption13",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
            },
        }, nil
    }

TransactionStmtOption14
    = ABORT _ var1:OptTransaction {
        return Node{
            Name: "TransactionStmtOption14",
            Props: map[string]interface{}{
                "OptTransaction1": var1,
            },
        }, nil
    }

OptTransaction
    = (WORK
    / TRANSACTION)?

TransactionModeItem
    = TransactionModeItemOption1
    / TransactionModeItemOption2
    / TransactionModeItemOption3
    / TransactionModeItemOption4
    / DEFERRABLE

TransactionModeItemOption1
    = ISOLATION _ LEVEL _ var1:IsoLevel {
        return Node{
            Name: "TransactionModeItemOption1",
            Props: map[string]interface{}{
                "IsoLevel1": var1,
            },
        }, nil
    }

TransactionModeItemOption2
    = READ _ ONLY

TransactionModeItemOption3
    = READ _ WRITE

TransactionModeItemOption4
    = NOT _ DEFERRABLE

TransactionModeList
    = var1:TransactionModeItem ((_ "," _ TransactionModeItem) / (_ TransactionModeItem))* {
        return Node{
            Name: "TransactionModeList",
            Props: map[string]interface{}{
                "TransactionModeItem1": var1,
            },
        }, nil
    }

TransactionModeListOrEmpty
    = TransactionModeList?

ViewStmt
    = ViewStmtOption1
    / ViewStmtOption2
    / ViewStmtOption3
    / ViewStmtOption4

ViewStmtOption1
    = CREATE _ OR _ REPLACE _ var1:OptTemp _ RECURSIVE _ VIEW _ var2:QualifiedName _ "(" _ var3:ColumnList _ ")" _ var4:OptReloptions _ AS _ var5:SelectStmt _ var6:OptCheckOption {
        return Node{
            Name: "ViewStmtOption1",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "ColumnList1": var3,
                "OptReloptions1": var4,
                "SelectStmt1": var5,
                "OptCheckOption1": var6,
            },
        }, nil
    }

ViewStmtOption2
    = CREATE _ var1:OptTemp _ RECURSIVE _ VIEW _ var2:QualifiedName _ "(" _ var3:ColumnList _ ")" _ var4:OptReloptions _ AS _ var5:SelectStmt _ var6:OptCheckOption {
        return Node{
            Name: "ViewStmtOption2",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "ColumnList1": var3,
                "OptReloptions1": var4,
                "SelectStmt1": var5,
                "OptCheckOption1": var6,
            },
        }, nil
    }

ViewStmtOption3
    = CREATE _ OR _ REPLACE _ var1:OptTemp _ VIEW _ var2:QualifiedName _ var3:OptColumnList _ var4:OptReloptions _ AS _ var5:SelectStmt _ var6:OptCheckOption {
        return Node{
            Name: "ViewStmtOption3",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "OptColumnList1": var3,
                "OptReloptions1": var4,
                "SelectStmt1": var5,
                "OptCheckOption1": var6,
            },
        }, nil
    }

ViewStmtOption4
    = CREATE _ var1:OptTemp _ VIEW _ var2:QualifiedName _ var3:OptColumnList _ var4:OptReloptions _ AS _ var5:SelectStmt _ var6:OptCheckOption {
        return Node{
            Name: "ViewStmtOption4",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "QualifiedName1": var2,
                "OptColumnList1": var3,
                "OptReloptions1": var4,
                "SelectStmt1": var5,
                "OptCheckOption1": var6,
            },
        }, nil
    }

OptCheckOption
    = ((WITH _ CASCADED _ CHECK _ OPTION)
    / (WITH _ LOCAL _ CHECK _ OPTION)
    / (WITH _ CHECK _ OPTION))?

LoadStmt
    = (LOAD _ FileName)

CreatedbStmt
    = (CREATE _ DATABASE _ DatabaseName _ var1:OptWith _ CreatedbOptList) {
        return Node{
            Name: "CreatedbStmt",
            Props: map[string]interface{}{
                "OptWith1": var1,
            },
        }, nil
    }

CreatedbOptList
    = CreatedbOptItems?

CreatedbOptItems
    = var1:CreatedbOptItem (_ CreatedbOptItem)* {
        return Node{
            Name: "CreatedbOptItems",
            Props: map[string]interface{}{
                "CreatedbOptItem1": var1,
            },
        }, nil
    }

CreatedbOptItem
    = CreatedbOptItemOption1
    / CreatedbOptItemOption2
    / CreatedbOptItemOption3

CreatedbOptItemOption1
    = var1:CreatedbOptName _ OptEqual _ var2:SignedIconst {
        return Node{
            Name: "CreatedbOptItemOption1",
            Props: map[string]interface{}{
                "CreatedbOptName1": var1,
                "SignedIconst1": var2,
            },
        }, nil
    }

CreatedbOptItemOption2
    = var1:CreatedbOptName _ OptEqual _ var2:OptBooleanOrString {
        return Node{
            Name: "CreatedbOptItemOption2",
            Props: map[string]interface{}{
                "CreatedbOptName1": var1,
                "OptBooleanOrString1": var2,
            },
        }, nil
    }

CreatedbOptItemOption3
    = var1:CreatedbOptName _ OptEqual _ DEFAULT {
        return Node{
            Name: "CreatedbOptItemOption3",
            Props: map[string]interface{}{
                "CreatedbOptName1": var1,
            },
        }, nil
    }

CreatedbOptName
    = (CONNECTION _ LIMIT)
    / IDENT
    / ENCODING
    / LOCATION
    / OWNER
    / TABLESPACE
    / TEMPLATE

OptEqual
    = "="?

AlterDatabaseStmt
    = (ALTER _ DATABASE _ DatabaseName _ SET _ TABLESPACE _ Name)
    / (ALTER _ DATABASE _ DatabaseName _ WITH _ CreatedbOptList)
    / (ALTER _ DATABASE _ DatabaseName _ CreatedbOptList)

AlterDatabaseSetStmt
    = (ALTER _ DATABASE _ DatabaseName _ var1:SetResetClause) {
        return Node{
            Name: "AlterDatabaseSetStmt",
            Props: map[string]interface{}{
                "SetResetClause1": var1,
            },
        }, nil
    }

DropdbStmt
    = (DROP _ DATABASE _ IF _ EXISTS _ DatabaseName)
    / (DROP _ DATABASE _ DatabaseName)

AlterCollationStmt
    = (ALTER _ COLLATION _ var1:AnyName _ REFRESH _ VERSION) {
        return Node{
            Name: "AlterCollationStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterSystemStmt
    = AlterSystemStmtOption1
    / AlterSystemStmtOption2

AlterSystemStmtOption1
    = ALTER _ SYSTEM _ SET _ var1:GenericSet {
        return Node{
            Name: "AlterSystemStmtOption1",
            Props: map[string]interface{}{
                "GenericSet1": var1,
            },
        }, nil
    }

AlterSystemStmtOption2
    = ALTER _ SYSTEM _ RESET _ var1:GenericReset {
        return Node{
            Name: "AlterSystemStmtOption2",
            Props: map[string]interface{}{
                "GenericReset1": var1,
            },
        }, nil
    }

CreateDomainStmt
    = (CREATE _ DOMAIN _ var1:AnyName _ OptAs _ var2:Typename _ var3:ColQualList) {
        return Node{
            Name: "CreateDomainStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Typename1": var2,
                "ColQualList1": var3,
            },
        }, nil
    }

AlterDomainStmt
    = AlterDomainStmtOption1
    / AlterDomainStmtOption2
    / AlterDomainStmtOption3
    / AlterDomainStmtOption4
    / AlterDomainStmtOption5
    / AlterDomainStmtOption6
    / AlterDomainStmtOption7

AlterDomainStmtOption1
    = ALTER _ DOMAIN _ var1:AnyName _ DROP _ CONSTRAINT _ IF _ EXISTS _ Name _ var2:OptDropBehavior {
        return Node{
            Name: "AlterDomainStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterDomainStmtOption2
    = ALTER _ DOMAIN _ var1:AnyName _ DROP _ CONSTRAINT _ Name _ var2:OptDropBehavior {
        return Node{
            Name: "AlterDomainStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "OptDropBehavior1": var2,
            },
        }, nil
    }

AlterDomainStmtOption3
    = ALTER _ DOMAIN _ var1:AnyName _ VALIDATE _ CONSTRAINT _ Name {
        return Node{
            Name: "AlterDomainStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterDomainStmtOption4
    = ALTER _ DOMAIN _ var1:AnyName _ DROP _ NOT _ NULL {
        return Node{
            Name: "AlterDomainStmtOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterDomainStmtOption5
    = ALTER _ DOMAIN _ var1:AnyName _ SET _ NOT _ NULL {
        return Node{
            Name: "AlterDomainStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AlterDomainStmtOption6
    = ALTER _ DOMAIN _ var1:AnyName _ ADD _ var2:TableConstraint {
        return Node{
            Name: "AlterDomainStmtOption6",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "TableConstraint1": var2,
            },
        }, nil
    }

AlterDomainStmtOption7
    = ALTER _ DOMAIN _ var1:AnyName _ var2:AlterColumnDefault {
        return Node{
            Name: "AlterDomainStmtOption7",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AlterColumnDefault1": var2,
            },
        }, nil
    }

OptAs
    = AS?

AlterTSDictionaryStmt
    = (ALTER _ TEXT _ SEARCH _ DICTIONARY _ var1:AnyName _ var2:Definition) {
        return Node{
            Name: "AlterTSDictionaryStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "Definition1": var2,
            },
        }, nil
    }

AlterTSConfigurationStmt
    = AlterTSConfigurationStmtOption1
    / AlterTSConfigurationStmtOption2
    / AlterTSConfigurationStmtOption3
    / AlterTSConfigurationStmtOption4
    / AlterTSConfigurationStmtOption5
    / AlterTSConfigurationStmtOption6

AlterTSConfigurationStmtOption1
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ ALTER _ MAPPING _ FOR _ var2:NameList _ REPLACE _ var3:AnyName _ var4:AnyWith _ var5:AnyName {
        return Node{
            Name: "AlterTSConfigurationStmtOption1",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "NameList1": var2,
                "AnyName2": var3,
                "AnyWith1": var4,
                "AnyName3": var5,
            },
        }, nil
    }

AlterTSConfigurationStmtOption2
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ ADD _ MAPPING _ FOR _ var2:NameList _ var3:AnyWith _ var4:AnyNameList {
        return Node{
            Name: "AlterTSConfigurationStmtOption2",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "NameList1": var2,
                "AnyWith1": var3,
                "AnyNameList1": var4,
            },
        }, nil
    }

AlterTSConfigurationStmtOption3
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ ALTER _ MAPPING _ FOR _ var2:NameList _ var3:AnyWith _ var4:AnyNameList {
        return Node{
            Name: "AlterTSConfigurationStmtOption3",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "NameList1": var2,
                "AnyWith1": var3,
                "AnyNameList1": var4,
            },
        }, nil
    }

AlterTSConfigurationStmtOption4
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ ALTER _ MAPPING _ REPLACE _ var2:AnyName _ var3:AnyWith _ var4:AnyName {
        return Node{
            Name: "AlterTSConfigurationStmtOption4",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AnyName2": var2,
                "AnyWith1": var3,
                "AnyName3": var4,
            },
        }, nil
    }

AlterTSConfigurationStmtOption5
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ DROP _ MAPPING _ IF _ EXISTS _ FOR _ var2:NameList {
        return Node{
            Name: "AlterTSConfigurationStmtOption5",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "NameList1": var2,
            },
        }, nil
    }

AlterTSConfigurationStmtOption6
    = ALTER _ TEXT _ SEARCH _ CONFIGURATION _ var1:AnyName _ DROP _ MAPPING _ FOR _ var2:NameList {
        return Node{
            Name: "AlterTSConfigurationStmtOption6",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "NameList1": var2,
            },
        }, nil
    }

AnyWith
    = WITH

CreateConversionStmt
    = (CREATE _ OptDefault _ CONVERSION _ var1:AnyName _ FOR _ Sconst _ TO _ Sconst _ FROM _ var2:AnyName) {
        return Node{
            Name: "CreateConversionStmt",
            Props: map[string]interface{}{
                "AnyName1": var1,
                "AnyName2": var2,
            },
        }, nil
    }

ClusterStmt
    = ClusterStmtOption1
    / ClusterStmtOption2
    / ClusterStmtOption3

ClusterStmtOption1
    = CLUSTER _ OptVerbose _ IndexName _ ON _ var1:QualifiedName {
        return Node{
            Name: "ClusterStmtOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

ClusterStmtOption2
    = CLUSTER _ OptVerbose _ var1:QualifiedName _ var2:ClusterIndexSpecification {
        return Node{
            Name: "ClusterStmtOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "ClusterIndexSpecification1": var2,
            },
        }, nil
    }

ClusterStmtOption3
    = CLUSTER _ OptVerbose

ClusterIndexSpecification
    = (USING _ IndexName)?

VacuumStmt
    = VacuumStmtOption1
    / VacuumStmtOption2

VacuumStmtOption1
    = VACUUM _ OptFull _ OptFreeze _ OptVerbose _ OptAnalyze _ OptVacuumRelationList

VacuumStmtOption2
    = VACUUM _ "(" _ var1:VacuumOptionList _ ")" _ OptVacuumRelationList {
        return Node{
            Name: "VacuumStmtOption2",
            Props: map[string]interface{}{
                "VacuumOptionList1": var1,
            },
        }, nil
    }

VacuumOptionList
    = var1:VacuumOptionElem (_ "," _ VacuumOptionElem)* {
        return Node{
            Name: "VacuumOptionList",
            Props: map[string]interface{}{
                "VacuumOptionElem1": var1,
            },
        }, nil
    }

VacuumOptionElem
    = AnalyzeKeyword
    / VERBOSE
    / FREEZE
    / FULL
    / IDENT

AnalyzeStmt
    = AnalyzeStmtOption1
    / AnalyzeStmtOption2

AnalyzeStmtOption1
    = var1:AnalyzeKeyword _ "(" _ var2:AnalyzeOptionList _ ")" _ OptVacuumRelationList {
        return Node{
            Name: "AnalyzeStmtOption1",
            Props: map[string]interface{}{
                "AnalyzeKeyword1": var1,
                "AnalyzeOptionList1": var2,
            },
        }, nil
    }

AnalyzeStmtOption2
    = var1:AnalyzeKeyword _ OptVerbose _ OptVacuumRelationList {
        return Node{
            Name: "AnalyzeStmtOption2",
            Props: map[string]interface{}{
                "AnalyzeKeyword1": var1,
            },
        }, nil
    }

AnalyzeOptionList
    = AnalyzeOptionElem (_ "," _ AnalyzeOptionElem)*

AnalyzeOptionElem
    = VERBOSE

AnalyzeKeyword
    = ANALYZE
    / ANALYSE

OptAnalyze
    = AnalyzeKeyword?

OptVerbose
    = VERBOSE?

OptFull
    = FULL?

OptFreeze
    = FREEZE?

OptNameList
    = ("(" _ NameList _ ")")?

VacuumRelation
    = (var1:QualifiedName _ var2:OptNameList) {
        return Node{
            Name: "VacuumRelation",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "OptNameList1": var2,
            },
        }, nil
    }

VacuumRelationList
    = var1:VacuumRelation (_ "," _ VacuumRelation)* {
        return Node{
            Name: "VacuumRelationList",
            Props: map[string]interface{}{
                "VacuumRelation1": var1,
            },
        }, nil
    }

OptVacuumRelationList
    = VacuumRelationList?

ExplainStmt
    = ExplainStmtOption1
    / ExplainStmtOption2
    / ExplainStmtOption3
    / ExplainStmtOption4

ExplainStmtOption1
    = EXPLAIN _ "(" _ var1:ExplainOptionList _ ")" _ var2:ExplainableStmt {
        return Node{
            Name: "ExplainStmtOption1",
            Props: map[string]interface{}{
                "ExplainOptionList1": var1,
                "ExplainableStmt1": var2,
            },
        }, nil
    }

ExplainStmtOption2
    = EXPLAIN _ var1:AnalyzeKeyword _ OptVerbose _ var2:ExplainableStmt {
        return Node{
            Name: "ExplainStmtOption2",
            Props: map[string]interface{}{
                "AnalyzeKeyword1": var1,
                "ExplainableStmt1": var2,
            },
        }, nil
    }

ExplainStmtOption3
    = EXPLAIN _ VERBOSE _ var1:ExplainableStmt {
        return Node{
            Name: "ExplainStmtOption3",
            Props: map[string]interface{}{
                "ExplainableStmt1": var1,
            },
        }, nil
    }

ExplainStmtOption4
    = EXPLAIN _ var1:ExplainableStmt {
        return Node{
            Name: "ExplainStmtOption4",
            Props: map[string]interface{}{
                "ExplainableStmt1": var1,
            },
        }, nil
    }

ExplainableStmt
    = SelectStmt
    / InsertStmt
    / UpdateStmt
    / DeleteStmt
    / DeclareCursorStmt
    / CreateAsStmt
    / CreateMatViewStmt
    / RefreshMatViewStmt
    / ExecuteStmt

ExplainOptionList
    = var1:ExplainOptionElem (_ "," _ ExplainOptionElem)* {
        return Node{
            Name: "ExplainOptionList",
            Props: map[string]interface{}{
                "ExplainOptionElem1": var1,
            },
        }, nil
    }

ExplainOptionElem
    = (var1:ExplainOptionName _ var2:ExplainOptionArg) {
        return Node{
            Name: "ExplainOptionElem",
            Props: map[string]interface{}{
                "ExplainOptionName1": var1,
                "ExplainOptionArg1": var2,
            },
        }, nil
    }

ExplainOptionName
    = NonReservedWord
    / AnalyzeKeyword

ExplainOptionArg
    = (OptBooleanOrString
    / NumericOnly)?

PrepareStmt
    = (PREPARE _ Name _ var1:PrepTypeClause _ AS _ var2:PreparableStmt) {
        return Node{
            Name: "PrepareStmt",
            Props: map[string]interface{}{
                "PrepTypeClause1": var1,
                "PreparableStmt1": var2,
            },
        }, nil
    }

PrepTypeClause
    = ("(" _ TypeList _ ")")?

PreparableStmt
    = SelectStmt
    / InsertStmt
    / UpdateStmt
    / DeleteStmt

ExecuteStmt
    = ExecuteStmtOption1
    / ExecuteStmtOption2

ExecuteStmtOption1
    = CREATE _ var1:OptTemp _ TABLE _ var2:CreateAsTarget _ AS _ EXECUTE _ Name _ var3:ExecuteParamClause _ var4:OptWithData {
        return Node{
            Name: "ExecuteStmtOption1",
            Props: map[string]interface{}{
                "OptTemp1": var1,
                "CreateAsTarget1": var2,
                "ExecuteParamClause1": var3,
                "OptWithData1": var4,
            },
        }, nil
    }

ExecuteStmtOption2
    = EXECUTE _ Name _ var1:ExecuteParamClause {
        return Node{
            Name: "ExecuteStmtOption2",
            Props: map[string]interface{}{
                "ExecuteParamClause1": var1,
            },
        }, nil
    }

ExecuteParamClause
    = ("(" _ ExprList _ ")")?

DeallocateStmt
    = (DEALLOCATE _ PREPARE _ Name)
    / (DEALLOCATE _ PREPARE _ ALL)
    / (DEALLOCATE _ Name)
    / (DEALLOCATE _ ALL)

InsertStmt
    = (OptWithClause _ INSERT _ INTO _ var1:InsertTarget _ var2:InsertRest _ var3:OptOnConflict _ var4:ReturningClause) {
        return Node{
            Name: "InsertStmt",
            Props: map[string]interface{}{
                "InsertTarget1": var1,
                "InsertRest1": var2,
                "OptOnConflict1": var3,
                "ReturningClause1": var4,
            },
        }, nil
    }

InsertTarget
    = InsertTargetOption1
    / QualifiedName

InsertTargetOption1
    = var1:QualifiedName _ AS _ var2:ColId {
        return Node{
            Name: "InsertTargetOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
                "ColId1": var2,
            },
        }, nil
    }

InsertRest
    = InsertRestOption1
    / InsertRestOption2
    / InsertRestOption3
    / InsertRestOption4
    / SelectStmt

InsertRestOption1
    = "(" _ var1:InsertColumnList _ ")" _ OVERRIDING _ var2:OverrideKind _ VALUE _ var3:SelectStmt {
        return Node{
            Name: "InsertRestOption1",
            Props: map[string]interface{}{
                "InsertColumnList1": var1,
                "OverrideKind1": var2,
                "SelectStmt1": var3,
            },
        }, nil
    }

InsertRestOption2
    = OVERRIDING _ var1:OverrideKind _ VALUE _ var2:SelectStmt {
        return Node{
            Name: "InsertRestOption2",
            Props: map[string]interface{}{
                "OverrideKind1": var1,
                "SelectStmt1": var2,
            },
        }, nil
    }

InsertRestOption3
    = "(" _ var1:InsertColumnList _ ")" _ var2:SelectStmt {
        return Node{
            Name: "InsertRestOption3",
            Props: map[string]interface{}{
                "InsertColumnList1": var1,
                "SelectStmt1": var2,
            },
        }, nil
    }

InsertRestOption4
    = DEFAULT _ VALUES

OverrideKind
    = USER
    / SYSTEM

InsertColumnList
    = var1:InsertColumnItem (_ "," _ InsertColumnItem)* {
        return Node{
            Name: "InsertColumnList",
            Props: map[string]interface{}{
                "InsertColumnItem1": var1,
            },
        }, nil
    }

InsertColumnItem
    = (var1:ColId _ var2:OptIndirection) {
        return Node{
            Name: "InsertColumnItem",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptIndirection1": var2,
            },
        }, nil
    }

OptOnConflict
    = (OptOnConflictOption1
    / OptOnConflictOption2)?

OptOnConflictOption1
    = ON _ CONFLICT _ var1:OptConfExpr _ DO _ UPDATE _ SET _ var2:SetClauseList _ var3:WhereClause {
        return Node{
            Name: "OptOnConflictOption1",
            Props: map[string]interface{}{
                "OptConfExpr1": var1,
                "SetClauseList1": var2,
                "WhereClause1": var3,
            },
        }, nil
    }

OptOnConflictOption2
    = ON _ CONFLICT _ var1:OptConfExpr _ DO _ NOTHING {
        return Node{
            Name: "OptOnConflictOption2",
            Props: map[string]interface{}{
                "OptConfExpr1": var1,
            },
        }, nil
    }

OptConfExpr
    = (OptConfExprOption1
    / OptConfExprOption2)?

OptConfExprOption1
    = "(" _ var1:IndexParams _ ")" _ var2:WhereClause {
        return Node{
            Name: "OptConfExprOption1",
            Props: map[string]interface{}{
                "IndexParams1": var1,
                "WhereClause1": var2,
            },
        }, nil
    }

OptConfExprOption2
    = ON _ CONSTRAINT _ Name

ReturningClause
    = (RETURNING _ TargetList)?

DeleteStmt
    = (OptWithClause _ DELETE _ FROM _ var1:RelationExprOptAlias _ var2:UsingClause _ var3:WhereOrCurrentClause _ var4:ReturningClause) {
        return Node{
            Name: "DeleteStmt",
            Props: map[string]interface{}{
                "RelationExprOptAlias1": var1,
                "UsingClause1": var2,
                "WhereOrCurrentClause1": var3,
                "ReturningClause1": var4,
            },
        }, nil
    }

UsingClause
    = (USING _ FromList)?

LockStmt
    = (LOCK _ OptTable _ var1:RelationExprList _ var2:OptLock _ OptNowait) {
        return Node{
            Name: "LockStmt",
            Props: map[string]interface{}{
                "RelationExprList1": var1,
                "OptLock1": var2,
            },
        }, nil
    }

OptLock
    = (IN _ LockType _ MODE)?

LockType
    = (SHARE _ UPDATE _ EXCLUSIVE)
    / (SHARE _ ROW _ EXCLUSIVE)
    / (ACCESS _ SHARE)
    / (ROW _ SHARE)
    / (ROW _ EXCLUSIVE)
    / (ACCESS _ EXCLUSIVE)
    / SHARE
    / EXCLUSIVE

OptNowait
    = NOWAIT?

OptNowaitOrSkip
    = ((SKIP _ LOCKED)
    / NOWAIT)?

UpdateStmt
    = (OptWithClause _ UPDATE _ var1:RelationExprOptAlias _ SET _ var2:SetClauseList _ var3:FromClause _ var4:WhereOrCurrentClause _ var5:ReturningClause) {
        return Node{
            Name: "UpdateStmt",
            Props: map[string]interface{}{
                "RelationExprOptAlias1": var1,
                "SetClauseList1": var2,
                "FromClause1": var3,
                "WhereOrCurrentClause1": var4,
                "ReturningClause1": var5,
            },
        }, nil
    }

SetClauseList
    = var1:SetClause (_ "," _ SetClause)* {
        return Node{
            Name: "SetClauseList",
            Props: map[string]interface{}{
                "SetClause1": var1,
            },
        }, nil
    }

SetClause
    = SetClauseOption1
    / SetClauseOption2

SetClauseOption1
    = "(" _ var1:SetTargetList _ ")" _ "=" _ var2:AExpr {
        return Node{
            Name: "SetClauseOption1",
            Props: map[string]interface{}{
                "SetTargetList1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

SetClauseOption2
    = var1:SetTarget _ "=" _ var2:AExpr {
        return Node{
            Name: "SetClauseOption2",
            Props: map[string]interface{}{
                "SetTarget1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

SetTarget
    = (var1:ColId _ var2:OptIndirection) {
        return Node{
            Name: "SetTarget",
            Props: map[string]interface{}{
                "ColId1": var1,
                "OptIndirection1": var2,
            },
        }, nil
    }

SetTargetList
    = var1:SetTarget (_ "," _ SetTarget)* {
        return Node{
            Name: "SetTargetList",
            Props: map[string]interface{}{
                "SetTarget1": var1,
            },
        }, nil
    }

DeclareCursorStmt
    = (DECLARE _ CursorName _ var1:CursorOptions _ CURSOR _ var2:OptHold _ FOR _ var3:SelectStmt) {
        return Node{
            Name: "DeclareCursorStmt",
            Props: map[string]interface{}{
                "CursorOptions1": var1,
                "OptHold1": var2,
                "SelectStmt1": var3,
            },
        }, nil
    }

CursorName
    = Name

CursorOptions
    = ((_ NO _ SCROLL)
    / (_ SCROLL)
    / (_ BINARY)
    / (_ INSENSITIVE))*

OptHold
    = ((WITH _ HOLD)
    / (WITHOUT _ HOLD))?

SelectStmt
    = SelectNoParens
    / SelectWithParens

SelectWithParens
    = SelectWithParensOption1
    / SelectWithParensOption2

SelectWithParensOption1
    = "(" _ var1:SelectNoParens _ ")" {
        return Node{
            Name: "SelectWithParensOption1",
            Props: map[string]interface{}{
                "SelectNoParens1": var1,
            },
        }, nil
    }

SelectWithParensOption2
    = "(" _ var1:SelectWithParens _ ")" {
        return Node{
            Name: "SelectWithParensOption2",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

SelectNoParens
    = SelectNoParensOption1
    / SelectNoParensOption2
    / SelectNoParensOption3
    / SelectNoParensOption4
    / SelectNoParensOption5
    / SelectNoParensOption6
    / SelectNoParensOption7
    / SelectNoParensOption8
    / SelectNoParensOption9
    / SelectNoParensOption10
    / SimpleSelect

SelectNoParensOption1
    = var1:WithClause _ var2:SelectClause _ OptSortClause _ var3:ForLockingClause _ OptSelectLimit {
        return Node{
            Name: "SelectNoParensOption1",
            Props: map[string]interface{}{
                "WithClause1": var1,
                "SelectClause1": var2,
                "ForLockingClause1": var3,
            },
        }, nil
    }

SelectNoParensOption2
    = var1:WithClause _ var2:SelectClause _ OptSortClause _ var3:SelectLimit _ OptForLockingClause {
        return Node{
            Name: "SelectNoParensOption2",
            Props: map[string]interface{}{
                "WithClause1": var1,
                "SelectClause1": var2,
                "SelectLimit1": var3,
            },
        }, nil
    }

SelectNoParensOption3
    = var1:SelectClause _ OptSortClause _ var2:SelectLimit _ OptForLockingClause {
        return Node{
            Name: "SelectNoParensOption3",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "SelectLimit1": var2,
            },
        }, nil
    }

SelectNoParensOption4
    = var1:SelectClause _ UNION _ var2:AllOrDistinct _ var3:SelectClause {
        return Node{
            Name: "SelectNoParensOption4",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "AllOrDistinct1": var2,
                "SelectClause2": var3,
            },
        }, nil
    }

SelectNoParensOption5
    = var1:SelectClause _ INTERSECT _ var2:AllOrDistinct _ var3:SelectClause {
        return Node{
            Name: "SelectNoParensOption5",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "AllOrDistinct1": var2,
                "SelectClause2": var3,
            },
        }, nil
    }

SelectNoParensOption6
    = var1:SelectClause _ OptSortClause _ var2:ForLockingClause _ OptSelectLimit {
        return Node{
            Name: "SelectNoParensOption6",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "ForLockingClause1": var2,
            },
        }, nil
    }

SelectNoParensOption7
    = var1:SelectClause _ EXCEPT _ var2:AllOrDistinct _ var3:SelectClause {
        return Node{
            Name: "SelectNoParensOption7",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "AllOrDistinct1": var2,
                "SelectClause2": var3,
            },
        }, nil
    }

SelectNoParensOption8
    = var1:WithClause _ var2:SelectClause _ var3:SortClause {
        return Node{
            Name: "SelectNoParensOption8",
            Props: map[string]interface{}{
                "WithClause1": var1,
                "SelectClause1": var2,
                "SortClause1": var3,
            },
        }, nil
    }

SelectNoParensOption9
    = var1:WithClause _ var2:SelectClause {
        return Node{
            Name: "SelectNoParensOption9",
            Props: map[string]interface{}{
                "WithClause1": var1,
                "SelectClause1": var2,
            },
        }, nil
    }

SelectNoParensOption10
    = var1:SelectClause _ var2:SortClause {
        return Node{
            Name: "SelectNoParensOption10",
            Props: map[string]interface{}{
                "SelectClause1": var1,
                "SortClause1": var2,
            },
        }, nil
    }

SelectClause
    = SelectClauseOption1
    / SelectClauseOption2
    / SelectClauseOption3
    / SelectClauseSelfRefSplit

SelectClauseOption1
    = SelectClauseSelfRefSplit _ UNION _ var1:AllOrDistinct _ SelectClauseSelfRefSplit {
        return Node{
            Name: "SelectClauseOption1",
            Props: map[string]interface{}{
                "AllOrDistinct1": var1,
            },
        }, nil
    }

SelectClauseOption2
    = SelectClauseSelfRefSplit _ INTERSECT _ var1:AllOrDistinct _ SelectClauseSelfRefSplit {
        return Node{
            Name: "SelectClauseOption2",
            Props: map[string]interface{}{
                "AllOrDistinct1": var1,
            },
        }, nil
    }

SelectClauseOption3
    = SelectClauseSelfRefSplit _ EXCEPT _ var1:AllOrDistinct _ SelectClauseSelfRefSplit {
        return Node{
            Name: "SelectClauseOption3",
            Props: map[string]interface{}{
                "AllOrDistinct1": var1,
            },
        }, nil
    }

SelectClauseSelfRefSplit
    = SelectWithParens
    / SimpleSelect

SimpleSelect
    = SimpleSelectOption1
    / SimpleSelectOption2
    / SimpleSelectOption3
    / ValuesClause

SimpleSelectOption1
    = SELECT _ OptAllClause _ OptTargetList _ var1:IntoClause _ var2:FromClause _ var3:WhereClause _ var4:GroupClause _ var5:HavingClause _ var6:WindowClause {
        return Node{
            Name: "SimpleSelectOption1",
            Props: map[string]interface{}{
                "IntoClause1": var1,
                "FromClause1": var2,
                "WhereClause1": var3,
                "GroupClause1": var4,
                "HavingClause1": var5,
                "WindowClause1": var6,
            },
        }, nil
    }

SimpleSelectOption2
    = SELECT _ var1:DistinctClause _ var2:TargetList _ var3:IntoClause _ var4:FromClause _ var5:WhereClause _ var6:GroupClause _ var7:HavingClause _ var8:WindowClause {
        return Node{
            Name: "SimpleSelectOption2",
            Props: map[string]interface{}{
                "DistinctClause1": var1,
                "TargetList1": var2,
                "IntoClause1": var3,
                "FromClause1": var4,
                "WhereClause1": var5,
                "GroupClause1": var6,
                "HavingClause1": var7,
                "WindowClause1": var8,
            },
        }, nil
    }

SimpleSelectOption3
    = TABLE _ var1:RelationExpr {
        return Node{
            Name: "SimpleSelectOption3",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

SelectClausee
    = SelectWithParens

WithClause
    = WithClauseOption1
    / WithClauseOption2

WithClauseOption1
    = WITH _ RECURSIVE _ var1:CteList {
        return Node{
            Name: "WithClauseOption1",
            Props: map[string]interface{}{
                "CteList1": var1,
            },
        }, nil
    }

WithClauseOption2
    = WITH _ var1:CteList {
        return Node{
            Name: "WithClauseOption2",
            Props: map[string]interface{}{
                "CteList1": var1,
            },
        }, nil
    }

CteList
    = var1:CommonTableExpr (_ "," _ CommonTableExpr)* {
        return Node{
            Name: "CteList",
            Props: map[string]interface{}{
                "CommonTableExpr1": var1,
            },
        }, nil
    }

CommonTableExpr
    = (Name _ var1:OptNameList _ AS _ "(" _ var2:PreparableStmt _ ")") {
        return Node{
            Name: "CommonTableExpr",
            Props: map[string]interface{}{
                "OptNameList1": var1,
                "PreparableStmt1": var2,
            },
        }, nil
    }

OptWithClause
    = WithClause?

IntoClause
    = (INTO _ OptTempTableName)?

OptTempTableName
    = OptTempTableNameOption1
    / OptTempTableNameOption2
    / OptTempTableNameOption3
    / OptTempTableNameOption4
    / OptTempTableNameOption5
    / OptTempTableNameOption6
    / OptTempTableNameOption7
    / OptTempTableNameOption8
    / QualifiedName

OptTempTableNameOption1
    = LOCAL _ TEMPORARY _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption2
    = LOCAL _ TEMP _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption3
    = GLOBAL _ TEMPORARY _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption3",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption4
    = GLOBAL _ TEMP _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption4",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption5
    = TEMPORARY _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption5",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption6
    = TEMP _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption6",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption7
    = UNLOGGED _ OptTable _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption7",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTempTableNameOption8
    = TABLE _ var1:QualifiedName {
        return Node{
            Name: "OptTempTableNameOption8",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

OptTable
    = TABLE?

AllOrDistinct
    = (ALL
    / DISTINCT)?

DistinctClause
    = DistinctClauseOption1
    / DISTINCT

DistinctClauseOption1
    = DISTINCT _ ON _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "DistinctClauseOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

OptAllClause
    = ALL?

OptSortClause
    = SortClause?

SortClause
    = (ORDER _ BY _ var1:SortbyList) {
        return Node{
            Name: "SortClause",
            Props: map[string]interface{}{
                "SortbyList1": var1,
            },
        }, nil
    }

SortbyList
    = var1:Sortby (_ "," _ Sortby)* {
        return Node{
            Name: "SortbyList",
            Props: map[string]interface{}{
                "Sortby1": var1,
            },
        }, nil
    }

Sortby
    = SortbyOption1
    / SortbyOption2

SortbyOption1
    = var1:AExpr _ USING _ var2:QualAllOp _ var3:OptNullsOrder {
        return Node{
            Name: "SortbyOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "QualAllOp1": var2,
                "OptNullsOrder1": var3,
            },
        }, nil
    }

SortbyOption2
    = var1:AExpr _ var2:OptAscDesc _ var3:OptNullsOrder {
        return Node{
            Name: "SortbyOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OptAscDesc1": var2,
                "OptNullsOrder1": var3,
            },
        }, nil
    }

SelectLimit
    = SelectLimitOption1
    / SelectLimitOption2
    / LimitClause
    / OffsetClause

SelectLimitOption1
    = var1:LimitClause _ var2:OffsetClause {
        return Node{
            Name: "SelectLimitOption1",
            Props: map[string]interface{}{
                "LimitClause1": var1,
                "OffsetClause1": var2,
            },
        }, nil
    }

SelectLimitOption2
    = var1:OffsetClause _ var2:LimitClause {
        return Node{
            Name: "SelectLimitOption2",
            Props: map[string]interface{}{
                "OffsetClause1": var1,
                "LimitClause1": var2,
            },
        }, nil
    }

OptSelectLimit
    = SelectLimit?

LimitClause
    = LimitClauseOption1
    / LimitClauseOption2
    / LimitClauseOption3

LimitClauseOption1
    = FETCH _ var1:FirstOrNext _ var2:OptSelectFetchFirstValue _ var3:RowOrRows _ ONLY {
        return Node{
            Name: "LimitClauseOption1",
            Props: map[string]interface{}{
                "FirstOrNext1": var1,
                "OptSelectFetchFirstValue1": var2,
                "RowOrRows1": var3,
            },
        }, nil
    }

LimitClauseOption2
    = LIMIT _ var1:SelectLimitValue _ "," _ SelectOffsetValue {
        return Node{
            Name: "LimitClauseOption2",
            Props: map[string]interface{}{
                "SelectLimitValue1": var1,
            },
        }, nil
    }

LimitClauseOption3
    = LIMIT _ var1:SelectLimitValue {
        return Node{
            Name: "LimitClauseOption3",
            Props: map[string]interface{}{
                "SelectLimitValue1": var1,
            },
        }, nil
    }

OffsetClause
    = OffsetClauseOption1
    / OffsetClauseOption2

OffsetClauseOption1
    = OFFSET _ SelectOffsetValue2 _ var1:RowOrRows {
        return Node{
            Name: "OffsetClauseOption1",
            Props: map[string]interface{}{
                "RowOrRows1": var1,
            },
        }, nil
    }

OffsetClauseOption2
    = OFFSET _ SelectOffsetValue

SelectLimitValue
    = AExpr
    / ALL

SelectOffsetValue
    = AExpr

OptSelectFetchFirstValue
    = (OptSelectFetchFirstValueOption1
    / SignedIconst)?

OptSelectFetchFirstValueOption1
    = "(" _ var1:AExpr _ ")" {
        return Node{
            Name: "OptSelectFetchFirstValueOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

SelectOffsetValue2
    = CExpr

RowOrRows
    = ROW
    / ROWS

FirstOrNext
    = FIRST
    / NEXT

GroupClause
    = (GROUP _ BY _ GroupByList)?

GroupByList
    = var1:GroupByItem (_ "," _ GroupByItem)* {
        return Node{
            Name: "GroupByList",
            Props: map[string]interface{}{
                "GroupByItem1": var1,
            },
        }, nil
    }

GroupByItem
    = AExpr
    / EmptyGroupingSet
    / CubeClause
    / RollupClause
    / GroupingSetsClause

EmptyGroupingSet
    = ("(" _ ")")

RollupClause
    = (ROLLUP _ "(" _ var1:ExprList _ ")") {
        return Node{
            Name: "RollupClause",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

CubeClause
    = (CUBE _ "(" _ var1:ExprList _ ")") {
        return Node{
            Name: "CubeClause",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

GroupingSetsClause
    = (GROUPING _ SETS _ "(" _ var1:GroupByList _ ")") {
        return Node{
            Name: "GroupingSetsClause",
            Props: map[string]interface{}{
                "GroupByList1": var1,
            },
        }, nil
    }

HavingClause
    = (HAVING _ AExpr)?

ForLockingClause
    = (FOR _ READ _ ONLY)
    / ForLockingItems

OptForLockingClause
    = ForLockingClause?

ForLockingItems
    = var1:ForLockingItem (_ ForLockingItem)* {
        return Node{
            Name: "ForLockingItems",
            Props: map[string]interface{}{
                "ForLockingItem1": var1,
            },
        }, nil
    }

ForLockingItem
    = (var1:ForLockingStrength _ var2:LockedRelsList _ var3:OptNowaitOrSkip) {
        return Node{
            Name: "ForLockingItem",
            Props: map[string]interface{}{
                "ForLockingStrength1": var1,
                "LockedRelsList1": var2,
                "OptNowaitOrSkip1": var3,
            },
        }, nil
    }

ForLockingStrength
    = (FOR _ NO _ KEY _ UPDATE)
    / (FOR _ KEY _ SHARE)
    / (FOR _ UPDATE)
    / (FOR _ SHARE)

LockedRelsList
    = (OF _ QualifiedNameList)?

ValuesClause
    = VALUES _ "(" _ var1:ExprList _ ")" (_ "," _ "(" _ ExprList _ ")")* {
        return Node{
            Name: "ValuesClause",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

FromClause
    = (FROM _ FromList)?

FromList
    = var1:TableRef (_ "," _ TableRef)* {
        return Node{
            Name: "FromList",
            Props: map[string]interface{}{
                "TableRef1": var1,
            },
        }, nil
    }

TableRef
    = TableRefOption1
    / TableRefOption2
    / TableRefOption3
    / TableRefOption4
    / TableRefOption5
    / TableRefSelfRefSplit

TableRefOption1
    = TableRefSelfRefSplit _ var1:JoinType _ JOIN _ TableRefSelfRefSplit _ var2:JoinQual {
        return Node{
            Name: "TableRefOption1",
            Props: map[string]interface{}{
                "JoinType1": var1,
                "JoinQual1": var2,
            },
        }, nil
    }

TableRefOption2
    = TableRefSelfRefSplit _ NATURAL _ var1:JoinType _ JOIN _ TableRefSelfRefSplit {
        return Node{
            Name: "TableRefOption2",
            Props: map[string]interface{}{
                "JoinType1": var1,
            },
        }, nil
    }

TableRefOption3
    = TableRefSelfRefSplit _ CROSS _ JOIN _ TableRefSelfRefSplit

TableRefOption4
    = TableRefSelfRefSplit _ JOIN _ TableRefSelfRefSplit _ var1:JoinQual {
        return Node{
            Name: "TableRefOption4",
            Props: map[string]interface{}{
                "JoinQual1": var1,
            },
        }, nil
    }

TableRefOption5
    = TableRefSelfRefSplit _ NATURAL _ JOIN _ TableRefSelfRefSplit

TableRefSelfRefSplit
    = TableRefSelfRefSplitOption1
    / TableRefSelfRefSplitOption2
    / TableRefSelfRefSplitOption3
    / TableRefSelfRefSplitOption4
    / TableRefSelfRefSplitOption5
    / TableRefSelfRefSplitOption6
    / TableRefSelfRefSplitOption7
    / TableRefSelfRefSplitOption8
    / TableRefSelfRefSplitOption9
    / TableRefSelfRefSplitOption10

TableRefSelfRefSplitOption1
    = "(" _ var1:JoinedTable _ ")" _ var2:AliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption1",
            Props: map[string]interface{}{
                "JoinedTable1": var1,
                "AliasClause1": var2,
            },
        }, nil
    }

TableRefSelfRefSplitOption2
    = var1:RelationExpr _ OptAliasClause _ var2:TablesampleClause {
        return Node{
            Name: "TableRefSelfRefSplitOption2",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "TablesampleClause1": var2,
            },
        }, nil
    }

TableRefSelfRefSplitOption3
    = "(" _ var1:JoinedTable _ ")" {
        return Node{
            Name: "TableRefSelfRefSplitOption3",
            Props: map[string]interface{}{
                "JoinedTable1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption4
    = LATERAL _ var1:Xmltable _ OptAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption4",
            Props: map[string]interface{}{
                "Xmltable1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption5
    = LATERAL _ var1:SelectWithParens _ OptAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption5",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption6
    = LATERAL _ var1:FuncTable _ var2:FuncAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption6",
            Props: map[string]interface{}{
                "FuncTable1": var1,
                "FuncAliasClause1": var2,
            },
        }, nil
    }

TableRefSelfRefSplitOption7
    = var1:RelationExpr _ OptAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption7",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption8
    = var1:Xmltable _ OptAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption8",
            Props: map[string]interface{}{
                "Xmltable1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption9
    = var1:SelectWithParens _ OptAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption9",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

TableRefSelfRefSplitOption10
    = var1:FuncTable _ var2:FuncAliasClause {
        return Node{
            Name: "TableRefSelfRefSplitOption10",
            Props: map[string]interface{}{
                "FuncTable1": var1,
                "FuncAliasClause1": var2,
            },
        }, nil
    }

JoinedTable
    = JoinedTableOption1
    / JoinedTableOption2
    / JoinedTableOption3
    / JoinedTableOption4
    / JoinedTableOption5
    / JoinedTableOption6

JoinedTableOption1
    = var1:TableRef _ var2:JoinType _ JOIN _ var3:TableRef _ var4:JoinQual {
        return Node{
            Name: "JoinedTableOption1",
            Props: map[string]interface{}{
                "TableRef1": var1,
                "JoinType1": var2,
                "TableRef2": var3,
                "JoinQual1": var4,
            },
        }, nil
    }

JoinedTableOption2
    = var1:TableRef _ NATURAL _ var2:JoinType _ JOIN _ var3:TableRef {
        return Node{
            Name: "JoinedTableOption2",
            Props: map[string]interface{}{
                "TableRef1": var1,
                "JoinType1": var2,
                "TableRef2": var3,
            },
        }, nil
    }

JoinedTableOption3
    = var1:TableRef _ CROSS _ JOIN _ var2:TableRef {
        return Node{
            Name: "JoinedTableOption3",
            Props: map[string]interface{}{
                "TableRef1": var1,
                "TableRef2": var2,
            },
        }, nil
    }

JoinedTableOption4
    = var1:TableRef _ JOIN _ var2:TableRef _ var3:JoinQual {
        return Node{
            Name: "JoinedTableOption4",
            Props: map[string]interface{}{
                "TableRef1": var1,
                "TableRef2": var2,
                "JoinQual1": var3,
            },
        }, nil
    }

JoinedTableOption5
    = var1:TableRef _ NATURAL _ JOIN _ var2:TableRef {
        return Node{
            Name: "JoinedTableOption5",
            Props: map[string]interface{}{
                "TableRef1": var1,
                "TableRef2": var2,
            },
        }, nil
    }

JoinedTableOption6
    = "(" _ var1:JoinedTable _ ")" {
        return Node{
            Name: "JoinedTableOption6",
            Props: map[string]interface{}{
                "JoinedTable1": var1,
            },
        }, nil
    }

AliasClause
    = AliasClauseOption1
    / AliasClauseOption2
    / AliasClauseOption3
    / ColId

AliasClauseOption1
    = AS _ var1:ColId _ "(" _ var2:NameList _ ")" {
        return Node{
            Name: "AliasClauseOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "NameList1": var2,
            },
        }, nil
    }

AliasClauseOption2
    = var1:ColId _ "(" _ var2:NameList _ ")" {
        return Node{
            Name: "AliasClauseOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
                "NameList1": var2,
            },
        }, nil
    }

AliasClauseOption3
    = AS _ var1:ColId {
        return Node{
            Name: "AliasClauseOption3",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

OptAliasClause
    = AliasClause?

FuncAliasClause
    = (FuncAliasClauseOption1
    / FuncAliasClauseOption2
    / FuncAliasClauseOption3
    / AliasClause)?

FuncAliasClauseOption1
    = AS _ var1:ColId _ "(" _ var2:TableFuncElementList _ ")" {
        return Node{
            Name: "FuncAliasClauseOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "TableFuncElementList1": var2,
            },
        }, nil
    }

FuncAliasClauseOption2
    = AS _ "(" _ var1:TableFuncElementList _ ")" {
        return Node{
            Name: "FuncAliasClauseOption2",
            Props: map[string]interface{}{
                "TableFuncElementList1": var1,
            },
        }, nil
    }

FuncAliasClauseOption3
    = var1:ColId _ "(" _ var2:TableFuncElementList _ ")" {
        return Node{
            Name: "FuncAliasClauseOption3",
            Props: map[string]interface{}{
                "ColId1": var1,
                "TableFuncElementList1": var2,
            },
        }, nil
    }

JoinType
    = (FULL _ JoinOuter)
    / (LEFT _ JoinOuter)
    / (RIGHT _ JoinOuter)
    / INNER

JoinOuter
    = OUTER?

JoinQual
    = JoinQualOption1
    / JoinQualOption2

JoinQualOption1
    = USING _ "(" _ var1:NameList _ ")" {
        return Node{
            Name: "JoinQualOption1",
            Props: map[string]interface{}{
                "NameList1": var1,
            },
        }, nil
    }

JoinQualOption2
    = ON _ var1:AExpr {
        return Node{
            Name: "JoinQualOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

RelationExpr
    = RelationExprOption1
    / RelationExprOption2
    / RelationExprOption3
    / QualifiedName

RelationExprOption1
    = ONLY _ "(" _ var1:QualifiedName _ ")" {
        return Node{
            Name: "RelationExprOption1",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RelationExprOption2
    = var1:QualifiedName _ "*" {
        return Node{
            Name: "RelationExprOption2",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RelationExprOption3
    = ONLY _ var1:QualifiedName {
        return Node{
            Name: "RelationExprOption3",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

RelationExprList
    = var1:RelationExpr (_ "," _ RelationExpr)* {
        return Node{
            Name: "RelationExprList",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
            },
        }, nil
    }

RelationExprOptAlias
    = RelationExprOptAliasOption1
    / RelationExprOptAliasOption2
    / RelationExpr

RelationExprOptAliasOption1
    = var1:RelationExpr _ AS _ var2:ColId {
        return Node{
            Name: "RelationExprOptAliasOption1",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "ColId1": var2,
            },
        }, nil
    }

RelationExprOptAliasOption2
    = var1:RelationExpr _ var2:ColId {
        return Node{
            Name: "RelationExprOptAliasOption2",
            Props: map[string]interface{}{
                "RelationExpr1": var1,
                "ColId1": var2,
            },
        }, nil
    }

TablesampleClause
    = (TABLESAMPLE _ var1:FuncName _ "(" _ var2:ExprList _ ")" _ var3:OptRepeatableClause) {
        return Node{
            Name: "TablesampleClause",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "ExprList1": var2,
                "OptRepeatableClause1": var3,
            },
        }, nil
    }

OptRepeatableClause
    = (REPEATABLE _ "(" _ AExpr _ ")")?

FuncTable
    = FuncTableOption1
    / FuncTableOption2

FuncTableOption1
    = ROWS _ FROM _ "(" _ var1:RowsfromList _ ")" _ var2:OptOrdinality {
        return Node{
            Name: "FuncTableOption1",
            Props: map[string]interface{}{
                "RowsfromList1": var1,
                "OptOrdinality1": var2,
            },
        }, nil
    }

FuncTableOption2
    = var1:FuncExprWindowless _ var2:OptOrdinality {
        return Node{
            Name: "FuncTableOption2",
            Props: map[string]interface{}{
                "FuncExprWindowless1": var1,
                "OptOrdinality1": var2,
            },
        }, nil
    }

RowsfromItem
    = (var1:FuncExprWindowless _ var2:OptColDefList) {
        return Node{
            Name: "RowsfromItem",
            Props: map[string]interface{}{
                "FuncExprWindowless1": var1,
                "OptColDefList1": var2,
            },
        }, nil
    }

RowsfromList
    = var1:RowsfromItem (_ "," _ RowsfromItem)* {
        return Node{
            Name: "RowsfromList",
            Props: map[string]interface{}{
                "RowsfromItem1": var1,
            },
        }, nil
    }

OptColDefList
    = (AS _ "(" _ TableFuncElementList _ ")")?

OptOrdinality
    = (WITH _ ORDINALITY)?

WhereClause
    = (WHERE _ AExpr)?

WhereOrCurrentClause
    = (WhereOrCurrentClauseOption1
    / WhereOrCurrentClauseOption2)?

WhereOrCurrentClauseOption1
    = WHERE _ CURRENT _ OF _ CursorName

WhereOrCurrentClauseOption2
    = WHERE _ var1:AExpr {
        return Node{
            Name: "WhereOrCurrentClauseOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

OptTableFuncElementList
    = TableFuncElementList?

TableFuncElementList
    = var1:TableFuncElement (_ "," _ TableFuncElement)* {
        return Node{
            Name: "TableFuncElementList",
            Props: map[string]interface{}{
                "TableFuncElement1": var1,
            },
        }, nil
    }

TableFuncElement
    = (var1:ColId _ var2:Typename _ var3:OptCollateClause) {
        return Node{
            Name: "TableFuncElement",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Typename1": var2,
                "OptCollateClause1": var3,
            },
        }, nil
    }

Xmltable
    = XmltableOption1
    / XmltableOption2

XmltableOption1
    = XMLTABLE _ "(" _ XMLNAMESPACES _ "(" _ var1:XmlNamespaceList _ ")" _ "," _ var2:CExpr _ var3:XmlexistsArgument _ COLUMNS _ var4:XmltableColumnList _ ")" {
        return Node{
            Name: "XmltableOption1",
            Props: map[string]interface{}{
                "XmlNamespaceList1": var1,
                "CExpr1": var2,
                "XmlexistsArgument1": var3,
                "XmltableColumnList1": var4,
            },
        }, nil
    }

XmltableOption2
    = XMLTABLE _ "(" _ var1:CExpr _ var2:XmlexistsArgument _ COLUMNS _ var3:XmltableColumnList _ ")" {
        return Node{
            Name: "XmltableOption2",
            Props: map[string]interface{}{
                "CExpr1": var1,
                "XmlexistsArgument1": var2,
                "XmltableColumnList1": var3,
            },
        }, nil
    }

XmltableColumnList
    = var1:XmltableColumnEl (_ "," _ XmltableColumnEl)* {
        return Node{
            Name: "XmltableColumnList",
            Props: map[string]interface{}{
                "XmltableColumnEl1": var1,
            },
        }, nil
    }

XmltableColumnEl
    = XmltableColumnElOption1
    / XmltableColumnElOption2
    / XmltableColumnElOption3

XmltableColumnElOption1
    = var1:ColId _ var2:Typename _ var3:XmltableColumnOptionList {
        return Node{
            Name: "XmltableColumnElOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Typename1": var2,
                "XmltableColumnOptionList1": var3,
            },
        }, nil
    }

XmltableColumnElOption2
    = var1:ColId _ FOR _ ORDINALITY {
        return Node{
            Name: "XmltableColumnElOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

XmltableColumnElOption3
    = var1:ColId _ var2:Typename {
        return Node{
            Name: "XmltableColumnElOption3",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Typename1": var2,
            },
        }, nil
    }

XmltableColumnOptionList
    = var1:XmltableColumnOptionEl (_ XmltableColumnOptionEl)* {
        return Node{
            Name: "XmltableColumnOptionList",
            Props: map[string]interface{}{
                "XmltableColumnOptionEl1": var1,
            },
        }, nil
    }

XmltableColumnOptionEl
    = XmltableColumnOptionElOption1
    / XmltableColumnOptionElOption2
    / XmltableColumnOptionElOption3
    / NULL

XmltableColumnOptionElOption1
    = IDENT _ var1:BExpr {
        return Node{
            Name: "XmltableColumnOptionElOption1",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

XmltableColumnOptionElOption2
    = DEFAULT _ var1:BExpr {
        return Node{
            Name: "XmltableColumnOptionElOption2",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

XmltableColumnOptionElOption3
    = NOT _ NULL

XmlNamespaceList
    = var1:XmlNamespaceEl (_ "," _ XmlNamespaceEl)* {
        return Node{
            Name: "XmlNamespaceList",
            Props: map[string]interface{}{
                "XmlNamespaceEl1": var1,
            },
        }, nil
    }

XmlNamespaceEl
    = XmlNamespaceElOption1
    / XmlNamespaceElOption2

XmlNamespaceElOption1
    = var1:BExpr _ AS _ var2:ColLabel {
        return Node{
            Name: "XmlNamespaceElOption1",
            Props: map[string]interface{}{
                "BExpr1": var1,
                "ColLabel1": var2,
            },
        }, nil
    }

XmlNamespaceElOption2
    = DEFAULT _ var1:BExpr {
        return Node{
            Name: "XmlNamespaceElOption2",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

Typename
    = TypenameOption1
    / TypenameOption2
    / TypenameOption3
    / TypenameOption4
    / TypenameOption5
    / TypenameOption6

TypenameOption1
    = SETOF _ var1:SimpleTypename _ ARRAY _ "[" _ Iconst _ "]" {
        return Node{
            Name: "TypenameOption1",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
            },
        }, nil
    }

TypenameOption2
    = var1:SimpleTypename _ ARRAY _ "[" _ Iconst _ "]" {
        return Node{
            Name: "TypenameOption2",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
            },
        }, nil
    }

TypenameOption3
    = SETOF _ var1:SimpleTypename _ var2:OptArrayBounds {
        return Node{
            Name: "TypenameOption3",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
                "OptArrayBounds1": var2,
            },
        }, nil
    }

TypenameOption4
    = SETOF _ var1:SimpleTypename _ ARRAY {
        return Node{
            Name: "TypenameOption4",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
            },
        }, nil
    }

TypenameOption5
    = var1:SimpleTypename _ var2:OptArrayBounds {
        return Node{
            Name: "TypenameOption5",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
                "OptArrayBounds1": var2,
            },
        }, nil
    }

TypenameOption6
    = var1:SimpleTypename _ ARRAY {
        return Node{
            Name: "TypenameOption6",
            Props: map[string]interface{}{
                "SimpleTypename1": var1,
            },
        }, nil
    }

OptArrayBounds
    = ((_ "[" _ Iconst _ "]")
    / (_ "[" _ "]"))*

SimpleTypename
    = SimpleTypenameOption1
    / SimpleTypenameOption2
    / Numeric
    / Bit
    / Character
    / ConstDatetime
    / GenericType

SimpleTypenameOption1
    = ConstInterval _ "(" _ Iconst _ ")"

SimpleTypenameOption2
    = ConstInterval _ var1:OptInterval {
        return Node{
            Name: "SimpleTypenameOption2",
            Props: map[string]interface{}{
                "OptInterval1": var1,
            },
        }, nil
    }

ConstTypename
    = Numeric
    / ConstBit
    / ConstCharacter
    / ConstDatetime

GenericType
    = GenericTypeOption1
    / GenericTypeOption2

GenericTypeOption1
    = var1:TypeFunctionName _ var2:Attrs _ var3:OptTypeModifiers {
        return Node{
            Name: "GenericTypeOption1",
            Props: map[string]interface{}{
                "TypeFunctionName1": var1,
                "Attrs1": var2,
                "OptTypeModifiers1": var3,
            },
        }, nil
    }

GenericTypeOption2
    = var1:TypeFunctionName _ var2:OptTypeModifiers {
        return Node{
            Name: "GenericTypeOption2",
            Props: map[string]interface{}{
                "TypeFunctionName1": var1,
                "OptTypeModifiers1": var2,
            },
        }, nil
    }

OptTypeModifiers
    = ("(" _ ExprList _ ")")?

Numeric
    = NumericOption1
    / NumericOption2
    / NumericOption3
    / NumericOption4
    / NumericOption5
    / REAL
    / INT
    / INTEGER
    / SMALLINT
    / BIGINT
    / BOOLEAN

NumericOption1
    = DOUBLE _ PRECISION

NumericOption2
    = DECIMAL _ var1:OptTypeModifiers {
        return Node{
            Name: "NumericOption2",
            Props: map[string]interface{}{
                "OptTypeModifiers1": var1,
            },
        }, nil
    }

NumericOption3
    = DEC _ var1:OptTypeModifiers {
        return Node{
            Name: "NumericOption3",
            Props: map[string]interface{}{
                "OptTypeModifiers1": var1,
            },
        }, nil
    }

NumericOption4
    = NUMERIC _ var1:OptTypeModifiers {
        return Node{
            Name: "NumericOption4",
            Props: map[string]interface{}{
                "OptTypeModifiers1": var1,
            },
        }, nil
    }

NumericOption5
    = FLOAT _ var1:OptFloat {
        return Node{
            Name: "NumericOption5",
            Props: map[string]interface{}{
                "OptFloat1": var1,
            },
        }, nil
    }

OptFloat
    = ("(" _ Iconst _ ")")?

Bit
    = BitWithLength
    / BitWithoutLength

ConstBit
    = BitWithLength
    / BitWithoutLength

BitWithLength
    = (BIT _ OptVarying _ "(" _ var1:ExprList _ ")") {
        return Node{
            Name: "BitWithLength",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

BitWithoutLength
    = (BIT _ OptVarying)

Character
    = CharacterWithLength
    / CharacterWithoutLength

ConstCharacter
    = CharacterWithLength
    / CharacterWithoutLength

CharacterWithLength
    = (var1:Character1 _ "(" _ Iconst _ ")") {
        return Node{
            Name: "CharacterWithLength",
            Props: map[string]interface{}{
                "Character11": var1,
            },
        }, nil
    }

CharacterWithoutLength
    = Character1

Character1
    = (NATIONAL _ CHARACTER _ OptVarying)
    / (NATIONAL _ CHAR _ OptVarying)
    / (CHARACTER _ OptVarying)
    / (CHAR _ OptVarying)
    / (NCHAR _ OptVarying)
    / VARCHAR

OptVarying
    = VARYING?

ConstDatetime
    = ConstDatetimeOption1
    / ConstDatetimeOption2
    / ConstDatetimeOption3
    / ConstDatetimeOption4

ConstDatetimeOption1
    = TIMESTAMP _ "(" _ Iconst _ ")" _ var1:OptTimezone {
        return Node{
            Name: "ConstDatetimeOption1",
            Props: map[string]interface{}{
                "OptTimezone1": var1,
            },
        }, nil
    }

ConstDatetimeOption2
    = TIME _ "(" _ Iconst _ ")" _ var1:OptTimezone {
        return Node{
            Name: "ConstDatetimeOption2",
            Props: map[string]interface{}{
                "OptTimezone1": var1,
            },
        }, nil
    }

ConstDatetimeOption3
    = TIMESTAMP _ var1:OptTimezone {
        return Node{
            Name: "ConstDatetimeOption3",
            Props: map[string]interface{}{
                "OptTimezone1": var1,
            },
        }, nil
    }

ConstDatetimeOption4
    = TIME _ var1:OptTimezone {
        return Node{
            Name: "ConstDatetimeOption4",
            Props: map[string]interface{}{
                "OptTimezone1": var1,
            },
        }, nil
    }

ConstInterval
    = INTERVAL

OptTimezone
    = ((WITH _ TIME _ ZONE)
    / (WITHOUT _ TIME _ ZONE))?

OptInterval
    = (OptIntervalOption1
    / OptIntervalOption2
    / OptIntervalOption3
    / OptIntervalOption4
    / OptIntervalOption5
    / OptIntervalOption6
    / OptIntervalOption7
    / IntervalSecond
    / MINUTE
    / HOUR
    / DAY
    / MONTH
    / YEAR)?

OptIntervalOption1
    = YEAR _ TO _ MONTH

OptIntervalOption2
    = HOUR _ TO _ var1:IntervalSecond {
        return Node{
            Name: "OptIntervalOption2",
            Props: map[string]interface{}{
                "IntervalSecond1": var1,
            },
        }, nil
    }

OptIntervalOption3
    = HOUR _ TO _ MINUTE

OptIntervalOption4
    = DAY _ TO _ var1:IntervalSecond {
        return Node{
            Name: "OptIntervalOption4",
            Props: map[string]interface{}{
                "IntervalSecond1": var1,
            },
        }, nil
    }

OptIntervalOption5
    = DAY _ TO _ MINUTE

OptIntervalOption6
    = DAY _ TO _ HOUR

OptIntervalOption7
    = MINUTE _ TO _ var1:IntervalSecond {
        return Node{
            Name: "OptIntervalOption7",
            Props: map[string]interface{}{
                "IntervalSecond1": var1,
            },
        }, nil
    }

IntervalSecond
    = (SECOND _ "(" _ Iconst _ ")")
    / SECOND

AExpr
    = AExprOption1
    / AExprOption2
    / AExprOption3
    / AExprOption4
    / AExprOption5
    / AExprOption6
    / AExprOption7
    / AExprOption8
    / AExprOption9
    / AExprOption10
    / AExprOption11
    / AExprOption12
    / AExprOption13
    / AExprOption14
    / AExprOption15
    / AExprOption16
    / AExprOption17
    / AExprOption18
    / AExprOption19
    / AExprOption20
    / AExprOption21
    / AExprOption22
    / AExprOption23
    / AExprOption24
    / AExprOption25
    / AExprOption26
    / AExprOption27
    / AExprOption28
    / AExprOption29
    / AExprOption30
    / AExprOption31
    / AExprOption32
    / AExprOption33
    / AExprOption34
    / AExprOption35
    / AExprOption36
    / AExprOption37
    / AExprOption38
    / AExprOption39
    / AExprOption40
    / AExprOption41
    / AExprOption42
    / AExprOption43
    / AExprOption44
    / AExprOption45
    / AExprOption46
    / AExprOption47
    / AExprOption48
    / AExprOption49
    / AExprOption50
    / AExprOption51
    / AExprOption52
    / AExprOption53
    / AExprOption54
    / AExprOption55
    / AExprSelfRefSplit

AExprOption1
    = AExprSelfRefSplit _ NOT _ BETWEEN _ SYMMETRIC _ var1:BExpr _ AND _ AExprSelfRefSplit {
        return Node{
            Name: "AExprOption1",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

AExprOption2
    = AExprSelfRefSplit _ IS _ NOT _ OF _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "AExprOption2",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

AExprOption3
    = AExprSelfRefSplit _ NOT _ BETWEEN _ OptAsymmetric _ var1:BExpr _ AND _ AExprSelfRefSplit {
        return Node{
            Name: "AExprOption3",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

AExprOption4
    = AExprSelfRefSplit _ NOT _ SIMILAR _ TO _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption5
    = AExprSelfRefSplit _ IS _ NOT _ DISTINCT _ FROM _ AExprSelfRefSplit

AExprOption6
    = AExprSelfRefSplit _ SIMILAR _ TO _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption7
    = AExprSelfRefSplit _ var1:SubqueryOp _ var2:SubType _ "(" _ AExprSelfRefSplit _ ")" {
        return Node{
            Name: "AExprOption7",
            Props: map[string]interface{}{
                "SubqueryOp1": var1,
                "SubType1": var2,
            },
        }, nil
    }

AExprOption8
    = AExprSelfRefSplit _ BETWEEN _ SYMMETRIC _ var1:BExpr _ AND _ AExprSelfRefSplit {
        return Node{
            Name: "AExprOption8",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

AExprOption9
    = AExprSelfRefSplit _ NOT _ ILIKE _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption10
    = AExprSelfRefSplit _ BETWEEN _ OptAsymmetric _ var1:BExpr _ AND _ AExprSelfRefSplit {
        return Node{
            Name: "AExprOption10",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

AExprOption11
    = AExprSelfRefSplit _ NOT _ LIKE _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption12
    = AExprSelfRefSplit _ IS _ OF _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "AExprOption12",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

AExprOption13
    = AExprSelfRefSplit _ ILIKE _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption14
    = AExprSelfRefSplit _ AT _ TIME _ ZONE _ AExprSelfRefSplit

AExprOption15
    = AExprSelfRefSplit _ LIKE _ AExprSelfRefSplit _ ESCAPE _ AExprSelfRefSplit

AExprOption16
    = AExprSelfRefSplit _ IS _ DISTINCT _ FROM _ AExprSelfRefSplit

AExprOption17
    = AExprSelfRefSplit _ NOT _ SIMILAR _ TO _ AExprSelfRefSplit

AExprOption18
    = AExprSelfRefSplit _ IS _ NOT _ UNKNOWN

AExprOption19
    = AExprSelfRefSplit _ IS _ NOT _ NULL

AExprOption20
    = AExprSelfRefSplit _ IS _ NOT _ TRUE

AExprOption21
    = AExprSelfRefSplit _ IS _ NOT _ FALSE

AExprOption22
    = AExprSelfRefSplit _ NOT _ IN _ var1:InExpr {
        return Node{
            Name: "AExprOption22",
            Props: map[string]interface{}{
                "InExpr1": var1,
            },
        }, nil
    }

AExprOption23
    = AExprSelfRefSplit _ var1:SubqueryOp _ var2:SubType _ var3:SelectWithParens {
        return Node{
            Name: "AExprOption23",
            Props: map[string]interface{}{
                "SubqueryOp1": var1,
                "SubType1": var2,
                "SelectWithParens1": var3,
            },
        }, nil
    }

AExprOption24
    = AExprSelfRefSplit _ SIMILAR _ TO _ AExprSelfRefSplit

AExprOption25
    = AExprSelfRefSplit _ IS _ NOT _ DOCUMENT

AExprOption26
    = AExprSelfRefSplit _ NOT _ ILIKE _ AExprSelfRefSplit

AExprOption27
    = AExprSelfRefSplit _ NOT _ LIKE _ AExprSelfRefSplit

AExprOption28
    = AExprSelfRefSplit _ TYPECAST _ var1:Typename {
        return Node{
            Name: "AExprOption28",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

AExprOption29
    = AExprSelfRefSplit _ LIKE _ AExprSelfRefSplit

AExprOption30
    = AExprSelfRefSplit _ OR _ AExprSelfRefSplit

AExprOption31
    = AExprSelfRefSplit _ AND _ AExprSelfRefSplit

AExprOption32
    = AExprSelfRefSplit _ IS _ NULL

AExprOption33
    = AExprSelfRefSplit _ COLLATE _ var1:AnyName {
        return Node{
            Name: "AExprOption33",
            Props: map[string]interface{}{
                "AnyName1": var1,
            },
        }, nil
    }

AExprOption34
    = AExprSelfRefSplit _ IS _ DOCUMENT

AExprOption35
    = AExprSelfRefSplit _ "+" _ AExprSelfRefSplit

AExprOption36
    = AExprSelfRefSplit _ IS _ TRUE

AExprOption37
    = AExprSelfRefSplit _ var1:QualOp _ AExprSelfRefSplit {
        return Node{
            Name: "AExprOption37",
            Props: map[string]interface{}{
                "QualOp1": var1,
            },
        }, nil
    }

AExprOption38
    = AExprSelfRefSplit _ IS _ FALSE

AExprOption39
    = AExprSelfRefSplit _ NOTEQUALS _ AExprSelfRefSplit

AExprOption40
    = AExprSelfRefSplit _ IS _ UNKNOWN

AExprOption41
    = AExprSelfRefSplit _ GREATEREQUALS _ AExprSelfRefSplit

AExprOption42
    = AExprSelfRefSplit _ ILIKE _ AExprSelfRefSplit

AExprOption43
    = AExprSelfRefSplit _ LESSEQUALS _ AExprSelfRefSplit

AExprOption44
    = AExprSelfRefSplit _ "=" _ AExprSelfRefSplit

AExprOption45
    = AExprSelfRefSplit _ ">" _ AExprSelfRefSplit

AExprOption46
    = AExprSelfRefSplit _ "<" _ AExprSelfRefSplit

AExprOption47
    = AExprSelfRefSplit _ "^" _ AExprSelfRefSplit

AExprOption48
    = AExprSelfRefSplit _ "%" _ AExprSelfRefSplit

AExprOption49
    = AExprSelfRefSplit _ "/" _ AExprSelfRefSplit

AExprOption50
    = AExprSelfRefSplit _ IN _ var1:InExpr {
        return Node{
            Name: "AExprOption50",
            Props: map[string]interface{}{
                "InExpr1": var1,
            },
        }, nil
    }

AExprOption51
    = AExprSelfRefSplit _ "*" _ AExprSelfRefSplit

AExprOption52
    = AExprSelfRefSplit _ "-" _ AExprSelfRefSplit

AExprOption53
    = AExprSelfRefSplit _ NOTNULL

AExprOption54
    = AExprSelfRefSplit _ var1:QualOp {
        return Node{
            Name: "AExprOption54",
            Props: map[string]interface{}{
                "QualOp1": var1,
            },
        }, nil
    }

AExprOption55
    = AExprSelfRefSplit _ ISNULL

AExprSelfRefSplit
    = AExprSelfRefSplitOption1
    / AExprSelfRefSplitOption2
    / AExprSelfRefSplitOption3
    / AExprSelfRefSplitOption4
    / AExprSelfRefSplitOption5
    / AExprSelfRefSplitOption6
    / CExpr
    / DEFAULT

AExprSelfRefSplitOption1
    = var1:Row _ OVERLAPS _ var2:Row {
        return Node{
            Name: "AExprSelfRefSplitOption1",
            Props: map[string]interface{}{
                "Row1": var1,
                "Row2": var2,
            },
        }, nil
    }

AExprSelfRefSplitOption2
    = UNIQUE _ var1:SelectWithParens {
        return Node{
            Name: "AExprSelfRefSplitOption2",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

AExprSelfRefSplitOption3
    = "+" _ var1:AExpr {
        return Node{
            Name: "AExprSelfRefSplitOption3",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

AExprSelfRefSplitOption4
    = "-" _ var1:AExpr {
        return Node{
            Name: "AExprSelfRefSplitOption4",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

AExprSelfRefSplitOption5
    = var1:QualOp _ var2:AExpr {
        return Node{
            Name: "AExprSelfRefSplitOption5",
            Props: map[string]interface{}{
                "QualOp1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

AExprSelfRefSplitOption6
    = NOT _ var1:AExpr {
        return Node{
            Name: "AExprSelfRefSplitOption6",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

BExpr
    = BExprOption1
    / BExprOption2
    / BExprOption3
    / BExprOption4
    / BExprOption5
    / BExprOption6
    / BExprOption7
    / BExprOption8
    / BExprOption9
    / BExprOption10
    / BExprOption11
    / BExprOption12
    / BExprOption13
    / BExprOption14
    / BExprOption15
    / BExprOption16
    / BExprOption17
    / BExprOption18
    / BExprOption19
    / BExprOption20
    / BExprOption21
    / BExprSelfRefSplit

BExprOption1
    = BExprSelfRefSplit _ IS _ NOT _ OF _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "BExprOption1",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

BExprOption2
    = BExprSelfRefSplit _ IS _ OF _ "(" _ var1:TypeList _ ")" {
        return Node{
            Name: "BExprOption2",
            Props: map[string]interface{}{
                "TypeList1": var1,
            },
        }, nil
    }

BExprOption3
    = BExprSelfRefSplit _ IS _ NOT _ DISTINCT _ FROM _ BExprSelfRefSplit

BExprOption4
    = BExprSelfRefSplit _ IS _ DISTINCT _ FROM _ BExprSelfRefSplit

BExprOption5
    = BExprSelfRefSplit _ IS _ NOT _ DOCUMENT

BExprOption6
    = BExprSelfRefSplit _ TYPECAST _ var1:Typename {
        return Node{
            Name: "BExprOption6",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

BExprOption7
    = BExprSelfRefSplit _ "^" _ BExprSelfRefSplit

BExprOption8
    = BExprSelfRefSplit _ "<" _ BExprSelfRefSplit

BExprOption9
    = BExprSelfRefSplit _ ">" _ BExprSelfRefSplit

BExprOption10
    = BExprSelfRefSplit _ "=" _ BExprSelfRefSplit

BExprOption11
    = BExprSelfRefSplit _ LESSEQUALS _ BExprSelfRefSplit

BExprOption12
    = BExprSelfRefSplit _ GREATEREQUALS _ BExprSelfRefSplit

BExprOption13
    = BExprSelfRefSplit _ NOTEQUALS _ BExprSelfRefSplit

BExprOption14
    = BExprSelfRefSplit _ var1:QualOp _ BExprSelfRefSplit {
        return Node{
            Name: "BExprOption14",
            Props: map[string]interface{}{
                "QualOp1": var1,
            },
        }, nil
    }

BExprOption15
    = BExprSelfRefSplit _ "%" _ BExprSelfRefSplit

BExprOption16
    = BExprSelfRefSplit _ "/" _ BExprSelfRefSplit

BExprOption17
    = BExprSelfRefSplit _ "*" _ BExprSelfRefSplit

BExprOption18
    = BExprSelfRefSplit _ "-" _ BExprSelfRefSplit

BExprOption19
    = BExprSelfRefSplit _ "+" _ BExprSelfRefSplit

BExprOption20
    = BExprSelfRefSplit _ IS _ DOCUMENT

BExprOption21
    = BExprSelfRefSplit _ var1:QualOp {
        return Node{
            Name: "BExprOption21",
            Props: map[string]interface{}{
                "QualOp1": var1,
            },
        }, nil
    }

BExprSelfRefSplit
    = BExprSelfRefSplitOption1
    / BExprSelfRefSplitOption2
    / BExprSelfRefSplitOption3
    / CExpr

BExprSelfRefSplitOption1
    = "+" _ var1:BExpr {
        return Node{
            Name: "BExprSelfRefSplitOption1",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

BExprSelfRefSplitOption2
    = "-" _ var1:BExpr {
        return Node{
            Name: "BExprSelfRefSplitOption2",
            Props: map[string]interface{}{
                "BExpr1": var1,
            },
        }, nil
    }

BExprSelfRefSplitOption3
    = var1:QualOp _ var2:BExpr {
        return Node{
            Name: "BExprSelfRefSplitOption3",
            Props: map[string]interface{}{
                "QualOp1": var1,
                "BExpr1": var2,
            },
        }, nil
    }

CExpr
    = CExprOption1
    / CExprOption2
    / CExprOption3
    / CExprOption4
    / CExprOption5
    / CExprOption6
    / CExprOption7
    / SelectWithParens
    / FuncExpr
    / CaseExpr
    / AexprConst
    / ExplicitRow
    / ImplicitRow
    / Columnref

CExprOption1
    = GROUPING _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "CExprOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

CExprOption2
    = "(" _ var1:AExpr _ ")" _ var2:OptIndirection {
        return Node{
            Name: "CExprOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OptIndirection1": var2,
            },
        }, nil
    }

CExprOption3
    = ARRAY _ var1:ArrayExpr {
        return Node{
            Name: "CExprOption3",
            Props: map[string]interface{}{
                "ArrayExpr1": var1,
            },
        }, nil
    }

CExprOption4
    = PARAM _ var1:OptIndirection {
        return Node{
            Name: "CExprOption4",
            Props: map[string]interface{}{
                "OptIndirection1": var1,
            },
        }, nil
    }

CExprOption5
    = ARRAY _ var1:SelectWithParens {
        return Node{
            Name: "CExprOption5",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

CExprOption6
    = EXISTS _ var1:SelectWithParens {
        return Node{
            Name: "CExprOption6",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
            },
        }, nil
    }

CExprOption7
    = var1:SelectWithParens _ var2:Indirection {
        return Node{
            Name: "CExprOption7",
            Props: map[string]interface{}{
                "SelectWithParens1": var1,
                "Indirection1": var2,
            },
        }, nil
    }

FuncApplication
    = FuncApplicationOption1
    / FuncApplicationOption2
    / FuncApplicationOption3
    / FuncApplicationOption4
    / FuncApplicationOption5
    / FuncApplicationOption6
    / FuncApplicationOption7

FuncApplicationOption1
    = var1:FuncName _ "(" _ var2:FuncArgList _ "," _ VARIADIC _ var3:FuncArgExpr _ OptSortClause _ ")" {
        return Node{
            Name: "FuncApplicationOption1",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgList1": var2,
                "FuncArgExpr1": var3,
            },
        }, nil
    }

FuncApplicationOption2
    = var1:FuncName _ "(" _ VARIADIC _ var2:FuncArgExpr _ OptSortClause _ ")" {
        return Node{
            Name: "FuncApplicationOption2",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgExpr1": var2,
            },
        }, nil
    }

FuncApplicationOption3
    = var1:FuncName _ "(" _ ALL _ var2:FuncArgList _ OptSortClause _ ")" {
        return Node{
            Name: "FuncApplicationOption3",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgList1": var2,
            },
        }, nil
    }

FuncApplicationOption4
    = var1:FuncName _ "(" _ DISTINCT _ var2:FuncArgList _ OptSortClause _ ")" {
        return Node{
            Name: "FuncApplicationOption4",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgList1": var2,
            },
        }, nil
    }

FuncApplicationOption5
    = var1:FuncName _ "(" _ var2:FuncArgList _ OptSortClause _ ")" {
        return Node{
            Name: "FuncApplicationOption5",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgList1": var2,
            },
        }, nil
    }

FuncApplicationOption6
    = var1:FuncName _ "(" _ "*" _ ")" {
        return Node{
            Name: "FuncApplicationOption6",
            Props: map[string]interface{}{
                "FuncName1": var1,
            },
        }, nil
    }

FuncApplicationOption7
    = var1:FuncName _ "(" _ ")" {
        return Node{
            Name: "FuncApplicationOption7",
            Props: map[string]interface{}{
                "FuncName1": var1,
            },
        }, nil
    }

FuncExpr
    = FuncExprOption1
    / FuncExprCommonSubexpr

FuncExprOption1
    = var1:FuncApplication _ var2:WithinGroupClause _ var3:FilterClause _ var4:OverClause {
        return Node{
            Name: "FuncExprOption1",
            Props: map[string]interface{}{
                "FuncApplication1": var1,
                "WithinGroupClause1": var2,
                "FilterClause1": var3,
                "OverClause1": var4,
            },
        }, nil
    }

FuncExprWindowless
    = FuncApplication
    / FuncExprCommonSubexpr

FuncExprCommonSubexpr
    = FuncExprCommonSubexprOption1
    / FuncExprCommonSubexprOption2
    / FuncExprCommonSubexprOption3
    / FuncExprCommonSubexprOption4
    / FuncExprCommonSubexprOption5
    / FuncExprCommonSubexprOption6
    / FuncExprCommonSubexprOption7
    / FuncExprCommonSubexprOption8
    / FuncExprCommonSubexprOption9
    / FuncExprCommonSubexprOption10
    / FuncExprCommonSubexprOption11
    / FuncExprCommonSubexprOption12
    / FuncExprCommonSubexprOption13
    / FuncExprCommonSubexprOption14
    / FuncExprCommonSubexprOption15
    / FuncExprCommonSubexprOption16
    / FuncExprCommonSubexprOption17
    / FuncExprCommonSubexprOption18
    / FuncExprCommonSubexprOption19
    / FuncExprCommonSubexprOption20
    / FuncExprCommonSubexprOption21
    / FuncExprCommonSubexprOption22
    / FuncExprCommonSubexprOption23
    / FuncExprCommonSubexprOption24
    / FuncExprCommonSubexprOption25
    / FuncExprCommonSubexprOption26
    / FuncExprCommonSubexprOption27
    / FuncExprCommonSubexprOption28
    / FuncExprCommonSubexprOption29
    / FuncExprCommonSubexprOption30
    / FuncExprCommonSubexprOption31
    / CURRENTUSER
    / SESSIONUSER
    / CURRENTROLE
    / USER
    / LOCALTIMESTAMP
    / LOCALTIME
    / CURRENTTIMESTAMP
    / CURRENTSCHEMA
    / CURRENTTIME
    / CURRENTDATE
    / CURRENTCATALOG

FuncExprCommonSubexprOption1
    = XMLELEMENT _ "(" _ NAME _ var1:ColLabel _ "," _ var2:XmlAttributes _ "," _ var3:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption1",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "XmlAttributes1": var2,
                "ExprList1": var3,
            },
        }, nil
    }

FuncExprCommonSubexprOption2
    = XMLROOT _ "(" _ var1:AExpr _ "," _ var2:XmlRootVersion _ var3:OptXmlRootStandalone _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "XmlRootVersion1": var2,
                "OptXmlRootStandalone1": var3,
            },
        }, nil
    }

FuncExprCommonSubexprOption3
    = XMLPI _ "(" _ NAME _ var1:ColLabel _ "," _ var2:AExpr _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption3",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption4
    = XMLELEMENT _ "(" _ NAME _ var1:ColLabel _ "," _ var2:XmlAttributes _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption4",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "XmlAttributes1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption5
    = XMLSERIALIZE _ "(" _ var1:DocumentOrContent _ var2:AExpr _ AS _ var3:SimpleTypename _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption5",
            Props: map[string]interface{}{
                "DocumentOrContent1": var1,
                "AExpr1": var2,
                "SimpleTypename1": var3,
            },
        }, nil
    }

FuncExprCommonSubexprOption6
    = XMLELEMENT _ "(" _ NAME _ var1:ColLabel _ "," _ var2:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption6",
            Props: map[string]interface{}{
                "ColLabel1": var1,
                "ExprList1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption7
    = NULLIF _ "(" _ var1:AExpr _ "," _ var2:AExpr _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption7",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "AExpr2": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption8
    = XMLPARSE _ "(" _ var1:DocumentOrContent _ var2:AExpr _ var3:XmlWhitespaceOption _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption8",
            Props: map[string]interface{}{
                "DocumentOrContent1": var1,
                "AExpr1": var2,
                "XmlWhitespaceOption1": var3,
            },
        }, nil
    }

FuncExprCommonSubexprOption9
    = CAST _ "(" _ var1:AExpr _ AS _ var2:Typename _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption9",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "Typename1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption10
    = TREAT _ "(" _ var1:AExpr _ AS _ var2:Typename _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption10",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "Typename1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption11
    = COLLATION _ FOR _ "(" _ var1:AExpr _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption11",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption12
    = XMLPI _ "(" _ NAME _ var1:ColLabel _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption12",
            Props: map[string]interface{}{
                "ColLabel1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption13
    = TRIM _ "(" _ TRAILING _ var1:TrimList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption13",
            Props: map[string]interface{}{
                "TrimList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption14
    = TRIM _ "(" _ LEADING _ var1:TrimList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption14",
            Props: map[string]interface{}{
                "TrimList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption15
    = TRIM _ "(" _ BOTH _ var1:TrimList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption15",
            Props: map[string]interface{}{
                "TrimList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption16
    = XMLEXISTS _ "(" _ var1:CExpr _ var2:XmlexistsArgument _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption16",
            Props: map[string]interface{}{
                "CExpr1": var1,
                "XmlexistsArgument1": var2,
            },
        }, nil
    }

FuncExprCommonSubexprOption17
    = XMLELEMENT _ "(" _ NAME _ var1:ColLabel _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption17",
            Props: map[string]interface{}{
                "ColLabel1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption18
    = LEAST _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption18",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption19
    = OVERLAY _ "(" _ var1:OverlayList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption19",
            Props: map[string]interface{}{
                "OverlayList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption20
    = POSITION _ "(" _ var1:PositionList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption20",
            Props: map[string]interface{}{
                "PositionList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption21
    = SUBSTRING _ "(" _ var1:SubstrList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption21",
            Props: map[string]interface{}{
                "SubstrList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption22
    = CURRENTTIME _ "(" _ Iconst _ ")"

FuncExprCommonSubexprOption23
    = LOCALTIME _ "(" _ Iconst _ ")"

FuncExprCommonSubexprOption24
    = LOCALTIMESTAMP _ "(" _ Iconst _ ")"

FuncExprCommonSubexprOption25
    = XMLFOREST _ "(" _ var1:XmlAttributeList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption25",
            Props: map[string]interface{}{
                "XmlAttributeList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption26
    = TRIM _ "(" _ var1:TrimList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption26",
            Props: map[string]interface{}{
                "TrimList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption27
    = XMLCONCAT _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption27",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption28
    = COALESCE _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption28",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption29
    = GREATEST _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption29",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption30
    = EXTRACT _ "(" _ var1:ExtractList _ ")" {
        return Node{
            Name: "FuncExprCommonSubexprOption30",
            Props: map[string]interface{}{
                "ExtractList1": var1,
            },
        }, nil
    }

FuncExprCommonSubexprOption31
    = CURRENTTIMESTAMP _ "(" _ Iconst _ ")"

XmlRootVersion
    = XmlRootVersionOption1
    / XmlRootVersionOption2

XmlRootVersionOption1
    = VERSION _ NO _ VALUE

XmlRootVersionOption2
    = VERSION _ var1:AExpr {
        return Node{
            Name: "XmlRootVersionOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

OptXmlRootStandalone
    = (("," _ STANDALONE _ NO _ VALUE)
    / ("," _ STANDALONE _ YES)
    / ("," _ STANDALONE _ NO))?

XmlAttributes
    = (XMLATTRIBUTES _ "(" _ var1:XmlAttributeList _ ")") {
        return Node{
            Name: "XmlAttributes",
            Props: map[string]interface{}{
                "XmlAttributeList1": var1,
            },
        }, nil
    }

XmlAttributeList
    = var1:XmlAttributeEl (_ "," _ XmlAttributeEl)* {
        return Node{
            Name: "XmlAttributeList",
            Props: map[string]interface{}{
                "XmlAttributeEl1": var1,
            },
        }, nil
    }

XmlAttributeEl
    = XmlAttributeElOption1
    / AExpr

XmlAttributeElOption1
    = var1:AExpr _ AS _ var2:ColLabel {
        return Node{
            Name: "XmlAttributeElOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "ColLabel1": var2,
            },
        }, nil
    }

DocumentOrContent
    = DOCUMENT
    / CONTENT

XmlWhitespaceOption
    = ((PRESERVE _ WHITESPACE)
    / (STRIP _ WHITESPACE))?

XmlexistsArgument
    = XmlexistsArgumentOption1
    / XmlexistsArgumentOption2
    / XmlexistsArgumentOption3
    / XmlexistsArgumentOption4

XmlexistsArgumentOption1
    = PASSING _ BY _ REF _ var1:CExpr _ BY _ REF {
        return Node{
            Name: "XmlexistsArgumentOption1",
            Props: map[string]interface{}{
                "CExpr1": var1,
            },
        }, nil
    }

XmlexistsArgumentOption2
    = PASSING _ var1:CExpr _ BY _ REF {
        return Node{
            Name: "XmlexistsArgumentOption2",
            Props: map[string]interface{}{
                "CExpr1": var1,
            },
        }, nil
    }

XmlexistsArgumentOption3
    = PASSING _ BY _ REF _ var1:CExpr {
        return Node{
            Name: "XmlexistsArgumentOption3",
            Props: map[string]interface{}{
                "CExpr1": var1,
            },
        }, nil
    }

XmlexistsArgumentOption4
    = PASSING _ var1:CExpr {
        return Node{
            Name: "XmlexistsArgumentOption4",
            Props: map[string]interface{}{
                "CExpr1": var1,
            },
        }, nil
    }

WithinGroupClause
    = (WITHIN _ GROUP _ "(" _ SortClause _ ")")?

FilterClause
    = (FILTER _ "(" _ WHERE _ AExpr _ ")")?

WindowClause
    = (WINDOW _ WindowDefinitionList)?

WindowDefinitionList
    = var1:WindowDefinition (_ "," _ WindowDefinition)* {
        return Node{
            Name: "WindowDefinitionList",
            Props: map[string]interface{}{
                "WindowDefinition1": var1,
            },
        }, nil
    }

WindowDefinition
    = (var1:ColId _ AS _ var2:WindowSpecification) {
        return Node{
            Name: "WindowDefinition",
            Props: map[string]interface{}{
                "ColId1": var1,
                "WindowSpecification1": var2,
            },
        }, nil
    }

OverClause
    = (OverClauseOption1
    / OverClauseOption2)?

OverClauseOption1
    = OVER _ var1:WindowSpecification {
        return Node{
            Name: "OverClauseOption1",
            Props: map[string]interface{}{
                "WindowSpecification1": var1,
            },
        }, nil
    }

OverClauseOption2
    = OVER _ var1:ColId {
        return Node{
            Name: "OverClauseOption2",
            Props: map[string]interface{}{
                "ColId1": var1,
            },
        }, nil
    }

WindowSpecification
    = ("(" _ OptExistingWindowName _ var1:OptPartitionClause _ OptSortClause _ var2:OptFrameClause _ ")") {
        return Node{
            Name: "WindowSpecification",
            Props: map[string]interface{}{
                "OptPartitionClause1": var1,
                "OptFrameClause1": var2,
            },
        }, nil
    }

OptExistingWindowName
    = ColId?

OptPartitionClause
    = (PARTITION _ BY _ ExprList)?

OptFrameClause
    = (OptFrameClauseOption1
    / OptFrameClauseOption2
    / OptFrameClauseOption3)?

OptFrameClauseOption1
    = RANGE _ var1:FrameExtent _ var2:OptWindowExclusionClause {
        return Node{
            Name: "OptFrameClauseOption1",
            Props: map[string]interface{}{
                "FrameExtent1": var1,
                "OptWindowExclusionClause1": var2,
            },
        }, nil
    }

OptFrameClauseOption2
    = ROWS _ var1:FrameExtent _ var2:OptWindowExclusionClause {
        return Node{
            Name: "OptFrameClauseOption2",
            Props: map[string]interface{}{
                "FrameExtent1": var1,
                "OptWindowExclusionClause1": var2,
            },
        }, nil
    }

OptFrameClauseOption3
    = GROUPS _ var1:FrameExtent _ var2:OptWindowExclusionClause {
        return Node{
            Name: "OptFrameClauseOption3",
            Props: map[string]interface{}{
                "FrameExtent1": var1,
                "OptWindowExclusionClause1": var2,
            },
        }, nil
    }

FrameExtent
    = FrameExtentOption1
    / FrameBound

FrameExtentOption1
    = BETWEEN _ var1:FrameBound _ AND _ var2:FrameBound {
        return Node{
            Name: "FrameExtentOption1",
            Props: map[string]interface{}{
                "FrameBound1": var1,
                "FrameBound2": var2,
            },
        }, nil
    }

FrameBound
    = FrameBoundOption1
    / FrameBoundOption2
    / FrameBoundOption3
    / FrameBoundOption4
    / FrameBoundOption5

FrameBoundOption1
    = UNBOUNDED _ PRECEDING

FrameBoundOption2
    = UNBOUNDED _ FOLLOWING

FrameBoundOption3
    = CURRENT _ ROW

FrameBoundOption4
    = var1:AExpr _ PRECEDING {
        return Node{
            Name: "FrameBoundOption4",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

FrameBoundOption5
    = var1:AExpr _ FOLLOWING {
        return Node{
            Name: "FrameBoundOption5",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

OptWindowExclusionClause
    = ((EXCLUDE _ CURRENT _ ROW)
    / (EXCLUDE _ NO _ OTHERS)
    / (EXCLUDE _ GROUP)
    / (EXCLUDE _ TIES))?

Row
    = RowOption1
    / RowOption2
    / RowOption3

RowOption1
    = "(" _ var1:ExprList _ "," _ var2:AExpr _ ")" {
        return Node{
            Name: "RowOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

RowOption2
    = ROW _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "RowOption2",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

RowOption3
    = ROW _ "(" _ ")"

ExplicitRow
    = ExplicitRowOption1
    / ExplicitRowOption2

ExplicitRowOption1
    = ROW _ "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "ExplicitRowOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

ExplicitRowOption2
    = ROW _ "(" _ ")"

ImplicitRow
    = ("(" _ var1:ExprList _ "," _ var2:AExpr _ ")") {
        return Node{
            Name: "ImplicitRow",
            Props: map[string]interface{}{
                "ExprList1": var1,
                "AExpr1": var2,
            },
        }, nil
    }

SubType
    = ANY
    / SOME
    / ALL

AllOp
    = Op
    / MathOp

MathOp
    = "+"
    / "-"
    / "*"
    / "/"
    / "%"
    / "^"
    / "<"
    / ">"
    / "="
    / LESSEQUALS
    / GREATEREQUALS
    / NOTEQUALS

QualOp
    = QualOpOption1
    / Op

QualOpOption1
    = OPERATOR _ "(" _ var1:AnyOperator _ ")" {
        return Node{
            Name: "QualOpOption1",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
            },
        }, nil
    }

QualAllOp
    = QualAllOpOption1
    / AllOp

QualAllOpOption1
    = OPERATOR _ "(" _ var1:AnyOperator _ ")" {
        return Node{
            Name: "QualAllOpOption1",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
            },
        }, nil
    }

SubqueryOp
    = SubqueryOpOption1
    / SubqueryOpOption2
    / SubqueryOpOption3
    / AllOp
    / LIKE
    / ILIKE

SubqueryOpOption1
    = OPERATOR _ "(" _ var1:AnyOperator _ ")" {
        return Node{
            Name: "SubqueryOpOption1",
            Props: map[string]interface{}{
                "AnyOperator1": var1,
            },
        }, nil
    }

SubqueryOpOption2
    = NOT _ LIKE

SubqueryOpOption3
    = NOT _ ILIKE

ExprList
    = var1:AExpr (_ "," _ AExpr)* {
        return Node{
            Name: "ExprList",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

FuncArgList
    = var1:FuncArgExpr (_ "," _ FuncArgExpr)* {
        return Node{
            Name: "FuncArgList",
            Props: map[string]interface{}{
                "FuncArgExpr1": var1,
            },
        }, nil
    }

FuncArgExpr
    = FuncArgExprOption1
    / FuncArgExprOption2
    / AExpr

FuncArgExprOption1
    = ParamName _ COLONEQUALS _ var1:AExpr {
        return Node{
            Name: "FuncArgExprOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

FuncArgExprOption2
    = ParamName _ EQUALSGREATER _ var1:AExpr {
        return Node{
            Name: "FuncArgExprOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

TypeList
    = var1:Typename (_ "," _ Typename)* {
        return Node{
            Name: "TypeList",
            Props: map[string]interface{}{
                "Typename1": var1,
            },
        }, nil
    }

ArrayExpr
    = ArrayExprOption1
    / ArrayExprOption2
    / ArrayExprOption3

ArrayExprOption1
    = "[" _ var1:ExprList _ "]" {
        return Node{
            Name: "ArrayExprOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

ArrayExprOption2
    = "[" _ var1:ArrayExprList _ "]" {
        return Node{
            Name: "ArrayExprOption2",
            Props: map[string]interface{}{
                "ArrayExprList1": var1,
            },
        }, nil
    }

ArrayExprOption3
    = "[" _ "]"

ArrayExprList
    = var1:ArrayExpr (_ "," _ ArrayExpr)* {
        return Node{
            Name: "ArrayExprList",
            Props: map[string]interface{}{
                "ArrayExpr1": var1,
            },
        }, nil
    }

ExtractList
    = (ExtractArg _ FROM _ AExpr)?

ExtractArg
    = IDENT
    / YEAR
    / MONTH
    / DAY
    / HOUR
    / MINUTE
    / SECOND
    / Sconst

OverlayList
    = OverlayListOption1
    / OverlayListOption2

OverlayListOption1
    = var1:AExpr _ var2:OverlayPlacing _ var3:SubstrFrom _ var4:SubstrFor {
        return Node{
            Name: "OverlayListOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OverlayPlacing1": var2,
                "SubstrFrom1": var3,
                "SubstrFor1": var4,
            },
        }, nil
    }

OverlayListOption2
    = var1:AExpr _ var2:OverlayPlacing _ var3:SubstrFrom {
        return Node{
            Name: "OverlayListOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "OverlayPlacing1": var2,
                "SubstrFrom1": var3,
            },
        }, nil
    }

OverlayPlacing
    = (PLACING _ var1:AExpr) {
        return Node{
            Name: "OverlayPlacing",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

PositionList
    = (BExpr _ IN _ BExpr)?

SubstrList
    = (SubstrListOption1
    / SubstrListOption2
    / SubstrListOption3
    / SubstrListOption4
    / ExprList)?

SubstrListOption1
    = var1:AExpr _ var2:SubstrFrom _ var3:SubstrFor {
        return Node{
            Name: "SubstrListOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "SubstrFrom1": var2,
                "SubstrFor1": var3,
            },
        }, nil
    }

SubstrListOption2
    = var1:AExpr _ var2:SubstrFor _ var3:SubstrFrom {
        return Node{
            Name: "SubstrListOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "SubstrFor1": var2,
                "SubstrFrom1": var3,
            },
        }, nil
    }

SubstrListOption3
    = var1:AExpr _ var2:SubstrFrom {
        return Node{
            Name: "SubstrListOption3",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "SubstrFrom1": var2,
            },
        }, nil
    }

SubstrListOption4
    = var1:AExpr _ var2:SubstrFor {
        return Node{
            Name: "SubstrListOption4",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "SubstrFor1": var2,
            },
        }, nil
    }

SubstrFrom
    = (FROM _ var1:AExpr) {
        return Node{
            Name: "SubstrFrom",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

SubstrFor
    = (FOR _ var1:AExpr) {
        return Node{
            Name: "SubstrFor",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

TrimList
    = TrimListOption1
    / TrimListOption2
    / ExprList

TrimListOption1
    = var1:AExpr _ FROM _ var2:ExprList {
        return Node{
            Name: "TrimListOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "ExprList1": var2,
            },
        }, nil
    }

TrimListOption2
    = FROM _ var1:ExprList {
        return Node{
            Name: "TrimListOption2",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

InExpr
    = InExprOption1
    / SelectWithParens

InExprOption1
    = "(" _ var1:ExprList _ ")" {
        return Node{
            Name: "InExprOption1",
            Props: map[string]interface{}{
                "ExprList1": var1,
            },
        }, nil
    }

CaseExpr
    = (CASE _ CaseArg _ var1:WhenClauseList _ var2:CaseDefault _ END) {
        return Node{
            Name: "CaseExpr",
            Props: map[string]interface{}{
                "WhenClauseList1": var1,
                "CaseDefault1": var2,
            },
        }, nil
    }

WhenClauseList
    = var1:WhenClause (_ WhenClause)* {
        return Node{
            Name: "WhenClauseList",
            Props: map[string]interface{}{
                "WhenClause1": var1,
            },
        }, nil
    }

WhenClause
    = (WHEN _ var1:AExpr _ THEN _ var2:AExpr) {
        return Node{
            Name: "WhenClause",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "AExpr2": var2,
            },
        }, nil
    }

CaseDefault
    = (ELSE _ AExpr)?

CaseArg
    = AExpr?

Columnref
    = ColumnrefOption1
    / ColId

ColumnrefOption1
    = var1:ColId _ var2:Indirection {
        return Node{
            Name: "ColumnrefOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Indirection1": var2,
            },
        }, nil
    }

IndirectionEl
    = IndirectionElOption1
    / IndirectionElOption2
    / IndirectionElOption3
    / IndirectionElOption4

IndirectionElOption1
    = "[" _ OptSliceBound _ ":" _ OptSliceBound _ "]"

IndirectionElOption2
    = "[" _ var1:AExpr _ "]" {
        return Node{
            Name: "IndirectionElOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

IndirectionElOption3
    = "." _ AttrName

IndirectionElOption4
    = "." _ "*"

OptSliceBound
    = AExpr?

Indirection
    = var1:IndirectionEl (_ IndirectionEl)* {
        return Node{
            Name: "Indirection",
            Props: map[string]interface{}{
                "IndirectionEl1": var1,
            },
        }, nil
    }

OptIndirection
    = (_ IndirectionEl)*

OptAsymmetric
    = ASYMMETRIC?

OptTargetList
    = TargetList?

TargetList
    = var1:TargetEl (_ "," _ TargetEl)* {
        return Node{
            Name: "TargetList",
            Props: map[string]interface{}{
                "TargetEl1": var1,
            },
        }, nil
    }

TargetEl
    = TargetElOption1
    / TargetElOption2
    / AExpr
    / "*"

TargetElOption1
    = var1:AExpr _ AS _ var2:ColLabel {
        return Node{
            Name: "TargetElOption1",
            Props: map[string]interface{}{
                "AExpr1": var1,
                "ColLabel1": var2,
            },
        }, nil
    }

TargetElOption2
    = var1:AExpr _ IDENT {
        return Node{
            Name: "TargetElOption2",
            Props: map[string]interface{}{
                "AExpr1": var1,
            },
        }, nil
    }

QualifiedNameList
    = var1:QualifiedName (_ "," _ QualifiedName)* {
        return Node{
            Name: "QualifiedNameList",
            Props: map[string]interface{}{
                "QualifiedName1": var1,
            },
        }, nil
    }

QualifiedName
    = QualifiedNameOption1
    / ColId

QualifiedNameOption1
    = var1:ColId _ var2:Indirection {
        return Node{
            Name: "QualifiedNameOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Indirection1": var2,
            },
        }, nil
    }

NameList
    = Name (_ "," _ Name)*

Name
    = ColId

DatabaseName
    = ColId

AccessMethod
    = ColId

AttrName
    = ColLabel

IndexName
    = ColId

FileName
    = Sconst

FuncName
    = FuncNameOption1
    / TypeFunctionName

FuncNameOption1
    = var1:ColId _ var2:Indirection {
        return Node{
            Name: "FuncNameOption1",
            Props: map[string]interface{}{
                "ColId1": var1,
                "Indirection1": var2,
            },
        }, nil
    }

AexprConst
    = AexprConstOption1
    / AexprConstOption2
    / AexprConstOption3
    / AexprConstOption4
    / AexprConstOption5
    / Iconst
    / XCONST
    / BCONST
    / Sconst
    / FCONST
    / TRUE
    / FALSE
    / NULL

AexprConstOption1
    = var1:FuncName _ "(" _ var2:FuncArgList _ OptSortClause _ ")" _ Sconst {
        return Node{
            Name: "AexprConstOption1",
            Props: map[string]interface{}{
                "FuncName1": var1,
                "FuncArgList1": var2,
            },
        }, nil
    }

AexprConstOption2
    = ConstInterval _ "(" _ Iconst _ ")" _ Sconst

AexprConstOption3
    = ConstInterval _ Sconst _ var1:OptInterval {
        return Node{
            Name: "AexprConstOption3",
            Props: map[string]interface{}{
                "OptInterval1": var1,
            },
        }, nil
    }

AexprConstOption4
    = var1:FuncName _ Sconst {
        return Node{
            Name: "AexprConstOption4",
            Props: map[string]interface{}{
                "FuncName1": var1,
            },
        }, nil
    }

AexprConstOption5
    = var1:ConstTypename _ Sconst {
        return Node{
            Name: "AexprConstOption5",
            Props: map[string]interface{}{
                "ConstTypename1": var1,
            },
        }, nil
    }

Iconst
    = ICONST

Sconst
    = SCONST

SignedIconst
    = ("+" _ Iconst)
    / ("-" _ Iconst)
    / Iconst

RoleId
    = RoleSpec

RoleSpec
    = NonReservedWord
    / CURRENTUSER
    / SESSIONUSER

RoleList
    = var1:RoleSpec (_ "," _ RoleSpec)* {
        return Node{
            Name: "RoleList",
            Props: map[string]interface{}{
                "RoleSpec1": var1,
            },
        }, nil
    }

ColId
    = IDENT
    / UnreservedKeyword
    / ColNameKeyword

TypeFunctionName
    = IDENT
    / UnreservedKeyword
    / TypeFuncNameKeyword

NonReservedWord
    = IDENT
    / UnreservedKeyword
    / ColNameKeyword
    / TypeFuncNameKeyword

ColLabel
    = IDENT
    / UnreservedKeyword
    / ColNameKeyword
    / TypeFuncNameKeyword
    / ReservedKeyword

UnreservedKeyword
    = ABORT
    / ABSOLUTE
    / ACCESS
    / ACTION
    / ADD
    / ADMIN
    / AFTER
    / AGGREGATE
    / ALSO
    / ALTER
    / ALWAYS
    / ASSERTION
    / ASSIGNMENT
    / AT
    / ATTACH
    / ATTRIBUTE
    / BACKWARD
    / BEFORE
    / BEGIN
    / BY
    / CACHE
    / CALL
    / CALLED
    / CASCADE
    / CASCADED
    / CATALOG
    / CHAIN
    / CHARACTERISTICS
    / CHECKPOINT
    / CLASS
    / CLOSE
    / CLUSTER
    / COLUMNS
    / COMMENT
    / COMMENTS
    / COMMIT
    / COMMITTED
    / CONFIGURATION
    / CONFLICT
    / CONNECTION
    / CONSTRAINTS
    / CONTENT
    / CONTINUE
    / CONVERSION
    / COPY
    / COST
    / CSV
    / CUBE
    / CURRENT
    / CURSOR
    / CYCLE
    / DATA
    / DATABASE
    / DAY
    / DEALLOCATE
    / DECLARE
    / DEFAULTS
    / DEFERRED
    / DEFINER
    / DELETE
    / DELIMITER
    / DELIMITERS
    / DEPENDS
    / DETACH
    / DICTIONARY
    / DISABLE
    / DISCARD
    / DOCUMENT
    / DOMAIN
    / DOUBLE
    / DROP
    / EACH
    / ENABLE
    / ENCODING
    / ENCRYPTED
    / ENUM
    / ESCAPE
    / EVENT
    / EXCLUDE
    / EXCLUDING
    / EXCLUSIVE
    / EXECUTE
    / EXPLAIN
    / EXTENSION
    / EXTERNAL
    / FAMILY
    / FILTER
    / FIRST
    / FOLLOWING
    / FORCE
    / FORWARD
    / FUNCTION
    / FUNCTIONS
    / GENERATED
    / GLOBAL
    / GRANTED
    / GROUPS
    / HANDLER
    / HEADER
    / HOLD
    / HOUR
    / IDENTITY
    / IF
    / IMMEDIATE
    / IMMUTABLE
    / IMPLICIT
    / IMPORT
    / INCLUDE
    / INCLUDING
    / INCREMENT
    / INDEX
    / INDEXES
    / INHERIT
    / INHERITS
    / INLINE
    / INPUT
    / INSENSITIVE
    / INSERT
    / INSTEAD
    / INVOKER
    / ISOLATION
    / KEY
    / LABEL
    / LANGUAGE
    / LARGE
    / LAST
    / LEAKPROOF
    / LEVEL
    / LISTEN
    / LOAD
    / LOCAL
    / LOCATION
    / LOCK
    / LOCKED
    / LOGGED
    / MAPPING
    / MATCH
    / MATERIALIZED
    / MAXVALUE
    / METHOD
    / MINUTE
    / MINVALUE
    / MODE
    / MONTH
    / MOVE
    / NAME
    / NAMES
    / NEW
    / NEXT
    / NO
    / NOTHING
    / NOTIFY
    / NOWAIT
    / NULLS
    / OBJECT
    / OF
    / OFF
    / OIDS
    / OLD
    / OPERATOR
    / OPTION
    / OPTIONS
    / ORDINALITY
    / OTHERS
    / OVER
    / OVERRIDING
    / OWNED
    / OWNER
    / PARALLEL
    / PARSER
    / PARTIAL
    / PARTITION
    / PASSING
    / PASSWORD
    / PLANS
    / POLICY
    / PRECEDING
    / PREPARE
    / PREPARED
    / PRESERVE
    / PRIOR
    / PRIVILEGES
    / PROCEDURAL
    / PROCEDURE
    / PROCEDURES
    / PROGRAM
    / PUBLICATION
    / QUOTE
    / RANGE
    / READ
    / REASSIGN
    / RECHECK
    / RECURSIVE
    / REF
    / REFERENCING
    / REFRESH
    / REINDEX
    / RELATIVE
    / RELEASE
    / RENAME
    / REPEATABLE
    / REPLACE
    / REPLICA
    / RESET
    / RESTART
    / RESTRICT
    / RETURNS
    / REVOKE
    / ROLE
    / ROLLBACK
    / ROLLUP
    / ROUTINE
    / ROUTINES
    / ROWS
    / RULE
    / SAVEPOINT
    / SCHEMA
    / SCHEMAS
    / SCROLL
    / SEARCH
    / SECOND
    / SECURITY
    / SEQUENCE
    / SEQUENCES
    / SERIALIZABLE
    / SERVER
    / SESSION
    / SET
    / SETS
    / SHARE
    / SHOW
    / SIMPLE
    / SKIP
    / SNAPSHOT
    / SQL
    / STABLE
    / STANDALONE
    / START
    / STATEMENT
    / STATISTICS
    / STDIN
    / STDOUT
    / STORAGE
    / STRICT
    / STRIP
    / SUBSCRIPTION
    / SYSID
    / SYSTEM
    / TABLES
    / TABLESPACE
    / TEMP
    / TEMPLATE
    / TEMPORARY
    / TEXT
    / TIES
    / TRANSACTION
    / TRANSFORM
    / TRIGGER
    / TRUNCATE
    / TRUSTED
    / TYPE
    / TYPES
    / UNBOUNDED
    / UNCOMMITTED
    / UNENCRYPTED
    / UNKNOWN
    / UNLISTEN
    / UNLOGGED
    / UNTIL
    / UPDATE
    / VACUUM
    / VALID
    / VALIDATE
    / VALIDATOR
    / VALUE
    / VARYING
    / VERSION
    / VIEW
    / VIEWS
    / VOLATILE
    / WHITESPACE
    / WITHIN
    / WITHOUT
    / WORK
    / WRAPPER
    / WRITE
    / XML
    / YEAR
    / YES
    / ZONE

ColNameKeyword
    = BETWEEN
    / BIGINT
    / BIT
    / BOOLEAN
    / CHAR
    / CHARACTER
    / COALESCE
    / DEC
    / DECIMAL
    / EXISTS
    / EXTRACT
    / FLOAT
    / GREATEST
    / GROUPING
    / INOUT
    / INT
    / INTEGER
    / INTERVAL
    / LEAST
    / NATIONAL
    / NCHAR
    / NONE
    / NULLIF
    / NUMERIC
    / OUT
    / OVERLAY
    / POSITION
    / PRECISION
    / REAL
    / ROW
    / SETOF
    / SMALLINT
    / SUBSTRING
    / TIME
    / TIMESTAMP
    / TREAT
    / TRIM
    / VALUES
    / VARCHAR
    / XMLATTRIBUTES
    / XMLCONCAT
    / XMLELEMENT
    / XMLEXISTS
    / XMLFOREST
    / XMLNAMESPACES
    / XMLPARSE
    / XMLPI
    / XMLROOT
    / XMLSERIALIZE
    / XMLTABLE

TypeFuncNameKeyword
    = AUTHORIZATION
    / BINARY
    / COLLATION
    / CONCURRENTLY
    / CROSS
    / CURRENTSCHEMA
    / FREEZE
    / FULL
    / ILIKE
    / INNER
    / IS
    / ISNULL
    / JOIN
    / LEFT
    / LIKE
    / NATURAL
    / NOTNULL
    / OUTER
    / OVERLAPS
    / RIGHT
    / SIMILAR
    / TABLESAMPLE
    / VERBOSE

ReservedKeyword
    = ALL
    / ANALYSE
    / ANALYZE
    / AND
    / ANY
    / ARRAY
    / AS
    / ASC
    / ASYMMETRIC
    / BOTH
    / CASE
    / CAST
    / CHECK
    / COLLATE
    / COLUMN
    / CONSTRAINT
    / CREATE
    / CURRENTCATALOG
    / CURRENTDATE
    / CURRENTROLE
    / CURRENTTIME
    / CURRENTTIMESTAMP
    / CURRENTUSER
    / DEFAULT
    / DEFERRABLE
    / DESC
    / DISTINCT
    / DO
    / ELSE
    / END
    / EXCEPT
    / FALSE
    / FETCH
    / FOR
    / FOREIGN
    / FROM
    / GRANT
    / GROUP
    / HAVING
    / IN
    / INITIALLY
    / INTERSECT
    / INTO
    / LATERAL
    / LEADING
    / LIMIT
    / LOCALTIME
    / LOCALTIMESTAMP
    / NOT
    / NULL
    / OFFSET
    / ON
    / ONLY
    / OR
    / ORDER
    / PLACING
    / PRIMARY
    / REFERENCES
    / RETURNING
    / SELECT
    / SESSIONUSER
    / SOME
    / SYMMETRIC
    / TABLE
    / THEN
    / TO
    / TRAILING
    / TRUE
    / UNION
    / UNIQUE
    / USER
    / USING
    / VARIADIC
    / WHEN
    / WHERE
    / WINDOW
    / WITH

ABORT
    = "ABORT"i

ABSOLUTE
    = "ABSOLUTE"i

ACCESS
    = "ACCESS"i

ACTION
    = "ACTION"i

ADD
    = "ADD"i

ADMIN
    = "ADMIN"i

AFTER
    = "AFTER"i

AGGREGATE
    = "AGGREGATE"i

ALL
    = "ALL"i

ALSO
    = "ALSO"i

ALTER
    = "ALTER"i

ALWAYS
    = "ALWAYS"i

ANALYSE
    = "ANALYSE"i

ANALYZE
    = "ANALYZE"i

AND
    = "AND"i

ANY
    = "ANY"i

ARRAY
    = "ARRAY"i

AS
    = "AS"i

ASC
    = "ASC"i

ASSERTION
    = "ASSERTION"i

ASSIGNMENT
    = "ASSIGNMENT"i

ASYMMETRIC
    = "ASYMMETRIC"i

AT
    = "AT"i

ATTACH
    = "ATTACH"i

ATTRIBUTE
    = "ATTRIBUTE"i

AUTHORIZATION
    = "AUTHORIZATION"i

BACKWARD
    = "BACKWARD"i

BEFORE
    = "BEFORE"i

BEGIN
    = "BEGIN"i

BETWEEN
    = "BETWEEN"i

BIGINT
    = "BIGINT"i

BINARY
    = "BINARY"i

BIT
    = "BIT"i

BOOLEAN
    = "BOOLEAN"i

BOTH
    = "BOTH"i

BY
    = "BY"i

CACHE
    = "CACHE"i

CALL
    = "CALL"i

CALLED
    = "CALLED"i

CASCADE
    = "CASCADE"i

CASCADED
    = "CASCADED"i

CASE
    = "CASE"i

CAST
    = "CAST"i

CATALOG
    = "CATALOG"i

CHAIN
    = "CHAIN"i

CHAR
    = "CHAR"i

CHARACTER
    = "CHARACTER"i

CHARACTERISTICS
    = "CHARACTERISTICS"i

CHECK
    = "CHECK"i

CHECKPOINT
    = "CHECKPOINT"i

CLASS
    = "CLASS"i

CLOSE
    = "CLOSE"i

CLUSTER
    = "CLUSTER"i

COALESCE
    = "COALESCE"i

COLLATE
    = "COLLATE"i

COLLATION
    = "COLLATION"i

COLUMN
    = "COLUMN"i

COLUMNS
    = "COLUMNS"i

COMMENT
    = "COMMENT"i

COMMENTS
    = "COMMENTS"i

COMMIT
    = "COMMIT"i

COMMITTED
    = "COMMITTED"i

CONCURRENTLY
    = "CONCURRENTLY"i

CONFIGURATION
    = "CONFIGURATION"i

CONFLICT
    = "CONFLICT"i

CONNECTION
    = "CONNECTION"i

CONSTRAINT
    = "CONSTRAINT"i

CONSTRAINTS
    = "CONSTRAINTS"i

CONTENT
    = "CONTENT"i

CONTINUE
    = "CONTINUE"i

CONVERSION
    = "CONVERSION"i

COPY
    = "COPY"i

COST
    = "COST"i

CREATE
    = "CREATE"i

CROSS
    = "CROSS"i

CSV
    = "CSV"i

CUBE
    = "CUBE"i

CURRENT
    = "CURRENT"i

CURRENTCATALOG
    = "CURRENT_CATALOG"i

CURRENTDATE
    = "CURRENT_DATE"i

CURRENTROLE
    = "CURRENT_ROLE"i

CURRENTSCHEMA
    = "CURRENT_SCHEMA"i

CURRENTTIME
    = "CURRENT_TIME"i

CURRENTTIMESTAMP
    = "CURRENT_TIMESTAMP"i

CURRENTUSER
    = "CURRENT_USER"i

CURSOR
    = "CURSOR"i

CYCLE
    = "CYCLE"i

DATA
    = "DATA"i

DATABASE
    = "DATABASE"i

DAY
    = "DAY"i

DEALLOCATE
    = "DEALLOCATE"i

DEC
    = "DEC"i

DECIMAL
    = "DECIMAL"i

DECLARE
    = "DECLARE"i

DEFAULT
    = "DEFAULT"i

DEFAULTS
    = "DEFAULTS"i

DEFERRABLE
    = "DEFERRABLE"i

DEFERRED
    = "DEFERRED"i

DEFINER
    = "DEFINER"i

DELETE
    = "DELETE"i

DELIMITER
    = "DELIMITER"i

DELIMITERS
    = "DELIMITERS"i

DEPENDS
    = "DEPENDS"i

DESC
    = "DESC"i

DETACH
    = "DETACH"i

DICTIONARY
    = "DICTIONARY"i

DISABLE
    = "DISABLE"i

DISCARD
    = "DISCARD"i

DISTINCT
    = "DISTINCT"i

DO
    = "DO"i

DOCUMENT
    = "DOCUMENT"i

DOMAIN
    = "DOMAIN"i

DOUBLE
    = "DOUBLE"i

DROP
    = "DROP"i

EACH
    = "EACH"i

ELSE
    = "ELSE"i

ENABLE
    = "ENABLE"i

ENCODING
    = "ENCODING"i

ENCRYPTED
    = "ENCRYPTED"i

END
    = "END"i

ENUM
    = "ENUM"i

ESCAPE
    = "ESCAPE"i

EVENT
    = "EVENT"i

EXCEPT
    = "EXCEPT"i

EXCLUDE
    = "EXCLUDE"i

EXCLUDING
    = "EXCLUDING"i

EXCLUSIVE
    = "EXCLUSIVE"i

EXECUTE
    = "EXECUTE"i

EXISTS
    = "EXISTS"i

EXPLAIN
    = "EXPLAIN"i

EXTENSION
    = "EXTENSION"i

EXTERNAL
    = "EXTERNAL"i

EXTRACT
    = "EXTRACT"i

FALSE
    = "FALSE"i

FAMILY
    = "FAMILY"i

FETCH
    = "FETCH"i

FILTER
    = "FILTER"i

FIRST
    = "FIRST"i

FLOAT
    = "FLOAT"i

FOLLOWING
    = "FOLLOWING"i

FOR
    = "FOR"i

FORCE
    = "FORCE"i

FOREIGN
    = "FOREIGN"i

FORWARD
    = "FORWARD"i

FREEZE
    = "FREEZE"i

FROM
    = "FROM"i

FULL
    = "FULL"i

FUNCTION
    = "FUNCTION"i

FUNCTIONS
    = "FUNCTIONS"i

GENERATED
    = "GENERATED"i

GLOBAL
    = "GLOBAL"i

GRANT
    = "GRANT"i

GRANTED
    = "GRANTED"i

GREATEST
    = "GREATEST"i

GROUP
    = "GROUP"i

GROUPING
    = "GROUPING"i

GROUPS
    = "GROUPS"i

HANDLER
    = "HANDLER"i

HAVING
    = "HAVING"i

HEADER
    = "HEADER"i

HOLD
    = "HOLD"i

HOUR
    = "HOUR"i

IDENTITY
    = "IDENTITY"i

IF
    = "IF"i

ILIKE
    = "ILIKE"i

IMMEDIATE
    = "IMMEDIATE"i

IMMUTABLE
    = "IMMUTABLE"i

IMPLICIT
    = "IMPLICIT"i

IMPORT
    = "IMPORT"i

IN
    = "IN"i

INCLUDE
    = "INCLUDE"i

INCLUDING
    = "INCLUDING"i

INCREMENT
    = "INCREMENT"i

INDEX
    = "INDEX"i

INDEXES
    = "INDEXES"i

INHERIT
    = "INHERIT"i

INHERITS
    = "INHERITS"i

INITIALLY
    = "INITIALLY"i

INLINE
    = "INLINE"i

INNER
    = "INNER"i

INOUT
    = "INOUT"i

INPUT
    = "INPUT"i

INSENSITIVE
    = "INSENSITIVE"i

INSERT
    = "INSERT"i

INSTEAD
    = "INSTEAD"i

INT
    = "INT"i

INTEGER
    = "INTEGER"i

INTERSECT
    = "INTERSECT"i

INTERVAL
    = "INTERVAL"i

INTO
    = "INTO"i

INVOKER
    = "INVOKER"i

IS
    = "IS"i

ISNULL
    = "ISNULL"i

ISOLATION
    = "ISOLATION"i

JOIN
    = "JOIN"i

KEY
    = "KEY"i

LABEL
    = "LABEL"i

LANGUAGE
    = "LANGUAGE"i

LARGE
    = "LARGE"i

LAST
    = "LAST"i

LATERAL
    = "LATERAL"i

LEADING
    = "LEADING"i

LEAKPROOF
    = "LEAKPROOF"i

LEAST
    = "LEAST"i

LEFT
    = "LEFT"i

LEVEL
    = "LEVEL"i

LIKE
    = "LIKE"i

LIMIT
    = "LIMIT"i

LISTEN
    = "LISTEN"i

LOAD
    = "LOAD"i

LOCAL
    = "LOCAL"i

LOCALTIME
    = "LOCALTIME"i

LOCALTIMESTAMP
    = "LOCALTIMESTAMP"i

LOCATION
    = "LOCATION"i

LOCK
    = "LOCK"i

LOCKED
    = "LOCKED"i

LOGGED
    = "LOGGED"i

MAPPING
    = "MAPPING"i

MATCH
    = "MATCH"i

MATERIALIZED
    = "MATERIALIZED"i

MAXVALUE
    = "MAXVALUE"i

METHOD
    = "METHOD"i

MINUTE
    = "MINUTE"i

MINVALUE
    = "MINVALUE"i

MODE
    = "MODE"i

MONTH
    = "MONTH"i

MOVE
    = "MOVE"i

NAME
    = "NAME"i

NAMES
    = "NAMES"i

NATIONAL
    = "NATIONAL"i

NATURAL
    = "NATURAL"i

NCHAR
    = "NCHAR"i

NEW
    = "NEW"i

NEXT
    = "NEXT"i

NO
    = "NO"i

NONE
    = "NONE"i

NOT
    = "NOT"i

NOTHING
    = "NOTHING"i

NOTIFY
    = "NOTIFY"i

NOTNULL
    = "NOTNULL"i

NOWAIT
    = "NOWAIT"i

NULL
    = "NULL"i

NULLIF
    = "NULLIF"i

NULLS
    = "NULLS"i

NUMERIC
    = "NUMERIC"i

OBJECT
    = "OBJECT"i

OF
    = "OF"i

OFF
    = "OFF"i

OFFSET
    = "OFFSET"i

OIDS
    = "OIDS"i

OLD
    = "OLD"i

ON
    = "ON"i

ONLY
    = "ONLY"i

OPERATOR
    = "OPERATOR"i

OPTION
    = "OPTION"i

OPTIONS
    = "OPTIONS"i

OR
    = "OR"i

ORDER
    = "ORDER"i

ORDINALITY
    = "ORDINALITY"i

OTHERS
    = "OTHERS"i

OUT
    = "OUT"i

OUTER
    = "OUTER"i

OVER
    = "OVER"i

OVERLAPS
    = "OVERLAPS"i

OVERLAY
    = "OVERLAY"i

OVERRIDING
    = "OVERRIDING"i

OWNED
    = "OWNED"i

OWNER
    = "OWNER"i

PARALLEL
    = "PARALLEL"i

PARSER
    = "PARSER"i

PARTIAL
    = "PARTIAL"i

PARTITION
    = "PARTITION"i

PASSING
    = "PASSING"i

PASSWORD
    = "PASSWORD"i

PLACING
    = "PLACING"i

PLANS
    = "PLANS"i

POLICY
    = "POLICY"i

POSITION
    = "POSITION"i

PRECEDING
    = "PRECEDING"i

PRECISION
    = "PRECISION"i

PRESERVE
    = "PRESERVE"i

PREPARE
    = "PREPARE"i

PREPARED
    = "PREPARED"i

PRIMARY
    = "PRIMARY"i

PRIOR
    = "PRIOR"i

PRIVILEGES
    = "PRIVILEGES"i

PROCEDURAL
    = "PROCEDURAL"i

PROCEDURE
    = "PROCEDURE"i

PROCEDURES
    = "PROCEDURES"i

PROGRAM
    = "PROGRAM"i

PUBLICATION
    = "PUBLICATION"i

QUOTE
    = "QUOTE"i

RANGE
    = "RANGE"i

READ
    = "READ"i

REAL
    = "REAL"i

REASSIGN
    = "REASSIGN"i

RECHECK
    = "RECHECK"i

RECURSIVE
    = "RECURSIVE"i

REF
    = "REF"i

REFERENCES
    = "REFERENCES"i

REFERENCING
    = "REFERENCING"i

REFRESH
    = "REFRESH"i

REINDEX
    = "REINDEX"i

RELATIVE
    = "RELATIVE"i

RELEASE
    = "RELEASE"i

RENAME
    = "RENAME"i

REPEATABLE
    = "REPEATABLE"i

REPLACE
    = "REPLACE"i

REPLICA
    = "REPLICA"i

RESET
    = "RESET"i

RESTART
    = "RESTART"i

RESTRICT
    = "RESTRICT"i

RETURNING
    = "RETURNING"i

RETURNS
    = "RETURNS"i

REVOKE
    = "REVOKE"i

RIGHT
    = "RIGHT"i

ROLE
    = "ROLE"i

ROLLBACK
    = "ROLLBACK"i

ROLLUP
    = "ROLLUP"i

ROUTINE
    = "ROUTINE"i

ROUTINES
    = "ROUTINES"i

ROW
    = "ROW"i

ROWS
    = "ROWS"i

RULE
    = "RULE"i

SAVEPOINT
    = "SAVEPOINT"i

SCHEMA
    = "SCHEMA"i

SCHEMAS
    = "SCHEMAS"i

SCROLL
    = "SCROLL"i

SEARCH
    = "SEARCH"i

SECOND
    = "SECOND"i

SECURITY
    = "SECURITY"i

SELECT
    = "SELECT"i

SEQUENCE
    = "SEQUENCE"i

SEQUENCES
    = "SEQUENCES"i

SERIALIZABLE
    = "SERIALIZABLE"i

SERVER
    = "SERVER"i

SESSION
    = "SESSION"i

SESSIONUSER
    = "SESSION_USER"i

SET
    = "SET"i

SETS
    = "SETS"i

SETOF
    = "SETOF"i

SHARE
    = "SHARE"i

SHOW
    = "SHOW"i

SIMILAR
    = "SIMILAR"i

SIMPLE
    = "SIMPLE"i

SKIP
    = "SKIP"i

SMALLINT
    = "SMALLINT"i

SNAPSHOT
    = "SNAPSHOT"i

SOME
    = "SOME"i

SQL
    = "SQL"i

STABLE
    = "STABLE"i

STANDALONE
    = "STANDALONE"i

START
    = "START"i

STATEMENT
    = "STATEMENT"i

STATISTICS
    = "STATISTICS"i

STDIN
    = "STDIN"i

STDOUT
    = "STDOUT"i

STORAGE
    = "STORAGE"i

STRICT
    = "STRICT"i

STRIP
    = "STRIP"i

SUBSCRIPTION
    = "SUBSCRIPTION"i

SUBSTRING
    = "SUBSTRING"i

SYMMETRIC
    = "SYMMETRIC"i

SYSID
    = "SYSID"i

SYSTEM
    = "SYSTEM"i

TABLE
    = "TABLE"i

TABLES
    = "TABLES"i

TABLESAMPLE
    = "TABLESAMPLE"i

TABLESPACE
    = "TABLESPACE"i

TEMP
    = "TEMP"i

TEMPLATE
    = "TEMPLATE"i

TEMPORARY
    = "TEMPORARY"i

TEXT
    = "TEXT"i

THEN
    = "THEN"i

TIES
    = "TIES"i

TIME
    = "TIME"i

TIMESTAMP
    = "TIMESTAMP"i

TO
    = "TO"i

TRAILING
    = "TRAILING"i

TRANSACTION
    = "TRANSACTION"i

TRANSFORM
    = "TRANSFORM"i

TREAT
    = "TREAT"i

TRIGGER
    = "TRIGGER"i

TRIM
    = "TRIM"i

TRUE
    = "TRUE"i

TRUNCATE
    = "TRUNCATE"i

TRUSTED
    = "TRUSTED"i

TYPE
    = "TYPE"i

TYPES
    = "TYPES"i

UNBOUNDED
    = "UNBOUNDED"i

UNCOMMITTED
    = "UNCOMMITTED"i

UNENCRYPTED
    = "UNENCRYPTED"i

UNION
    = "UNION"i

UNIQUE
    = "UNIQUE"i

UNKNOWN
    = "UNKNOWN"i

UNLISTEN
    = "UNLISTEN"i

UNLOGGED
    = "UNLOGGED"i

UNTIL
    = "UNTIL"i

UPDATE
    = "UPDATE"i

USER
    = "USER"i

USING
    = "USING"i

VACUUM
    = "VACUUM"i

VALID
    = "VALID"i

VALIDATE
    = "VALIDATE"i

VALIDATOR
    = "VALIDATOR"i

VALUE
    = "VALUE"i

VALUES
    = "VALUES"i

VARCHAR
    = "VARCHAR"i

VARIADIC
    = "VARIADIC"i

VARYING
    = "VARYING"i

VERBOSE
    = "VERBOSE"i

VERSION
    = "VERSION"i

VIEW
    = "VIEW"i

VIEWS
    = "VIEWS"i

VOLATILE
    = "VOLATILE"i

WHEN
    = "WHEN"i

WHERE
    = "WHERE"i

WHITESPACE
    = "WHITESPACE"i

WINDOW
    = "WINDOW"i

WITH
    = "WITH"i

WITHIN
    = "WITHIN"i

WITHOUT
    = "WITHOUT"i

WORK
    = "WORK"i

WRAPPER
    = "WRAPPER"i

WRITE
    = "WRITE"i

XML
    = "XML"i

XMLATTRIBUTES
    = "XMLATTRIBUTES"i

XMLCONCAT
    = "XMLCONCAT"i

XMLELEMENT
    = "XMLELEMENT"i

XMLEXISTS
    = "XMLEXISTS"i

XMLFOREST
    = "XMLFOREST"i

XMLNAMESPACES
    = "XMLNAMESPACES"i

XMLPARSE
    = "XMLPARSE"i

XMLPI
    = "XMLPI"i

XMLROOT
    = "XMLROOT"i

XMLSERIALIZE
    = "XMLSERIALIZE"i

XMLTABLE
    = "XMLTABLE"i

YEAR
    = "YEAR"i

YES
    = "YES"i

ZONE
    = "ZONE"i

ICONST
    = [0-9]+

Decimal
    = ([0-9]* "." [0-9]+)
    / ([0-9]+ "." [0-9]*)

Real
    = (Decimal / ICONST) "E"i [+-]? [0-9]+

FCONST
    = Real
    / Decimal

LESSEQUALS
    = "<="

COLONEQUALS
    = ":="

GREATEREQUALS
    = ">="

EQUALSGREATER
    = "=>"

NOTEQUALS
    = "<>"
    / "!="

Space
    = [ \t\n\r\f]

NonNewLine
    = [^\n\r]

NewLine
    = [\n\r]

HorizSpace
    = [ \t\f]

SpecialWhiteSpace
    = Space+
    / (Comment NewLine)

HorizWhitespace
    = HorizSpace+
    / Comment

WhitespaceWithNewline
    = HorizWhitespace* NewLine SpecialWhiteSpace*

Comment
    = "--" NonNewLine*

_
    = (Space+
    / Comment)* {
        return nil, nil
    }

PARAM
    = "$" ICONST

Identifier
    = [A-Za-z\pL_] [A-Za-z\pL_0-9$]* {
        return string(c.text), nil
    }

DblQuoIdentifier
    = "\"" ("\"\"" / [^"])+ "\"" {
        return string(c.text), nil
    }

QuoUniIdentifier
    = "U"i "&\"" ("\"\"" / [^"])+ "\"" (_ "UESCAPE"i _ "'" [^'] "'")? {
        return string(c.text), nil
    }

IDENT
    = Identifier
    / DblQuoIdentifier
    / QuoUniIdentifier

BCONST
    = "B"i "'" (QuoteContinue / [^'])* "'"

QuoteContinue
    = "'" WhitespaceWithNewline "'"

HexEscape
    = "\\x" [0-9A-Fa-f] [0-9A-Fa-f]?

OctalEscape
    = "\\" [0-7] ([0-7] [0-7]?)?

GenericEscape
    = "\\" [^0-7]

UnicodeEscape
    = "\\" (("u" [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]) / ("U" [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]))

QuoEscString
    = "E"i "'" (UnicodeEscape / HexEscape / OctalEscape / GenericEscape / QuoteContinue / "''" / [^'])+ "'"

QuoUniString
    = "U"i "&'" (QuoteContinue / "''" / [^'])+ "'" (_ "UESCAPE"i _ "'" [^'] "'")?

QuoString
    = "'" (QuoteContinue / "''" / [^'])+ "'"

SCONST
    = QuoUniString
    / QuoEscString
    / QuoString

TYPECAST
    = "::"

Op
    = [~!@#^&|`?+-*/%<>=]+

XCONST
    = "X"i "'" (QuoteContinue / [^'])* "'"

